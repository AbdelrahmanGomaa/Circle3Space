{"version":3,"file":"property-editor-ui-block-grid.element-D6ASWsRM.js","sources":["../../../src/packages/block/block-grid/block-grid-manager/block-grid-manager.context.ts","../../../src/packages/block/block-grid/components/block-grid-areas-container/block-grid-areas-container.element.ts","../../../src/packages/block/block-grid/components/block-grid-block-inline/block-grid-block-inline.element.ts","../../../src/packages/block/block-grid/components/block-grid-block-unsupported/block-grid-block-unsupported.element.ts","../../../src/packages/block/block-grid/components/block-grid-block/block-grid-block.element.ts","../../../src/packages/block/block-grid/components/block-grid-entries/block-grid-entries.context.ts","../../../src/packages/block/block-grid/components/block-grid-entries/block-grid-entries.element.ts","../../../src/packages/block/block-grid/components/block-grid-entry/block-grid-entry.context.ts","../../../src/packages/block/block-grid/components/block-grid-entry/block-grid-entry.element.ts","../../../src/packages/block/block-grid/components/block-scale-handler/block-scale-handler.element.ts","../../../src/packages/block/block-grid/components/ref-grid-block/ref-grid-block.element.ts","../../../src/packages/block/block-grid/property-editors/block-grid-editor/property-editor-ui-block-grid.element.ts"],"sourcesContent":["import type { UmbBlockGridLayoutModel, UmbBlockGridTypeModel } from '../types.js';\r\nimport type { UmbBlockGridWorkspaceOriginData } from '../index.js';\r\nimport { UMB_BLOCK_GRID_DEFAULT_LAYOUT_STYLESHEET } from '../context/constants.js';\r\nimport {\r\n\tappendToFrozenArray,\r\n\tpushAtToUniqueArray,\r\n\tUmbArrayState,\r\n\tUmbBooleanState,\r\n} from '@umbraco-cms/backoffice/observable-api';\r\nimport { transformServerPathToClientPath } from '@umbraco-cms/backoffice/utils';\r\nimport { UmbBlockManagerContext } from '@umbraco-cms/backoffice/block';\r\nimport { UMB_APP_CONTEXT } from '@umbraco-cms/backoffice/app';\r\nimport type { UmbBlockDataModel } from '@umbraco-cms/backoffice/block';\r\nimport type { UmbBlockTypeGroup } from '@umbraco-cms/backoffice/block-type';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { UmbNumberRangeValueType } from '@umbraco-cms/backoffice/models';\r\nimport type { UmbPropertyEditorConfigCollection } from '@umbraco-cms/backoffice/property-editor';\r\n\r\n/**\r\n * A implementation of the Block Manager specifically for the Block Grid Editor.\r\n */\r\nexport class UmbBlockGridManagerContext<\r\n\tBlockLayoutType extends UmbBlockGridLayoutModel = UmbBlockGridLayoutModel,\r\n> extends UmbBlockManagerContext<UmbBlockGridTypeModel, UmbBlockGridLayoutModel, UmbBlockGridWorkspaceOriginData> {\r\n\t//\r\n\t#inlineEditingMode = new UmbBooleanState(undefined);\r\n\treadonly inlineEditingMode = this.#inlineEditingMode.asObservable();\r\n\r\n\tsetInlineEditingMode(inlineEditingMode: boolean | undefined) {\r\n\t\tthis.#inlineEditingMode.setValue(inlineEditingMode ?? false);\r\n\t}\r\n\tgetInlineEditingMode(): boolean | undefined {\r\n\t\treturn this.#inlineEditingMode.getValue();\r\n\t}\r\n\r\n\t#initAppUrl: Promise<void>;\r\n\r\n\t#serverUrl?: string;\r\n\r\n\t#blockGroups = new UmbArrayState(<Array<UmbBlockTypeGroup>>[], (x) => x.key);\r\n\tpublic readonly blockGroups = this.#blockGroups.asObservable();\r\n\r\n\tlayoutStylesheet = this._editorConfiguration.asObservablePart((x) => {\r\n\t\tif (!x) return undefined;\r\n\t\tconst layoutStylesheet = x.getValueByAlias<string>('layoutStylesheet');\r\n\t\tif (!layoutStylesheet) return UMB_BLOCK_GRID_DEFAULT_LAYOUT_STYLESHEET;\r\n\r\n\t\tif (layoutStylesheet) {\r\n\t\t\t// Cause we await initAppUrl in setting the _editorConfiguration, we can trust the appUrl begin here.\r\n\t\t\tconst url = new URL(transformServerPathToClientPath(layoutStylesheet), this.#serverUrl);\r\n\t\t\treturn url.href;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t});\r\n\tgridColumns = this._editorConfiguration.asObservablePart((x) => {\r\n\t\tconst value = x?.getValueByAlias('gridColumns') as string | undefined;\r\n\t\treturn parseInt(value && value !== '' ? value : '12');\r\n\t});\r\n\r\n\tgetMinAllowed() {\r\n\t\treturn this._editorConfiguration.getValue()?.getValueByAlias<UmbNumberRangeValueType>('validationLimit')?.min ?? 0;\r\n\t}\r\n\r\n\tgetMaxAllowed() {\r\n\t\treturn (\r\n\t\t\tthis._editorConfiguration.getValue()?.getValueByAlias<UmbNumberRangeValueType>('validationLimit')?.max ?? Infinity\r\n\t\t);\r\n\t}\r\n\r\n\toverride setEditorConfiguration(configs: UmbPropertyEditorConfigCollection) {\r\n\t\tthis.#initAppUrl.then(() => {\r\n\t\t\t// we await initAppUrl, So the appUrl begin here is available when retrieving the layoutStylesheet.\r\n\t\t\tsuper.setEditorConfiguration(configs);\r\n\t\t});\r\n\t}\r\n\r\n\tsetBlockGroups(blockGroups: Array<UmbBlockTypeGroup>) {\r\n\t\tthis.#blockGroups.setValue(blockGroups);\r\n\t}\r\n\tgetBlockGroups() {\r\n\t\treturn this.#blockGroups.value;\r\n\t}\r\n\tgetBlockGroupName(unique: string) {\r\n\t\treturn this.#blockGroups.getValue().find((group) => group.key === unique)?.name;\r\n\t}\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\r\n\t\tthis.#initAppUrl = this.getContext(UMB_APP_CONTEXT).then((appContext) => {\r\n\t\t\tthis.#serverUrl = appContext.getServerUrl();\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * @param contentElementTypeKey\r\n\t * @param partialLayoutEntry\r\n\t * @param _originData\r\n\t * @deprecated Use createWithPresets instead. Will be removed in v.17.\r\n\t */\r\n\tcreate(\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\t\tcontentElementTypeKey: string,\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\t\tpartialLayoutEntry?: Omit<BlockLayoutType, 'contentKey'>,\r\n\t\t// This property is used by some implementations, but not used in this. Do not remove. [NL]\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\t\t_originData?: UmbBlockGridWorkspaceOriginData,\r\n\t): never {\r\n\t\tthrow new Error('Method deparecated use createWithPresets');\r\n\t}\r\n\r\n\tasync createWithPresets(\r\n\t\tcontentElementTypeKey: string,\r\n\t\tpartialLayoutEntry?: Omit<BlockLayoutType, 'contentKey'>,\r\n\t\t// This property is used by some implementations, but not used in this.\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\t\toriginData?: UmbBlockGridWorkspaceOriginData,\r\n\t) {\r\n\t\treturn await super._createBlockData(contentElementTypeKey, partialLayoutEntry);\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts a layout entry into an area of a layout entry.\r\n\t * @param layoutEntry The layout entry to insert.\r\n\t * @param insert\r\n\t * @param entries The layout entries to search within.\r\n\t * @param parentUnique The parentUnique to search for.\r\n\t * @param parentId\r\n\t * @param areaKey The areaKey to insert the layout entry into.\r\n\t * @param index The index to insert the layout entry at.\r\n\t * @returns a updated layout entries array if the insert was successful.\r\n\t * @remarks\r\n\t * This method is recursive and will search for the parentUnique in the layout entries.\r\n\t * If the parentUnique is found, the layout entry will be inserted into the items of the area that matches the areaKey.\r\n\t * This returns a new array of layout entries with the updated layout entry inserted.\r\n\t * Because the layout entries are frozen, the affected parts is replaced with a new. Only updating/unfreezing the affected part of the structure.\r\n\t */\r\n\t#appendLayoutEntryToArea(\r\n\t\tinsert: UmbBlockGridLayoutModel,\r\n\t\tentries: Array<UmbBlockGridLayoutModel>,\r\n\t\tparentId: string,\r\n\t\tareaKey: string,\r\n\t\tindex: number,\r\n\t): Array<UmbBlockGridLayoutModel> | undefined {\r\n\t\t// I'm sorry, this code is not easy to read or maintain [NL]\r\n\t\tlet i: number = entries.length;\r\n\t\twhile (i--) {\r\n\t\t\tconst currentEntry = entries[i];\r\n\t\t\t// Lets check if we found the right parent layout entry:\r\n\t\t\tif (currentEntry.contentKey === parentId) {\r\n\t\t\t\t// Append the layout entry to be inserted and unfreeze the rest of the data:\r\n\t\t\t\tconst areas =\r\n\t\t\t\t\tcurrentEntry.areas?.map((x) =>\r\n\t\t\t\t\t\tx.key === areaKey\r\n\t\t\t\t\t\t\t? {\r\n\t\t\t\t\t\t\t\t\t...x,\r\n\t\t\t\t\t\t\t\t\titems: pushAtToUniqueArray([...x.items], insert, (x) => x.contentKey === insert.contentKey, index),\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t: x,\r\n\t\t\t\t\t) ?? [];\r\n\t\t\t\treturn appendToFrozenArray(\r\n\t\t\t\t\tentries,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t...currentEntry,\r\n\t\t\t\t\t\tareas,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t(x) => x.contentKey === currentEntry.contentKey,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t// Otherwise check if any items of the areas are the parent layout entry we are looking for. We do so based on parentId, recursively:\r\n\t\t\tif (currentEntry.areas) {\r\n\t\t\t\tlet y: number = currentEntry.areas.length;\r\n\t\t\t\twhile (y--) {\r\n\t\t\t\t\t// Recursively ask the items of this area to insert the layout entry, if something returns there was a match in this branch. [NL]\r\n\t\t\t\t\tconst correctedAreaItems = this.#appendLayoutEntryToArea(\r\n\t\t\t\t\t\tinsert,\r\n\t\t\t\t\t\tcurrentEntry.areas[y].items,\r\n\t\t\t\t\t\tparentId,\r\n\t\t\t\t\t\tareaKey,\r\n\t\t\t\t\t\tindex,\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (correctedAreaItems) {\r\n\t\t\t\t\t\t// This area got a corrected set of items, lets append those to the area and unfreeze the surrounding data:\r\n\t\t\t\t\t\tconst area = currentEntry.areas[y];\r\n\t\t\t\t\t\treturn appendToFrozenArray(\r\n\t\t\t\t\t\t\tentries,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t...currentEntry,\r\n\t\t\t\t\t\t\t\tareas: appendToFrozenArray(\r\n\t\t\t\t\t\t\t\t\tcurrentEntry.areas,\r\n\t\t\t\t\t\t\t\t\t{ ...area, items: correctedAreaItems },\r\n\t\t\t\t\t\t\t\t\t(z) => z.key === area.key,\r\n\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t(x) => x.contentKey === currentEntry.contentKey,\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tinsert(\r\n\t\tlayoutEntry: BlockLayoutType,\r\n\t\tcontent: UmbBlockDataModel,\r\n\t\tsettings: UmbBlockDataModel | undefined,\r\n\t\toriginData: UmbBlockGridWorkspaceOriginData,\r\n\t) {\r\n\t\tthis.setOneLayout(layoutEntry, originData);\r\n\t\tthis.insertBlockData(layoutEntry, content, settings, originData);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\toverride setOneLayout(layoutEntry: BlockLayoutType, originData?: UmbBlockGridWorkspaceOriginData) {\r\n\t\tconst index = originData?.index ?? -1;\r\n\r\n\t\tif (originData?.parentUnique && originData?.areaKey) {\r\n\t\t\t// Find layout entry based on parentUnique, recursively, as it needs to check layout of areas as well:\r\n\t\t\tconst layoutEntries = this.#appendLayoutEntryToArea(\r\n\t\t\t\tlayoutEntry,\r\n\t\t\t\tthis._layouts.getValue(),\r\n\t\t\t\toriginData?.parentUnique,\r\n\t\t\t\toriginData?.areaKey,\r\n\t\t\t\tindex,\r\n\t\t\t);\r\n\r\n\t\t\t// If this appending was successful, we got a new set of layout entries which we can set as the new value: [NL]\r\n\t\t\tif (layoutEntries) {\r\n\t\t\t\tthis._layouts.setValue(layoutEntries);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._layouts.appendOneAt(layoutEntry, index);\r\n\t\t}\r\n\t}\r\n\r\n\tonDragStart() {\r\n\t\t(this.getHostElement() as HTMLElement).style.setProperty('--umb-block-grid--is-dragging', ' ');\r\n\t}\r\n\r\n\tonDragEnd() {\r\n\t\t(this.getHostElement() as HTMLElement).style.removeProperty('--umb-block-grid--is-dragging');\r\n\t}\r\n}\r\n","import type { UmbBlockGridTypeAreaType } from '../../types.js';\r\nimport { UMB_BLOCK_GRID_ENTRY_CONTEXT } from '../block-grid-entry/constants.js';\r\nimport { UMB_BLOCK_GRID_MANAGER_CONTEXT } from '../../block-grid-manager/constants.js';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { css, customElement, html, repeat, state } from '@umbraco-cms/backoffice/external/lit';\r\n\r\n/**\r\n * @description\r\n * This element is used to render the block grid areas.\r\n */\r\n@customElement('umb-block-grid-areas-container')\r\nexport class UmbBlockGridAreasContainerElement extends UmbLitElement {\r\n\t//\r\n\t@state()\r\n\t_styleElement?: HTMLLinkElement;\r\n\r\n\t@state()\r\n\t_areas?: Array<UmbBlockGridTypeAreaType> = [];\r\n\r\n\t@state()\r\n\t_areaGridColumns?: number;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.consumeContext(UMB_BLOCK_GRID_ENTRY_CONTEXT, (context) => {\r\n\t\t\tthis.observe(\r\n\t\t\t\tcontext.areas,\r\n\t\t\t\t(areas) => {\r\n\t\t\t\t\tthis._areas = areas;\r\n\t\t\t\t},\r\n\t\t\t\t'observeAreas',\r\n\t\t\t);\r\n\t\t\tthis.observe(\r\n\t\t\t\tcontext.areaGridColumns,\r\n\t\t\t\t(areaGridColumns) => {\r\n\t\t\t\t\tthis._areaGridColumns = areaGridColumns;\r\n\t\t\t\t\t//this.requestUpdate('_areaGridColumns');\r\n\t\t\t\t},\r\n\t\t\t\t'observeAreaGridColumns',\r\n\t\t\t);\r\n\t\t});\r\n\t\tthis.consumeContext(UMB_BLOCK_GRID_MANAGER_CONTEXT, (manager) => {\r\n\t\t\tthis.observe(\r\n\t\t\t\tmanager.layoutStylesheet,\r\n\t\t\t\t(stylesheet) => {\r\n\t\t\t\t\t// Do not re-render stylesheet if its the same href.\r\n\t\t\t\t\tif (!stylesheet || this._styleElement?.href === stylesheet) return;\r\n\t\t\t\t\tthis._styleElement = document.createElement('link');\r\n\t\t\t\t\tthis._styleElement.rel = 'stylesheet';\r\n\t\t\t\t\tthis._styleElement.href = stylesheet;\r\n\t\t\t\t},\r\n\t\t\t\t'observeStylesheet',\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn this._areas && this._areas.length > 0\r\n\t\t\t? html` ${this._styleElement}\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclass=\"umb-block-grid__area-container\"\r\n\t\t\t\t\t\tpart=\"area-container\"\r\n\t\t\t\t\t\tstyle=\"--umb-block-grid--area-grid-columns: ${this._areaGridColumns}\">\r\n\t\t\t\t\t\t${repeat(\r\n\t\t\t\t\t\t\tthis._areas,\r\n\t\t\t\t\t\t\t(area) => area.key,\r\n\t\t\t\t\t\t\t(area) =>\r\n\t\t\t\t\t\t\t\thtml`<umb-block-grid-entries\r\n\t\t\t\t\t\t\t\t\tpart=\"area\"\r\n\t\t\t\t\t\t\t\t\tclass=\"umb-block-grid__area\"\r\n\t\t\t\t\t\t\t\t\t.areaKey=${area.key}\r\n\t\t\t\t\t\t\t\t\t.layoutColumns=${area.columnSpan}></umb-block-grid-entries>`,\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>`\r\n\t\t\t: '';\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\twidth: 100%;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbBlockGridAreasContainerElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-block-grid-areas-container': UmbBlockGridAreasContainerElement;\r\n\t}\r\n}\r\n","import { UMB_BLOCK_GRID_ENTRY_CONTEXT } from '../block-grid-entry/constants.js';\r\nimport type { UmbBlockGridWorkspaceOriginData } from '../../workspace/block-grid-workspace.modal-token.js';\r\nimport { UMB_BLOCK_GRID_ENTRIES_CONTEXT } from '../block-grid-entries/constants.js';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { css, customElement, html, nothing, property, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport type { UmbPropertyTypeModel } from '@umbraco-cms/backoffice/content-type';\r\nimport type { UmbBlockEditorCustomViewConfiguration } from '@umbraco-cms/backoffice/block-custom-view';\r\nimport {\r\n\ttype UMB_BLOCK_WORKSPACE_CONTEXT,\r\n\tUMB_BLOCK_WORKSPACE_ALIAS,\r\n\ttype UmbBlockDataType,\r\n} from '@umbraco-cms/backoffice/block';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\nimport {\r\n\tUmbExtensionApiInitializer,\r\n\tUmbExtensionsApiInitializer,\r\n\ttype UmbApiConstructorArgumentsMethodType,\r\n} from '@umbraco-cms/backoffice/extension-api';\r\nimport { UmbLanguageItemRepository } from '@umbraco-cms/backoffice/language';\r\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport { UmbDataPathPropertyValueQuery } from '@umbraco-cms/backoffice/validation';\r\nimport type { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\n\r\nconst apiArgsCreator: UmbApiConstructorArgumentsMethodType<unknown> = (manifest: unknown) => {\r\n\treturn [{ manifest }];\r\n};\r\n\r\n@customElement('umb-block-grid-block-inline')\r\nexport class UmbBlockGridBlockInlineElement extends UmbLitElement {\r\n\t//\r\n\t#blockContext?: typeof UMB_BLOCK_GRID_ENTRY_CONTEXT.TYPE;\r\n\t#workspaceContext?: typeof UMB_BLOCK_WORKSPACE_CONTEXT.TYPE;\r\n\t#variantId: UmbVariantId | undefined;\r\n\t#contentKey?: string;\r\n\t#parentUnique?: string | null;\r\n\t#areaKey?: string | null;\r\n\r\n\t@property({ attribute: false })\r\n\tconfig?: UmbBlockEditorCustomViewConfiguration;\r\n\r\n\t@property({ type: String, reflect: false })\r\n\tlabel?: string;\r\n\r\n\t@property({ type: String, reflect: false })\r\n\ticon?: string;\r\n\r\n\t@property({ type: Boolean, reflect: true })\r\n\tunpublished?: boolean;\r\n\r\n\t@property({ attribute: false })\r\n\tcontent?: UmbBlockDataType;\r\n\r\n\t@state()\r\n\t_inlineProperty?: UmbPropertyTypeModel;\r\n\r\n\t@state()\r\n\t_inlinePropertyDataPath?: string;\r\n\r\n\t@state()\r\n\tprivate _ownerContentTypeName?: string;\r\n\r\n\t@state()\r\n\tprivate _variantName?: string;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.consumeContext(UMB_BLOCK_GRID_ENTRY_CONTEXT, (blockContext) => {\r\n\t\t\tthis.#blockContext = blockContext;\r\n\t\t\tthis.observe(\r\n\t\t\t\tthis.#blockContext.unique,\r\n\t\t\t\t(contentKey) => {\r\n\t\t\t\t\tthis.#contentKey = contentKey;\r\n\t\t\t\t\tthis.#load();\r\n\t\t\t\t},\r\n\t\t\t\t'observeContentKey',\r\n\t\t\t);\r\n\t\t});\r\n\t\tthis.consumeContext(UMB_BLOCK_GRID_ENTRIES_CONTEXT, (entriesContext) => {\r\n\t\t\tthis.#parentUnique = entriesContext.getParentUnique();\r\n\t\t\tthis.#areaKey = entriesContext.getAreaKey();\r\n\t\t});\r\n\t\tnew UmbExtensionApiInitializer(\r\n\t\t\tthis,\r\n\t\t\tumbExtensionsRegistry,\r\n\t\t\tUMB_BLOCK_WORKSPACE_ALIAS,\r\n\t\t\tapiArgsCreator,\r\n\t\t\t(permitted, ctrl) => {\r\n\t\t\t\tconst context = ctrl.api as typeof UMB_BLOCK_WORKSPACE_CONTEXT.TYPE | undefined;\r\n\t\t\t\tif (permitted && context) {\r\n\t\t\t\t\t// Risky business, cause here we are lucky that it seems to be consumed and set before this is called and there for this is acceptable for now. [NL]\r\n\t\t\t\t\tif (this.#parentUnique === undefined || this.#areaKey === undefined) {\r\n\t\t\t\t\t\tthrow new Error('Parent unique and area key must be defined');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.#workspaceContext = context;\r\n\t\t\t\t\tcontext.setOriginData({\r\n\t\t\t\t\t\tareaKey: this.#areaKey,\r\n\t\t\t\t\t\tparentUnique: this.#parentUnique,\r\n\t\t\t\t\t} as UmbBlockGridWorkspaceOriginData);\r\n\t\t\t\t\tthis.#workspaceContext.establishLiveSync();\r\n\r\n\t\t\t\t\tthis.#load();\r\n\r\n\t\t\t\t\tthis.observe(\r\n\t\t\t\t\t\tthis.#workspaceContext.content.structure.contentTypeProperties,\r\n\t\t\t\t\t\t(contentTypeProperties) => {\r\n\t\t\t\t\t\t\tthis._inlineProperty = contentTypeProperties[0];\r\n\t\t\t\t\t\t\tthis.#generatePropertyDataPath();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'observeProperties',\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tthis.observe(\r\n\t\t\t\t\t\tcontext.content.structure.ownerContentTypeName,\r\n\t\t\t\t\t\t(name) => {\r\n\t\t\t\t\t\t\tthis._ownerContentTypeName = name;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'observeContentTypeName',\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tthis.observe(\r\n\t\t\t\t\t\tcontext.variantId,\r\n\t\t\t\t\t\tasync (variantId) => {\r\n\t\t\t\t\t\t\tthis.#variantId = variantId;\r\n\t\t\t\t\t\t\tthis.#generatePropertyDataPath();\r\n\t\t\t\t\t\t\tif (variantId) {\r\n\t\t\t\t\t\t\t\tcontext.content.setup(this, variantId);\r\n\t\t\t\t\t\t\t\tconst culture = variantId.culture;\r\n\t\t\t\t\t\t\t\tif (culture) {\r\n\t\t\t\t\t\t\t\t\tconst languageRepository = new UmbLanguageItemRepository(this);\r\n\t\t\t\t\t\t\t\t\tconst { data } = await languageRepository.requestItems([culture]);\r\n\t\t\t\t\t\t\t\t\tconst name = data?.[0].name;\r\n\t\t\t\t\t\t\t\t\tthis._variantName = name ? this.localize.string(name) : undefined;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'observeVariant',\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tnew UmbExtensionsApiInitializer(this, umbExtensionsRegistry, 'workspaceContext', [this.#workspaceContext]);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t);\r\n\t}\r\n\r\n\t#load() {\r\n\t\tif (!this.#workspaceContext || !this.#contentKey) return;\r\n\t\tthis.#workspaceContext.load(this.#contentKey);\r\n\t}\r\n\r\n\t#generatePropertyDataPath() {\r\n\t\tif (!this.#variantId || !this._inlineProperty) return;\r\n\t\tconst property = this._inlineProperty;\r\n\t\tthis._inlinePropertyDataPath = `$.values[${UmbDataPathPropertyValueQuery({\r\n\t\t\talias: property.alias,\r\n\t\t\tculture: property.variesByCulture ? this.#variantId!.culture : null,\r\n\t\t\tsegment: property.variesBySegment ? this.#variantId!.segment : null,\r\n\t\t})}].value`;\r\n\t}\r\n\r\n\t#expose = () => {\r\n\t\tthis.#workspaceContext?.expose();\r\n\t};\r\n\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<div id=\"host\">\r\n\t\t\t\t<button id=\"open-part\" tabindex=\"0\">\r\n\t\t\t\t\t${this.#renderBlockInfo()}\r\n\t\t\t\t\t<slot></slot>\r\n\t\t\t\t\t<slot name=\"tag\"></slot>\r\n\t\t\t\t</button>\r\n\t\t\t\t${this.#renderInside()}\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n\r\n\t#renderBlockInfo() {\r\n\t\treturn html`\r\n\t\t\t<span id=\"content\">\r\n\t\t\t\t<span id=\"icon\">\r\n\t\t\t\t\t<umb-icon .name=${this.icon}></umb-icon>\r\n\t\t\t\t</span>\r\n\t\t\t\t<div id=\"info\">\r\n\t\t\t\t\t<umb-ufm-render id=\"name\" inline .markdown=${this.label} .value=${this.content}></umb-ufm-render>\r\n\t\t\t\t</div>\r\n\t\t\t</span>\r\n\t\t\t${this.unpublished\r\n\t\t\t\t? html`<uui-tag slot=\"name\" look=\"secondary\" title=${this.localize.term('blockEditor_notExposedDescription')}\r\n\t\t\t\t\t\t><umb-localize key=\"blockEditor_notExposedLabel\"></umb-localize\r\n\t\t\t\t\t></uui-tag>`\r\n\t\t\t\t: nothing}\r\n\t\t`;\r\n\t}\r\n\r\n\t#renderInside() {\r\n\t\tif (this.unpublished === true) {\r\n\t\t\treturn html`<uui-button id=\"exposeButton\" @click=${this.#expose}\r\n\t\t\t\t><uui-icon name=\"icon-add\"></uui-icon>\r\n\t\t\t\t<umb-localize\r\n\t\t\t\t\tkey=\"blockEditor_createThisFor\"\r\n\t\t\t\t\t.args=${[this._ownerContentTypeName, this._variantName]}></umb-localize\r\n\t\t\t></uui-button>`;\r\n\t\t} else {\r\n\t\t\treturn html`<div id=\"inside\" draggable=\"false\">\r\n\t\t\t\t<umb-property-type-based-property\r\n\t\t\t\t\t.property=${this._inlineProperty}\r\n\t\t\t\t\t.dataPath=${this._inlinePropertyDataPath ?? ''}\r\n\t\t\t\t\tslot=\"areas\"></umb-property-type-based-property>\r\n\t\t\t\t<umb-block-grid-areas-container slot=\"areas\" draggable=\"false\"></umb-block-grid-areas-container>\r\n\t\t\t</div>`;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\tumb-block-grid-areas-container {\r\n\t\t\t\tmargin-top: calc(var(--uui-size-2) + 1px);\r\n\t\t\t}\r\n\t\t\tumb-block-grid-areas-container::part(area) {\r\n\t\t\t\tmargin: var(--uui-size-2);\r\n\t\t\t}\r\n\r\n\t\t\t#exposeButton {\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\tmin-height: var(--uui-size-16);\r\n\t\t\t}\r\n\r\n\t\t\t#host {\r\n\t\t\t\tposition: relative;\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\twidth: 100%;\r\n\r\n\t\t\t\tbox-sizing: border-box;\r\n\t\t\t\tborder-radius: var(--uui-border-radius);\r\n\t\t\t\tbackground-color: var(--uui-color-surface);\r\n\r\n\t\t\t\tborder: 1px solid var(--uui-color-border);\r\n\t\t\t\ttransition: border-color 80ms;\r\n\r\n\t\t\t\tmin-width: 250px;\r\n\t\t\t}\r\n\t\t\t#open-part + * {\r\n\t\t\t\tborder-top: 1px solid var(--uui-color-border);\r\n\t\t\t}\r\n\t\t\t:host([disabled]) #open-part {\r\n\t\t\t\tcursor: default;\r\n\t\t\t\ttransition: border-color 80ms;\r\n\t\t\t}\r\n\t\t\t:host(:not([disabled])) #host:has(#open-part:hover) {\r\n\t\t\t\tborder-color: var(--uui-color-border-emphasis);\r\n\t\t\t}\r\n\t\t\t:host(:not([disabled])) #open-part:hover + * {\r\n\t\t\t\tborder-color: var(--uui-color-border-emphasis);\r\n\t\t\t}\r\n\t\t\t:host([disabled]) #host {\r\n\t\t\t\tborder-color: var(--uui-color-disabled-standalone);\r\n\t\t\t}\r\n\r\n\t\t\t:host([unpublished]) #open-part #content {\r\n\t\t\t\topacity: 0.6;\r\n\t\t\t}\r\n\r\n\t\t\tslot[name='tag'] {\r\n\t\t\t\tflex-grow: 1;\r\n\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tjustify-content: flex-end;\r\n\t\t\t\talign-items: center;\r\n\t\t\t}\r\n\r\n\t\t\tbutton {\r\n\t\t\t\tfont-size: inherit;\r\n\t\t\t\tfont-family: inherit;\r\n\t\t\t\tborder: 0;\r\n\t\t\t\tpadding: 0;\r\n\t\t\t\tbackground-color: transparent;\r\n\t\t\t\ttext-align: left;\r\n\t\t\t\tcolor: var(--uui-color-text);\r\n\t\t\t}\r\n\r\n\t\t\t#content {\r\n\t\t\t\talign-self: stretch;\r\n\t\t\t\tline-height: normal;\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tposition: relative;\r\n\t\t\t\talign-items: center;\r\n\t\t\t}\r\n\r\n\t\t\t#open-part {\r\n\t\t\t\tcolor: inherit;\r\n\t\t\t\ttext-decoration: none;\r\n\t\t\t\tcursor: pointer;\r\n\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\ttext-align: left;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\tjustify-content: flex-start;\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\tborder: none;\r\n\t\t\t\tbackground: none;\r\n\r\n\t\t\t\tmin-height: var(--uui-size-16);\r\n\t\t\t\tpadding: calc(var(--uui-size-2) + 1px);\r\n\t\t\t}\r\n\r\n\t\t\t#icon {\r\n\t\t\t\tfont-size: 1.2em;\r\n\t\t\t\tmargin-left: var(--uui-size-2);\r\n\t\t\t\tmargin-right: var(--uui-size-1);\r\n\t\t\t}\r\n\r\n\t\t\t#info {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex-direction: column;\r\n\t\t\t\talign-items: start;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t\theight: 100%;\r\n\t\t\t\tpadding-left: var(--uui-size-2, 6px);\r\n\t\t\t}\r\n\r\n\t\t\t#name {\r\n\t\t\t\tfont-weight: 700;\r\n\t\t\t}\r\n\r\n\t\t\tuui-tag {\r\n\t\t\t\tmargin-left: 0.5em;\r\n\t\t\t\tmargin-bottom: -0.3em;\r\n\t\t\t\tmargin-top: -0.3em;\r\n\t\t\t\tvertical-align: text-top;\r\n\t\t\t}\r\n\r\n\t\t\t:host(:not([disabled])) #open-part:hover #icon {\r\n\t\t\t\tcolor: var(--uui-color-interactive-emphasis);\r\n\t\t\t}\r\n\t\t\t:host(:not([disabled])) #open-part:hover #name {\r\n\t\t\t\tcolor: var(--uui-color-interactive-emphasis);\r\n\t\t\t}\r\n\r\n\t\t\t:host([disabled]) #icon {\r\n\t\t\t\tcolor: var(--uui-color-disabled-contrast);\r\n\t\t\t}\r\n\t\t\t:host([disabled]) #name {\r\n\t\t\t\tcolor: var(--uui-color-disabled-contrast);\r\n\t\t\t}\r\n\r\n\t\t\t#inside {\r\n\t\t\t\tposition: relative;\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tpadding: calc(var(--uui-size-layout-1));\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbBlockGridBlockInlineElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-block-grid-block-inline': UmbBlockGridBlockInlineElement;\r\n\t}\r\n}\r\n","import { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { css, customElement, html } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\n\r\n@customElement('umb-block-grid-block-unsupported')\r\nexport class UmbBlockGridBlockUnsupportedElement extends UmbLitElement {\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<div id=\"host\">\r\n\t\t\t\t<div id=\"open-part\">\r\n\t\t\t\t\t${this.#renderBlockInfo()}\r\n\t\t\t\t\t<slot></slot>\r\n\t\t\t\t\t<slot name=\"tag\"></slot>\r\n\t\t\t\t</div>\r\n\t\t\t\t${this.#renderInside()}\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n\r\n\t#renderBlockInfo() {\r\n\t\treturn html`\r\n\t\t\t<span id=\"content\">\r\n\t\t\t\t<span id=\"icon\">\r\n\t\t\t\t\t<umb-icon name=\"icon-alert\"></umb-icon>\r\n\t\t\t\t</span>\r\n\t\t\t\t<div id=\"info\">\r\n\t\t\t\t\t<span id=\"name\">${this.localize.term('blockEditor_unsupportedBlockName')}</span>\r\n\t\t\t\t</div>\r\n\t\t\t</span>\r\n\t\t`;\r\n\t}\r\n\r\n\t#renderInside() {\r\n\t\treturn html`<div id=\"inside\" draggable=\"false\">\r\n\t\t\t${this.localize.term('blockEditor_unsupportedBlockDescription')}\r\n\t\t\t<umb-block-grid-areas-container slot=\"areas\"></umb-block-grid-areas-container>\r\n\t\t</div>`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\tumb-block-grid-areas-container {\r\n\t\t\t\tmargin-top: calc(var(--uui-size-2) + 1px);\r\n\t\t\t}\r\n\t\t\tumb-block-grid-areas-container::part(area) {\r\n\t\t\t\tmargin: var(--uui-size-2);\r\n\t\t\t}\r\n\r\n\t\t\t#exposeButton {\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\tmin-height: var(--uui-size-16);\r\n\t\t\t}\r\n\r\n\t\t\t#host {\r\n\t\t\t\tposition: relative;\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\twidth: 100%;\r\n\r\n\t\t\t\tbox-sizing: border-box;\r\n\t\t\t\tborder-radius: var(--uui-border-radius);\r\n\t\t\t\tbackground-color: var(--uui-color-surface);\r\n\r\n\t\t\t\tborder: 1px solid var(--uui-color-border);\r\n\t\t\t\ttransition: border-color 80ms;\r\n\r\n\t\t\t\tmin-width: 250px;\r\n\t\t\t}\r\n\t\t\t#open-part + * {\r\n\t\t\t\tborder-top: 1px solid var(--uui-color-border);\r\n\t\t\t}\r\n\t\t\t#open-part {\r\n\t\t\t\tcursor: default;\r\n\t\t\t\ttransition: border-color 80ms;\r\n\t\t\t}\r\n\t\t\t#host {\r\n\t\t\t\tborder-color: var(--uui-color-disabled-standalone);\r\n\t\t\t}\r\n\r\n\t\t\t:host([unpublished]) #open-part #content {\r\n\t\t\t\topacity: 0.6;\r\n\t\t\t}\r\n\r\n\t\t\tslot[name='tag'] {\r\n\t\t\t\tflex-grow: 1;\r\n\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tjustify-content: flex-end;\r\n\t\t\t\talign-items: center;\r\n\t\t\t}\r\n\r\n\t\t\t#content {\r\n\t\t\t\talign-self: stretch;\r\n\t\t\t\tline-height: normal;\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tposition: relative;\r\n\t\t\t\talign-items: center;\r\n\t\t\t}\r\n\r\n\t\t\t#open-part {\r\n\t\t\t\tcolor: inherit;\r\n\t\t\t\ttext-decoration: none;\r\n\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\ttext-align: left;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\tjustify-content: flex-start;\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\tborder: none;\r\n\t\t\t\tbackground: none;\r\n\r\n\t\t\t\tmin-height: var(--uui-size-16);\r\n\t\t\t\tpadding: calc(var(--uui-size-2) + 1px);\r\n\t\t\t}\r\n\r\n\t\t\t#icon {\r\n\t\t\t\tfont-size: 1.2em;\r\n\t\t\t\tmargin-left: var(--uui-size-2);\r\n\t\t\t\tmargin-right: var(--uui-size-1);\r\n\t\t\t}\r\n\r\n\t\t\t#info {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex-direction: column;\r\n\t\t\t\talign-items: start;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t\theight: 100%;\r\n\t\t\t\tpadding-left: var(--uui-size-2, 6px);\r\n\t\t\t}\r\n\r\n\t\t\t#name {\r\n\t\t\t\tfont-weight: 700;\r\n\t\t\t}\r\n\r\n\t\t\tuui-tag {\r\n\t\t\t\tmargin-left: 0.5em;\r\n\t\t\t\tmargin-bottom: -0.3em;\r\n\t\t\t\tmargin-top: -0.3em;\r\n\t\t\t\tvertical-align: text-top;\r\n\t\t\t}\r\n\r\n\t\t\t#inside {\r\n\t\t\t\tposition: relative;\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tpadding: calc(var(--uui-size-layout-1));\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbBlockGridBlockUnsupportedElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-block-grid-block-unsupported': UmbBlockGridBlockUnsupportedElement;\r\n\t}\r\n}\r\n","import { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { css, customElement, html, nothing, property } from '@umbraco-cms/backoffice/external/lit';\r\nimport type { UmbBlockDataType } from '@umbraco-cms/backoffice/block';\r\nimport type { UmbBlockEditorCustomViewConfiguration } from '@umbraco-cms/backoffice/block-custom-view';\r\n\r\nimport '@umbraco-cms/backoffice/ufm';\r\n\r\n@customElement('umb-block-grid-block')\r\nexport class UmbBlockGridBlockElement extends UmbLitElement {\r\n\t//\r\n\t@property({ attribute: false })\r\n\tlabel?: string;\r\n\r\n\t@property({ type: String, reflect: false })\r\n\ticon?: string;\r\n\r\n\t@property({ attribute: false })\r\n\tconfig?: UmbBlockEditorCustomViewConfiguration;\r\n\r\n\t@property({ type: Boolean, reflect: true })\r\n\tunpublished?: boolean;\r\n\r\n\t@property({ attribute: false })\r\n\tcontent?: UmbBlockDataType;\r\n\r\n\toverride render() {\r\n\t\treturn html`<umb-ref-grid-block\r\n\t\t\tstandalone\r\n\t\t\thref=${(this.config?.showContentEdit ? this.config?.editContentPath : undefined) ?? ''}>\r\n\t\t\t<umb-icon slot=\"icon\" .name=${this.icon}></umb-icon>\r\n\t\t\t<umb-ufm-render slot=\"name\" inline .markdown=${this.label} .value=${this.content}></umb-ufm-render>\r\n\t\t\t${this.unpublished\r\n\t\t\t\t? html`<uui-tag slot=\"name\" look=\"secondary\" title=${this.localize.term('blockEditor_notExposedDescription')}\r\n\t\t\t\t\t\t><umb-localize key=\"blockEditor_notExposedLabel\"></umb-localize\r\n\t\t\t\t\t></uui-tag>`\r\n\t\t\t\t: nothing}\r\n\t\t\t<umb-block-grid-areas-container slot=\"areas\" draggable=\"false\"></umb-block-grid-areas-container>\r\n\t\t</umb-ref-grid-block>`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\tumb-block-grid-areas-container {\r\n\t\t\t\tmargin-top: calc(var(--uui-size-2) + 1px);\r\n\t\t\t}\r\n\t\t\tumb-block-grid-areas-container::part(area) {\r\n\t\t\t\tmargin: var(--uui-size-2);\r\n\t\t\t}\r\n\r\n\t\t\tuui-tag {\r\n\t\t\t\tmargin-left: 0.5em;\r\n\t\t\t\tmargin-bottom: -0.3em;\r\n\t\t\t\tmargin-top: -0.3em;\r\n\t\t\t\tvertical-align: text-top;\r\n\t\t\t}\r\n\t\t\t:host([unpublished]) umb-icon,\r\n\t\t\t:host([unpublished]) umb-ufm-render {\r\n\t\t\t\topacity: 0.6;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbBlockGridBlockElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-block-grid-block': UmbBlockGridBlockElement;\r\n\t}\r\n}\r\n","import type {\r\n\tUmbBlockGridLayoutModel,\r\n\tUmbBlockGridTypeAreaType,\r\n\tUmbBlockGridTypeModel,\r\n\tUmbBlockGridValueModel,\r\n} from '../../types.js';\r\nimport { forEachBlockLayoutEntryOf } from '../../utils/index.js';\r\nimport type { UmbBlockGridPropertyEditorConfig } from '../../property-editors/block-grid-editor/types.js';\r\nimport { UMB_BLOCK_GRID_MANAGER_CONTEXT } from '../../block-grid-manager/constants.js';\r\nimport { UMB_BLOCK_GRID_WORKSPACE_MODAL, type UmbBlockGridWorkspaceOriginData } from '../../workspace/index.js';\r\nimport type { UmbBlockGridScalableContainerContext } from '../../context/block-grid-scale-manager/block-grid-scale-manager.controller.js';\r\nimport { UMB_BLOCK_GRID_ENTRY_CONTEXT } from '../block-grid-entry/constants.js';\r\nimport {\r\n\tUMB_BLOCK_GRID_PROPERTY_EDITOR_SCHEMA_ALIAS,\r\n\tUMB_BLOCK_GRID_PROPERTY_EDITOR_UI_ALIAS,\r\n} from '../../property-editors/block-grid-editor/constants.js';\r\nimport {\r\n\tUmbArrayState,\r\n\tUmbBooleanState,\r\n\tUmbNumberState,\r\n\tUmbObjectState,\r\n\tUmbStringState,\r\n} from '@umbraco-cms/backoffice/observable-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbModalRouteRegistrationController, UmbRoutePathAddendumContext } from '@umbraco-cms/backoffice/router';\r\nimport type { UmbNumberRangeValueType } from '@umbraco-cms/backoffice/models';\r\nimport {\r\n\tUMB_CLIPBOARD_PROPERTY_CONTEXT,\r\n\tUmbClipboardPastePropertyValueTranslatorValueResolver,\r\n} from '@umbraco-cms/backoffice/clipboard';\r\nimport { UMB_PROPERTY_CONTEXT } from '@umbraco-cms/backoffice/property';\r\nimport {\r\n\tUMB_BLOCK_CATALOGUE_MODAL,\r\n\tUmbBlockEntriesContext,\r\n\ttype UmbBlockDataModel,\r\n} from '@umbraco-cms/backoffice/block';\r\n\r\ninterface UmbBlockGridAreaTypeInvalidRuleType {\r\n\tgroupKey?: string;\r\n\tkey?: string;\r\n\tname: string;\r\n\tamount: number;\r\n\tminRequirement: number;\r\n\tmaxRequirement: number;\r\n}\r\n\r\nexport class UmbBlockGridEntriesContext\r\n\textends UmbBlockEntriesContext<\r\n\t\ttypeof UMB_BLOCK_GRID_MANAGER_CONTEXT,\r\n\t\ttypeof UMB_BLOCK_GRID_MANAGER_CONTEXT.TYPE,\r\n\t\tUmbBlockGridTypeModel,\r\n\t\tUmbBlockGridLayoutModel,\r\n\t\tUmbBlockGridWorkspaceOriginData\r\n\t>\r\n\timplements UmbBlockGridScalableContainerContext\r\n{\r\n\t//\r\n\t#pathAddendum = new UmbRoutePathAddendumContext(this);\r\n\r\n\t#parentEntry?: typeof UMB_BLOCK_GRID_ENTRY_CONTEXT.TYPE;\r\n\r\n\t#layoutColumns = new UmbNumberState(undefined);\r\n\treadonly layoutColumns = this.#layoutColumns.asObservable();\r\n\r\n\t#areaType = new UmbObjectState<UmbBlockGridTypeAreaType | undefined>(undefined);\r\n\tareaType = this.#areaType.asObservable();\r\n\tareaTypeCreateLabel = this.#areaType.asObservablePart((x) => x?.createLabel);\r\n\r\n\t#parentUnique?: string | null;\r\n\t#areaKey?: string | null;\r\n\r\n\t#rangeLimits = new UmbObjectState<UmbNumberRangeValueType | undefined>(undefined);\r\n\treadonly rangeLimits = this.#rangeLimits.asObservable();\r\n\r\n\t#allowedBlockTypes = new UmbArrayState<UmbBlockGridTypeModel>([], (x) => x.contentElementTypeKey);\r\n\tpublic readonly allowedBlockTypes = this.#allowedBlockTypes.asObservable();\r\n\tpublic readonly amountOfAllowedBlockTypes = this.#allowedBlockTypes.asObservablePart((x) => x.length);\r\n\tpublic readonly canCreate = this.#allowedBlockTypes.asObservablePart((x) => x.length > 0);\r\n\r\n\t#hasTypeLimits = new UmbBooleanState(undefined);\r\n\tpublic readonly hasTypeLimits = this.#hasTypeLimits.asObservable();\r\n\r\n\tfirstAllowedBlockTypeName() {\r\n\t\tif (!this._manager) {\r\n\t\t\tthrow new Error('Manager not ready');\r\n\t\t}\r\n\r\n\t\tconst nameState = new UmbStringState(undefined);\r\n\t\tthis.observe(this.allowedBlockTypes, (x) => {\r\n\t\t\tif (x.length === 1) {\r\n\t\t\t\tthis.observe(\r\n\t\t\t\t\tthis._manager!.contentTypeNameOf(x[0].contentElementTypeKey),\r\n\t\t\t\t\t(name) => {\r\n\t\t\t\t\t\tnameState.setValue(name);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'getFirstAllowedBlockTypeName',\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tthis.removeUmbControllerByAlias('getFirstAllowedBlockTypeName');\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn nameState.asObservable();\r\n\t}\r\n\r\n\tsetParentUnique(contentKey: string | null) {\r\n\t\tthis.#parentUnique = contentKey;\r\n\t}\r\n\r\n\tgetParentUnique(): string | null | undefined {\r\n\t\treturn this.#parentUnique;\r\n\t}\r\n\r\n\tsetAreaKey(areaKey: string | null) {\r\n\t\tthis.#areaKey = areaKey;\r\n\t\tthis.#pathAddendum.setAddendum(areaKey ?? '');\r\n\t\tthis.#gotAreaKey();\r\n\r\n\t\t// Idea: If we need to parse down a validation data path to target the specific layout object: [NL]\r\n\t\t// If we have a areaKey, we want to inherit our layoutDataPath from nearest blockGridEntry context.\r\n\t\t// If not, we want to set the layoutDataPath to a base one.\r\n\t}\r\n\r\n\tgetAreaKey(): string | null | undefined {\r\n\t\treturn this.#areaKey;\r\n\t}\r\n\r\n\tsetLayoutColumns(columns: number | undefined) {\r\n\t\tthis.#layoutColumns.setValue(columns);\r\n\t}\r\n\tgetLayoutColumns() {\r\n\t\treturn this.#layoutColumns.getValue();\r\n\t}\r\n\r\n\tgetMinAllowed() {\r\n\t\tif (this.#areaKey) {\r\n\t\t\treturn this.#areaType.getValue()?.minAllowed ?? 0;\r\n\t\t}\r\n\t\treturn this._manager?.getMinAllowed() ?? 0;\r\n\t}\r\n\r\n\tgetMaxAllowed() {\r\n\t\tif (this.#areaKey) {\r\n\t\t\treturn this.#areaType.getValue()?.maxAllowed ?? Infinity;\r\n\t\t}\r\n\t\treturn this._manager?.getMaxAllowed() ?? Infinity;\r\n\t}\r\n\r\n\tgetLayoutContainerElement() {\r\n\t\treturn this.getHostElement().shadowRoot?.querySelector('.umb-block-grid__layout-container') as\r\n\t\t\t| HTMLElement\r\n\t\t\t| undefined;\r\n\t}\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UMB_BLOCK_GRID_MANAGER_CONTEXT);\r\n\r\n\t\tthis.consumeContext(UMB_BLOCK_GRID_ENTRY_CONTEXT, (blockGridEntry) => {\r\n\t\t\tthis.#parentEntry = blockGridEntry;\r\n\t\t\tthis.#gotBlockParentEntry(); // is not used at this point. [NL]\r\n\t\t});\r\n\r\n\t\tnew UmbModalRouteRegistrationController(this, UMB_BLOCK_CATALOGUE_MODAL)\r\n\t\t\t.addAdditionalPath('_catalogue/:view/:index')\r\n\t\t\t.onSetup(async (routingInfo) => {\r\n\t\t\t\tif (!this._manager) return false;\r\n\t\t\t\t// Idea: Maybe on setup should be async, so it can retrieve the values when needed? [NL]\r\n\t\t\t\tconst index = routingInfo.index ? parseInt(routingInfo.index) : -1;\r\n\t\t\t\tconst clipboardContext = await this.getContext(UMB_CLIPBOARD_PROPERTY_CONTEXT);\r\n\t\t\t\tconst pasteTranslatorManifests = clipboardContext.getPasteTranslatorManifests(\r\n\t\t\t\t\tUMB_BLOCK_GRID_PROPERTY_EDITOR_UI_ALIAS,\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// TODO: consider moving some of this logic to the clipboard property context\r\n\t\t\t\tconst propertyContext = await this.getContext(UMB_PROPERTY_CONTEXT);\r\n\t\t\t\tconst config = propertyContext.getConfig() as UmbBlockGridPropertyEditorConfig;\r\n\t\t\t\tconst valueResolver = new UmbClipboardPastePropertyValueTranslatorValueResolver(this);\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\tblocks: this.#allowedBlockTypes.getValue(),\r\n\t\t\t\t\t\tblockGroups: this._manager.getBlockGroups() ?? [],\r\n\t\t\t\t\t\topenClipboard: routingInfo.view === 'clipboard',\r\n\t\t\t\t\t\tclipboardFilter: async (clipboardEntryDetail) => {\r\n\t\t\t\t\t\t\tconst hasSupportedPasteTranslator = clipboardContext.hasSupportedPasteTranslator(\r\n\t\t\t\t\t\t\t\tpasteTranslatorManifests,\r\n\t\t\t\t\t\t\t\tclipboardEntryDetail.values,\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tif (!hasSupportedPasteTranslator) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tconst pasteTranslator = await valueResolver.getPasteTranslator(\r\n\t\t\t\t\t\t\t\tclipboardEntryDetail.values,\r\n\t\t\t\t\t\t\t\tUMB_BLOCK_GRID_PROPERTY_EDITOR_UI_ALIAS,\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tif (pasteTranslator.isCompatibleValue) {\r\n\t\t\t\t\t\t\t\tconst value = await valueResolver.resolve(\r\n\t\t\t\t\t\t\t\t\tclipboardEntryDetail.values,\r\n\t\t\t\t\t\t\t\t\tUMB_BLOCK_GRID_PROPERTY_EDITOR_UI_ALIAS,\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\treturn pasteTranslator.isCompatibleValue(value, config, (value) => this.#clipboardEntriesFilter(value));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\toriginData: {\r\n\t\t\t\t\t\t\tindex: index,\r\n\t\t\t\t\t\t\tareaKey: this.#areaKey,\r\n\t\t\t\t\t\t\tparentUnique: this.#parentUnique,\r\n\t\t\t\t\t\t} as UmbBlockGridWorkspaceOriginData,\r\n\t\t\t\t\t\tcreateBlockInWorkspace: this._manager.getInlineEditingMode() === false,\r\n\t\t\t\t\t},\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.onSubmit(async (value, data) => {\r\n\t\t\t\tif (value?.create && data) {\r\n\t\t\t\t\tconst created = await this.create(\r\n\t\t\t\t\t\tvalue.create.contentElementTypeKey,\r\n\t\t\t\t\t\t// We can parse an empty object, cause the rest will be filled in by others.\r\n\t\t\t\t\t\t{} as any,\r\n\t\t\t\t\t\tdata.originData as UmbBlockGridWorkspaceOriginData,\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (created) {\r\n\t\t\t\t\t\tawait this.insert(\r\n\t\t\t\t\t\t\tcreated.layout,\r\n\t\t\t\t\t\t\tcreated.content,\r\n\t\t\t\t\t\t\tcreated.settings,\r\n\t\t\t\t\t\t\tdata.originData as UmbBlockGridWorkspaceOriginData,\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error('Failed to create block');\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (value?.clipboard && value.clipboard.selection?.length && data) {\r\n\t\t\t\t\tconst clipboardContext = await this.getContext(UMB_CLIPBOARD_PROPERTY_CONTEXT);\r\n\r\n\t\t\t\t\tconst propertyValues = await clipboardContext.readMultiple<UmbBlockGridValueModel>(\r\n\t\t\t\t\t\tvalue.clipboard.selection,\r\n\t\t\t\t\t\tUMB_BLOCK_GRID_PROPERTY_EDITOR_UI_ALIAS,\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tthis._insertFromPropertyValues(propertyValues, data.originData as UmbBlockGridWorkspaceOriginData);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.observeRouteBuilder((routeBuilder) => {\r\n\t\t\t\t// TODO: Does it make any sense that this is a state? Check usage and confirm. [NL]\r\n\t\t\t\tthis._catalogueRouteBuilderState.setValue(routeBuilder);\r\n\t\t\t});\r\n\r\n\t\tnew UmbModalRouteRegistrationController(this, UMB_BLOCK_GRID_WORKSPACE_MODAL)\r\n\t\t\t.addAdditionalPath('block')\r\n\t\t\t.onSetup(() => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\tentityType: 'block',\r\n\t\t\t\t\t\tpreset: {},\r\n\t\t\t\t\t\toriginData: {\r\n\t\t\t\t\t\t\tindex: -1,\r\n\t\t\t\t\t\t\tareaKey: this.#areaKey,\r\n\t\t\t\t\t\t\tparentUnique: this.#parentUnique,\r\n\t\t\t\t\t\t\tbaseDataPath: this._dataPath,\r\n\t\t\t\t\t\t} as UmbBlockGridWorkspaceOriginData,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmodal: { size: 'medium' },\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.observeRouteBuilder((routeBuilder) => {\r\n\t\t\t\tconst newPath = routeBuilder({});\r\n\t\t\t\tthis._workspacePath.setValue(newPath);\r\n\t\t\t});\r\n\t}\r\n\r\n\tasync #clipboardEntriesFilter(propertyValue: UmbBlockGridValueModel) {\r\n\t\tconst allowedElementTypeKeys = this.#retrieveAllowedElementTypes().map((x) => x.contentElementTypeKey);\r\n\r\n\t\tconst rootContentKeys = propertyValue.layout['Umbraco.BlockGrid']?.map((block) => block.contentKey) ?? [];\r\n\t\tconst rootContentTypeKeys = propertyValue.contentData\r\n\t\t\t.filter((content) => rootContentKeys.includes(content.key))\r\n\t\t\t.map((content) => content.contentTypeKey);\r\n\r\n\t\tconst allContentTypesAllowed = rootContentTypeKeys.every((contentKey) =>\r\n\t\t\tallowedElementTypeKeys.includes(contentKey),\r\n\t\t);\r\n\r\n\t\treturn allContentTypesAllowed;\r\n\t}\r\n\r\n\tprotected _gotBlockManager() {\r\n\t\tif (!this._manager) return;\r\n\r\n\t\tthis.#setupAllowedBlockTypes();\r\n\t\tthis.#setupRangeLimits();\r\n\t}\r\n\r\n\t#gotAreaKey() {\r\n\t\tif (this.#areaKey === undefined) return;\r\n\t\tthis.#gotBlockParentEntry();\r\n\t}\r\n\r\n\tasync #gotBlockParentEntry() {\r\n\t\tif (this.#areaKey === undefined) return;\r\n\r\n\t\tif (this.#areaKey === null) {\r\n\t\t\t// Root entries:\r\n\t\t\tawait this._retrieveManager;\r\n\t\t\tif (!this._manager) return;\r\n\r\n\t\t\tthis.removeUmbControllerByAlias('observeParentUnique');\r\n\t\t\tthis.setParentUnique(null);\r\n\t\t\tthis.observe(\r\n\t\t\t\tthis._manager.layouts,\r\n\t\t\t\t(layouts) => {\r\n\t\t\t\t\tthis._layoutEntries.setValue(layouts);\r\n\t\t\t\t},\r\n\t\t\t\t'observeParentLayouts',\r\n\t\t\t);\r\n\t\t\tthis.observe(\r\n\t\t\t\tthis.layoutEntries,\r\n\t\t\t\t(layouts) => {\r\n\t\t\t\t\tthis._manager?.setLayouts(layouts);\r\n\t\t\t\t},\r\n\t\t\t\t'observeThisLayouts',\r\n\t\t\t);\r\n\r\n\t\t\tconst hostEl = this.getHostElement() as HTMLElement | undefined;\r\n\t\t\tif (hostEl) {\r\n\t\t\t\thostEl.removeAttribute('data-area-alias');\r\n\t\t\t\thostEl.removeAttribute('data-area-col-span');\r\n\t\t\t\thostEl.removeAttribute('data-area-row-span');\r\n\t\t\t\thostEl.style.removeProperty('--umb-block-grid--grid-columns');\r\n\t\t\t\thostEl.style.removeProperty('--umb-block-grid--area-column-span');\r\n\t\t\t\thostEl.style.removeProperty('--umb-block-grid--area-row-span');\r\n\t\t\t}\r\n\r\n\t\t\tthis.removeUmbControllerByAlias('observeAreaType');\r\n\t\t\tthis.#setupAllowedBlockTypes();\r\n\t\t\tthis.#setupRangeLimits();\r\n\t\t} else {\r\n\t\t\tif (!this.#parentEntry) return;\r\n\r\n\t\t\tthis.observe(\r\n\t\t\t\tthis.#parentEntry.unique,\r\n\t\t\t\t(unique) => {\r\n\t\t\t\t\tthis.setParentUnique(unique ?? null);\r\n\t\t\t\t},\r\n\t\t\t\t'observeParentUnique',\r\n\t\t\t);\r\n\t\t\tthis.observe(\r\n\t\t\t\tthis.#parentEntry.layoutsOfArea(this.#areaKey),\r\n\t\t\t\t(layouts) => {\r\n\t\t\t\t\tif (layouts) {\r\n\t\t\t\t\t\tthis._layoutEntries.setValue(layouts);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'observeParentLayouts',\r\n\t\t\t);\r\n\r\n\t\t\tthis.observe(\r\n\t\t\t\tthis.layoutEntries,\r\n\t\t\t\t(layouts) => {\r\n\t\t\t\t\tif (this.#areaKey) {\r\n\t\t\t\t\t\tthis.#parentEntry?.setLayoutsOfArea(this.#areaKey, layouts);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'observeThisLayouts',\r\n\t\t\t);\r\n\r\n\t\t\tthis.observe(\r\n\t\t\t\tthis.#parentEntry.areaType(this.#areaKey),\r\n\t\t\t\t(areaType) => {\r\n\t\t\t\t\tthis.#areaType.setValue(areaType);\r\n\t\t\t\t\tconst hostEl = this.getHostElement() as HTMLElement | undefined;\r\n\t\t\t\t\tif (!hostEl) return;\r\n\t\t\t\t\thostEl.setAttribute('data-area-alias', areaType?.alias ?? '');\r\n\t\t\t\t\thostEl.setAttribute('data-area-col-span', areaType?.columnSpan?.toString() ?? '');\r\n\t\t\t\t\thostEl.setAttribute('data-area-row-span', areaType?.rowSpan?.toString() ?? '');\r\n\t\t\t\t\thostEl.style.setProperty('--umb-block-grid--grid-columns', areaType?.columnSpan?.toString() ?? '');\r\n\t\t\t\t\thostEl.style.setProperty('--umb-block-grid--area-column-span', areaType?.columnSpan?.toString() ?? '');\r\n\t\t\t\t\thostEl.style.setProperty('--umb-block-grid--area-row-span', areaType?.rowSpan?.toString() ?? '');\r\n\t\t\t\t\tthis.#setupAllowedBlockTypes();\r\n\t\t\t\t\tthis.#setupRangeLimits();\r\n\t\t\t\t},\r\n\t\t\t\t'observeAreaType',\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t#setupAllowedBlockTypes() {\r\n\t\tif (!this._manager) return;\r\n\t\tthis.#allowedBlockTypes.setValue(this.#retrieveAllowedElementTypes());\r\n\t\tthis.#setupAllowedBlockTypesLimits();\r\n\t}\r\n\t#setupRangeLimits() {\r\n\t\tif (!this._manager) return;\r\n\t\t//const range = this.#retrieveRangeLimits();\r\n\t\tif (this.#areaKey != null) {\r\n\t\t\tconst areaType = this.#areaType.getValue();\r\n\t\t\tthis.removeUmbControllerByAlias('observeConfigurationRootLimits');\r\n\t\t\t// Area entries:\r\n\t\t\tif (!areaType) return undefined;\r\n\t\t\t// No need to observe as this method is called every time the area is changed.\r\n\t\t\tthis.#rangeLimits.setValue({\r\n\t\t\t\tmin: areaType.minAllowed ?? 0,\r\n\t\t\t\tmax: areaType.maxAllowed ?? Infinity,\r\n\t\t\t});\r\n\t\t} else if (this.#areaKey === null) {\r\n\t\t\tif (!this._manager) return undefined;\r\n\r\n\t\t\tthis.observe(\r\n\t\t\t\tthis._manager.editorConfiguration,\r\n\t\t\t\t(config) => {\r\n\t\t\t\t\tconst min = config?.getValueByAlias<UmbNumberRangeValueType>('validationLimit')?.min ?? 0;\r\n\t\t\t\t\tconst max = config?.getValueByAlias<UmbNumberRangeValueType>('validationLimit')?.max ?? Infinity;\r\n\t\t\t\t\tthis.#rangeLimits.setValue({ min, max });\r\n\t\t\t\t},\r\n\t\t\t\t'observeConfigurationRootLimits',\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tgetPathForCreateBlock(index: number) {\r\n\t\treturn this._catalogueRouteBuilderState.getValue()?.({ view: 'create', index: index });\r\n\t}\r\n\r\n\tgetPathForClipboard(index: number) {\r\n\t\treturn this._catalogueRouteBuilderState.getValue()?.({ view: 'clipboard', index: index });\r\n\t}\r\n\r\n\tisBlockTypeAllowed(contentTypeKey: string) {\r\n\t\treturn this.#allowedBlockTypes.asObservablePart((types) =>\r\n\t\t\ttypes.some((x) => x.contentElementTypeKey === contentTypeKey),\r\n\t\t);\r\n\t}\r\n\r\n\t/*\r\n\tasync setLayouts(layouts: Array<UmbBlockGridLayoutModel>) {\r\n\t\tawait this._retrieveManager;\r\n\t\tif (this.#areaKey === null) {\r\n\t\t\tthis._manager?.setLayouts(layouts);\r\n\t\t} else {\r\n\t\t\tif (!this.#parentUnique || !this.#areaKey) {\r\n\t\t\t\tthrow new Error('ParentUnique or AreaKey not set');\r\n\t\t\t}\r\n\t\t\tthis._manager?.setLayoutsOfArea(this.#parentUnique, this.#areaKey, layouts);\r\n\t\t}\r\n\t}\r\n\t*/\r\n\r\n\tasync create(\r\n\t\tcontentElementTypeKey: string,\r\n\t\tpartialLayoutEntry?: Omit<UmbBlockGridLayoutModel, 'contentKey'>,\r\n\t\toriginData?: UmbBlockGridWorkspaceOriginData,\r\n\t) {\r\n\t\tawait this._retrieveManager;\r\n\t\treturn await this._manager?.createWithPresets(contentElementTypeKey, partialLayoutEntry, originData);\r\n\t}\r\n\r\n\t// insert Block?\r\n\r\n\tasync insert(\r\n\t\tlayoutEntry: UmbBlockGridLayoutModel,\r\n\t\tcontent: UmbBlockDataModel,\r\n\t\tsettings: UmbBlockDataModel | undefined,\r\n\t\toriginData: UmbBlockGridWorkspaceOriginData,\r\n\t) {\r\n\t\tawait this._retrieveManager;\r\n\t\treturn this._manager?.insert(layoutEntry, content, settings, originData) ?? false;\r\n\t}\r\n\r\n\t// create Block?\r\n\toverride async delete(contentKey: string) {\r\n\t\t// TODO: Loop through children and delete them as well?\r\n\t\t// Find layout entry:\r\n\t\tconst layout = this._layoutEntries.getValue().find((x) => x.contentKey === contentKey);\r\n\t\tif (!layout) {\r\n\t\t\tthrow new Error(`Cannot delete block, missing layout for ${contentKey}`);\r\n\t\t}\r\n\t\t// The following loop will only delete the referenced data of sub Layout Entries, as the Layout entry is part of the main Layout Entry they will go away when that is removed. [NL]\r\n\t\tforEachBlockLayoutEntryOf(layout, async (entry) => {\r\n\t\t\tif (entry.settingsKey) {\r\n\t\t\t\tthis._manager!.removeOneSettings(entry.settingsKey);\r\n\t\t\t}\r\n\t\t\tthis._manager!.removeOneContent(contentKey);\r\n\t\t\tthis._manager!.removeExposesOf(contentKey);\r\n\t\t});\r\n\r\n\t\tawait super.delete(contentKey);\r\n\t}\r\n\r\n\tprotected async _insertFromPropertyValue(value: UmbBlockGridValueModel, originData: UmbBlockGridWorkspaceOriginData) {\r\n\t\tconst layoutEntries = value.layout[UMB_BLOCK_GRID_PROPERTY_EDITOR_SCHEMA_ALIAS];\r\n\r\n\t\tif (!layoutEntries) {\r\n\t\t\tthrow new Error('No layout entries found');\r\n\t\t}\r\n\r\n\t\tawait Promise.all(\r\n\t\t\tlayoutEntries.map(async (layoutEntry) => {\r\n\t\t\t\tawait this._insertBlockFromPropertyValue(layoutEntry, value, originData);\r\n\t\t\t\tif (originData.index !== -1) {\r\n\t\t\t\t\toriginData = { ...originData, index: originData.index + 1 };\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\treturn originData;\r\n\t}\r\n\r\n\tprotected override async _insertBlockFromPropertyValue(\r\n\t\tlayoutEntry: UmbBlockGridLayoutModel,\r\n\t\tvalue: UmbBlockGridValueModel,\r\n\t\toriginData: UmbBlockGridWorkspaceOriginData,\r\n\t) {\r\n\t\tawait super._insertBlockFromPropertyValue(layoutEntry, value, originData);\r\n\r\n\t\t// Handle inserting of the inner blocks..\r\n\t\tawait forEachBlockLayoutEntryOf(layoutEntry, async (entry, parentUnique, areaKey) => {\r\n\t\t\tconst localOriginData = { index: -1, parentUnique, areaKey };\r\n\t\t\tawait this._insertBlockFromPropertyValue(entry, value, localOriginData);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @returns {Array<UmbBlockGridTypeModel>} an Array of ElementTypeKeys that are allowed in the current area. Or undefined if not ready jet.\r\n\t */\r\n\t#retrieveAllowedElementTypes() {\r\n\t\tif (!this._manager) return [];\r\n\r\n\t\tif (this.#areaKey) {\r\n\t\t\tconst areaType = this.#areaType.getValue();\r\n\t\t\t// Area entries:\r\n\t\t\tif (!areaType) return [];\r\n\r\n\t\t\tif (areaType.specifiedAllowance && areaType.specifiedAllowance?.length > 0) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\tareaType.specifiedAllowance\r\n\t\t\t\t\t\t.flatMap((permission) => {\r\n\t\t\t\t\t\t\tif (permission.groupKey) {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\tthis._manager?.getBlockTypes().filter((blockType) => blockType.groupKey === permission.groupKey) ?? []\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t} else if (permission.elementTypeKey) {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\tthis._manager?.getBlockTypes().filter((x) => x.contentElementTypeKey === permission.elementTypeKey) ??\r\n\t\t\t\t\t\t\t\t\t[]\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn [];\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t// Remove duplicates:\r\n\t\t\t\t\t\t.filter((v, i, a) => a.findIndex((x) => x.contentElementTypeKey === v.contentElementTypeKey) === i)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// No specific permissions setup, so we will fallback to items allowed in areas:\r\n\t\t\treturn this._manager.getBlockTypes().filter((x) => x.allowInAreas);\r\n\t\t} else if (this.#areaKey === null) {\r\n\t\t\t// If AreaKey is null, then we are in the root, looking for items allowed as root:\r\n\t\t\treturn this._manager.getBlockTypes().filter((x) => x.allowAtRoot);\r\n\t\t}\r\n\r\n\t\treturn [];\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t#setupAllowedBlockTypesLimits() {\r\n\t\tif (!this._manager) return;\r\n\r\n\t\tif (this.#areaKey) {\r\n\t\t\tconst areaType = this.#areaType.getValue();\r\n\t\t\t// Area entries:\r\n\t\t\tif (!areaType) return;\r\n\r\n\t\t\tif (areaType.specifiedAllowance && areaType.specifiedAllowance?.length > 0) {\r\n\t\t\t\tthis.#hasTypeLimits.setValue(true);\r\n\t\t\t}\r\n\t\t} else if (this.#areaKey === null) {\r\n\t\t\t// RESET\r\n\t\t}\r\n\t}\r\n\r\n\t// Property to hold the result of the check, used to make a meaningful Validation Message\r\n\t#invalidBlockTypeLimits?: Array<UmbBlockGridAreaTypeInvalidRuleType>;\r\n\r\n\tgetInvalidBlockTypeLimits() {\r\n\t\treturn this.#invalidBlockTypeLimits ?? [];\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t * @returns {boolean} - True if the block type limits are valid, otherwise false.\r\n\t */\r\n\tcheckBlockTypeLimitsValidity(): boolean {\r\n\t\tconst areaType = this.#areaType.getValue();\r\n\t\tif (!areaType || !areaType.specifiedAllowance) return false;\r\n\r\n\t\tconst layoutEntries = this._layoutEntries.getValue();\r\n\r\n\t\tthis.#invalidBlockTypeLimits = areaType.specifiedAllowance\r\n\t\t\t.map((rule) => {\r\n\t\t\t\tconst minAllowed = rule.minAllowed || 0;\r\n\t\t\t\tconst maxAllowed = rule.maxAllowed || 0;\r\n\r\n\t\t\t\t// For block groups:\r\n\t\t\t\tif (rule.groupKey) {\r\n\t\t\t\t\tconst groupElementTypeKeys =\r\n\t\t\t\t\t\tthis._manager\r\n\t\t\t\t\t\t\t?.getBlockTypes()\r\n\t\t\t\t\t\t\t.filter((blockType) => blockType.groupKey === rule.groupKey && blockType.allowInAreas === true)\r\n\t\t\t\t\t\t\t.map((x) => x.contentElementTypeKey) ?? [];\r\n\t\t\t\t\tconst groupAmount = layoutEntries.filter((entry) => {\r\n\t\t\t\t\t\tconst contentTypeKey = this._manager!.getContentTypeKeyOfContentKey(entry.contentKey);\r\n\t\t\t\t\t\treturn contentTypeKey ? groupElementTypeKeys.indexOf(contentTypeKey) !== -1 : false;\r\n\t\t\t\t\t}).length;\r\n\r\n\t\t\t\t\tif (groupAmount < minAllowed || (maxAllowed > 0 && groupAmount > maxAllowed)) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tgroupKey: rule.groupKey,\r\n\t\t\t\t\t\t\tname: this._manager!.getBlockGroupName(rule.groupKey) ?? '?',\r\n\t\t\t\t\t\t\tamount: groupAmount,\r\n\t\t\t\t\t\t\tminRequirement: minAllowed,\r\n\t\t\t\t\t\t\tmaxRequirement: maxAllowed,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn undefined;\r\n\t\t\t\t}\r\n\t\t\t\t// For specific elementTypes:\r\n\t\t\t\telse if (rule.elementTypeKey) {\r\n\t\t\t\t\tconst amount = layoutEntries.filter((entry) => {\r\n\t\t\t\t\t\tconst contentTypeKey = this._manager!.getContentOf(entry.contentKey)?.contentTypeKey;\r\n\t\t\t\t\t\treturn contentTypeKey === rule.elementTypeKey;\r\n\t\t\t\t\t}).length;\r\n\t\t\t\t\tif (amount < minAllowed || (maxAllowed > 0 ? amount > maxAllowed : false)) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tkey: rule.elementTypeKey,\r\n\t\t\t\t\t\t\tname: this._manager!.getContentTypeNameOf(rule.elementTypeKey) ?? '?',\r\n\t\t\t\t\t\t\tamount: amount,\r\n\t\t\t\t\t\t\tminRequirement: minAllowed,\r\n\t\t\t\t\t\t\tmaxRequirement: maxAllowed,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn undefined;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Lets fail cause the rule was bad.\r\n\t\t\t\tconsole.error('Invalid block type limit rule.', rule);\r\n\t\t\t\treturn undefined;\r\n\t\t\t})\r\n\t\t\t.filter((x) => x !== undefined) as Array<UmbBlockGridAreaTypeInvalidRuleType>;\r\n\t\treturn this.#invalidBlockTypeLimits.length === 0;\r\n\t}\r\n\r\n\t#invalidBlockTypeConfigurations?: Array<string>;\r\n\r\n\tgetInvalidBlockTypeConfigurations() {\r\n\t\treturn this.#invalidBlockTypeConfigurations ?? [];\r\n\t}\r\n\t/**\r\n\t * @internal\r\n\t * @returns {boolean} - True if the block type limits are valid, otherwise false.\r\n\t */\r\n\tcheckBlockTypeConfigurationValidity(): boolean {\r\n\t\tthis.#invalidBlockTypeConfigurations = [];\r\n\r\n\t\tconst layoutEntries = this._layoutEntries.getValue();\r\n\t\tif (layoutEntries.length === 0) return true;\r\n\r\n\t\t// Check all layout entries if they are allowed.\r\n\t\tconst allowedBlocks = this.#allowedBlockTypes.getValue();\r\n\t\tif (allowedBlocks.length === 0) return false;\r\n\r\n\t\tconst allowedKeys = allowedBlocks.map((x) => x.contentElementTypeKey);\r\n\t\t// get content for each layout entry:\r\n\t\tconst invalidEntries = layoutEntries.filter((entry) => {\r\n\t\t\tconst contentTypeKey = this._manager!.getContentTypeKeyOfContentKey(entry.contentKey);\r\n\t\t\tif (!contentTypeKey) {\r\n\t\t\t\t// We could not find the content type key, so we cant determin if this is valid or not when the content is missing.\r\n\t\t\t\t// This should be captured elsewhere as the Block then becomes invalid. So the unsupported Block should capture this.\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tconst isBad = allowedKeys.indexOf(contentTypeKey) === -1;\r\n\t\t\tif (contentTypeKey && isBad) {\r\n\t\t\t\t// if bad, then add the ContentTypeName to the list of invalids (if we could not find the name add the key)\r\n\t\t\t\tthis.#invalidBlockTypeConfigurations?.push(\r\n\t\t\t\t\tthis._manager?.getContentTypeNameOf(contentTypeKey) ?? contentTypeKey,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn isBad;\r\n\t\t});\r\n\r\n\t\treturn invalidEntries.length === 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if given contentKey is allowed in the current area.\r\n\t * @param {string} contentKey - The contentKey of the content to check.\r\n\t * @returns {boolean} - True if the content is allowed in the current area, otherwise false.\r\n\t */\r\n\tallowDrop(contentKey: string) {\r\n\t\tconst content = this._manager?.getContentOf(contentKey);\r\n\t\tconst allowedBlocks = this.#allowedBlockTypes.getValue();\r\n\t\tif (!content || !allowedBlocks) return false;\r\n\r\n\t\treturn allowedBlocks.map((x) => x.contentElementTypeKey).indexOf(content.contentTypeKey) !== -1;\r\n\t}\r\n\r\n\tonDragStart() {\r\n\t\tthis._manager?.onDragStart();\r\n\t}\r\n\r\n\tonDragEnd() {\r\n\t\tthis._manager?.onDragEnd();\r\n\t}\r\n}\r\n","import type { UmbBlockGridEntryElement } from '../block-grid-entry/block-grid-entry.element.js';\r\nimport type { UmbBlockGridLayoutModel } from '../../types.js';\r\nimport { UmbBlockGridEntriesContext } from './block-grid-entries.context.js';\r\nimport {\r\n\tgetAccumulatedValueOfIndex,\r\n\tgetInterpolatedIndexOfPositionInWeightMap,\r\n\tisWithinRect,\r\n} from '@umbraco-cms/backoffice/utils';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { html, customElement, state, repeat, css, property, nothing } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport {\r\n\tUmbSorterController,\r\n\ttype UmbSorterConfig,\r\n\ttype UmbSorterResolvePlacementArgs,\r\n} from '@umbraco-cms/backoffice/sorter';\r\nimport {\r\n\tUmbFormControlMixin,\r\n\tUmbFormControlValidator,\r\n\ttype UmbFormControlValidatorConfig,\r\n} from '@umbraco-cms/backoffice/validation';\r\nimport type { UmbNumberRangeValueType } from '@umbraco-cms/backoffice/models';\r\n\r\n/**\r\n * Notice this utility method is not really shareable with others as it also takes areas into account. [NL]\r\n * @param args\r\n * @returns { null | true }\r\n */\r\nfunction resolvePlacementAsBlockGrid(\r\n\targs: UmbSorterResolvePlacementArgs<UmbBlockGridLayoutModel, UmbBlockGridEntryElement>,\r\n) {\r\n\t// If this has areas, we do not want to move, unless we are at the edge\r\n\tif (\r\n\t\targs.relatedModel.areas &&\r\n\t\targs.relatedModel.areas.length > 0 &&\r\n\t\tisWithinRect(args.pointerX, args.pointerY, args.relatedRect, -10)\r\n\t) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** We need some data about the grid to figure out if there is room to be placed next to the found element */\r\n\tconst approvedContainerComputedStyles = getComputedStyle(args.containerElement);\r\n\tconst gridColumnGap = Number(approvedContainerComputedStyles.columnGap.split('px')[0]) || 0;\r\n\tconst gridColumnNumber = parseInt(\r\n\t\tapprovedContainerComputedStyles.getPropertyValue('--umb-block-grid--grid-columns'),\r\n\t\t10,\r\n\t);\r\n\r\n\tconst foundElColumns = parseInt(args.relatedElement.dataset.colSpan ?? '', 10);\r\n\tconst currentElementColumns = args.item.columnSpan;\r\n\r\n\tif (currentElementColumns >= gridColumnNumber) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Get grid template:\r\n\tconst approvedContainerGridColumns = approvedContainerComputedStyles.gridTemplateColumns\r\n\t\t.trim()\r\n\t\t.split('px')\r\n\t\t.map((x) => Number(x))\r\n\t\t.filter((n) => n > 0)\r\n\t\t.map((n, i, list) => (list.length === i ? n : n + gridColumnGap));\r\n\r\n\t// ensure all columns are there.\r\n\t// This will also ensure handling non-css-grid mode,\r\n\t// use container width divided by amount of columns( or the item width divided by its amount of columnSpan)\r\n\tlet amountOfColumnsInWeightMap = approvedContainerGridColumns.length;\r\n\tconst amountOfUnknownColumns = gridColumnNumber - amountOfColumnsInWeightMap;\r\n\tif (amountOfUnknownColumns > 0) {\r\n\t\tconst accumulatedValue = getAccumulatedValueOfIndex(amountOfColumnsInWeightMap, approvedContainerGridColumns) || 0;\r\n\t\tconst missingColumnWidth = (args.containerRect.width - accumulatedValue) / amountOfUnknownColumns;\r\n\t\tif (missingColumnWidth > 0) {\r\n\t\t\twhile (amountOfColumnsInWeightMap++ < gridColumnNumber) {\r\n\t\t\t\tapprovedContainerGridColumns.push(missingColumnWidth);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tlet offsetPlacement = 0;\r\n\t/* If placeholder is in this same line, we want to assume that it will offset the placement of the found element,\r\n\twhich provides more potential space for the item to drop at.\r\n\tThis is relevant in this calculation where we look at the space to determine if its a vertical or horizontal drop in relation to the found element.\r\n\t*/\r\n\tif (args.placeholderIsInThisRow && args.elementRect.left < args.relatedRect.left) {\r\n\t\toffsetPlacement = -(args.elementRect.width + gridColumnGap);\r\n\t}\r\n\r\n\tconst relatedStartX = Math.max(args.relatedRect.left - args.containerRect.left + offsetPlacement, 0);\r\n\tconst relatedStartCol = Math.round(\r\n\t\tgetInterpolatedIndexOfPositionInWeightMap(relatedStartX, approvedContainerGridColumns),\r\n\t);\r\n\t// If the found related element does not have enough room after which for the current element, then we go vertical mode:\r\n\tconst verticalDirection = relatedStartCol + foundElColumns + currentElementColumns > gridColumnNumber;\r\n\treturn verticalDirection;\r\n\t/*\r\n\tlet placeAfter = args.horizontalPlaceAfter;\r\n\r\n\treturn {\r\n\t\tverticalDirection,\r\n\t\tplaceAfter,\r\n\t};*/\r\n}\r\n\r\n// --------------------------\r\n// End of utils.\r\n// --------------------------\r\n\r\nconst SORTER_CONFIG: UmbSorterConfig<UmbBlockGridLayoutModel, UmbBlockGridEntryElement> = {\r\n\tgetUniqueOfElement: (element) => {\r\n\t\treturn element.contentKey!;\r\n\t},\r\n\tgetUniqueOfModel: (modelEntry) => {\r\n\t\treturn modelEntry.contentKey;\r\n\t},\r\n\tresolvePlacement: resolvePlacementAsBlockGrid,\r\n\tidentifier: 'block-grid-editor',\r\n\titemSelector: 'umb-block-grid-entry',\r\n\tcontainerSelector: '.umb-block-grid__layout-container',\r\n};\r\n\r\n/**\r\n * @element umb-block-grid-entries\r\n */\r\n@customElement('umb-block-grid-entries')\r\nexport class UmbBlockGridEntriesElement extends UmbFormControlMixin(UmbLitElement) {\r\n\t//\r\n\t#sorter = new UmbSorterController<UmbBlockGridLayoutModel, UmbBlockGridEntryElement>(this, {\r\n\t\t...SORTER_CONFIG,\r\n\t\tonStart: () => {\r\n\t\t\tthis.#context.onDragStart();\r\n\t\t},\r\n\t\tonEnd: () => {\r\n\t\t\tthis.#context.onDragEnd();\r\n\t\t},\r\n\t\tonChange: ({ model }) => {\r\n\t\t\tthis.#context.setLayouts(model);\r\n\t\t},\r\n\t\tonRequestMove: ({ item }) => {\r\n\t\t\treturn this.#context.allowDrop(item.contentKey);\r\n\t\t},\r\n\t\tonDisallowed: () => {\r\n\t\t\tthis.setAttribute('disallow-drop', '');\r\n\t\t},\r\n\t\tonAllowed: () => {\r\n\t\t\tthis.removeAttribute('disallow-drop');\r\n\t\t},\r\n\t});\r\n\r\n\t#context = new UmbBlockGridEntriesContext(this);\r\n\t#controlValidator?: UmbFormControlValidator;\r\n\t#typeLimitValidator?: UmbFormControlValidatorConfig;\r\n\t#rangeUnderflowValidator?: UmbFormControlValidatorConfig;\r\n\t#rangeOverflowValidator?: UmbFormControlValidatorConfig;\r\n\r\n\t@property({ type: String, attribute: 'area-key', reflect: true })\r\n\tpublic set areaKey(value: string | null | undefined) {\r\n\t\tthis._areaKey = value;\r\n\t\tthis.#context.setAreaKey(value ?? null);\r\n\t\tthis.#controlValidator?.destroy();\r\n\t\tif (this.areaKey) {\r\n\t\t\t// Only when there is a area key we should create a validator, otherwise it is the root entries element, which is taking part of the Property Editor Form Control. [NL]\r\n\t\t\t// Currently there is no server validation for areas. So we can leave out the data path for it for now. [NL]\r\n\t\t\tthis.#controlValidator = new UmbFormControlValidator(this, this);\r\n\r\n\t\t\t//new UmbBindServerValidationToFormControl(this, this, \"$.values.[?(@.alias == 'my-input-alias')].value\");\r\n\t\t}\r\n\t}\r\n\tpublic get areaKey(): string | null | undefined {\r\n\t\treturn this._areaKey;\r\n\t}\r\n\r\n\t@property({ attribute: false })\r\n\tpublic set layoutColumns(value: number | undefined) {\r\n\t\tthis.#context.setLayoutColumns(value);\r\n\t}\r\n\tpublic get layoutColumns(): number | undefined {\r\n\t\treturn this.#context.getLayoutColumns();\r\n\t}\r\n\r\n\t@state()\r\n\tprivate _areaKey?: string | null;\r\n\r\n\t@state()\r\n\tprivate _canCreate?: boolean;\r\n\r\n\t@state()\r\n\tprivate _createLabel?: string;\r\n\r\n\t@state()\r\n\tprivate _configCreateLabel?: string;\r\n\r\n\t@state()\r\n\tprivate _styleElement?: HTMLLinkElement;\r\n\r\n\t@state()\r\n\tprivate _layoutEntries: Array<UmbBlockGridLayoutModel> = [];\r\n\r\n\t@state()\r\n\tprivate _isReadOnly: boolean = false;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.layoutEntries,\r\n\t\t\t(layoutEntries) => {\r\n\t\t\t\t//const oldValue = this._layoutEntries;\r\n\t\t\t\tthis.#sorter.setModel(layoutEntries);\r\n\t\t\t\tthis._layoutEntries = layoutEntries;\r\n\t\t\t\t//this.requestUpdate('layoutEntries', oldValue);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.amountOfAllowedBlockTypes,\r\n\t\t\t(length) => {\r\n\t\t\t\tthis._canCreate = length > 0;\r\n\t\t\t\tif (length === 1) {\r\n\t\t\t\t\tthis.observe(\r\n\t\t\t\t\t\tthis.#context.firstAllowedBlockTypeName(),\r\n\t\t\t\t\t\t(firstAllowedName) => {\r\n\t\t\t\t\t\t\tthis._createLabel = this.localize.term('blockEditor_addThis', this.localize.string(firstAllowedName));\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'observeSingleBlockTypeName',\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.removeUmbControllerByAlias('observeSingleBlockTypeName');\r\n\t\t\t\t\tthis._createLabel = this.localize.term('blockEditor_addBlock');\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.rangeLimits,\r\n\t\t\t(rangeLimits) => {\r\n\t\t\t\tthis.#setupRangeValidation(rangeLimits);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.hasTypeLimits,\r\n\t\t\t(hasTypeLimits) => {\r\n\t\t\t\tthis.#setupBlockTypeLimitValidation(hasTypeLimits);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\tthis.#context.getManager().then((manager) => {\r\n\t\t\tthis.observe(\r\n\t\t\t\tmanager.layoutStylesheet,\r\n\t\t\t\t(stylesheet) => {\r\n\t\t\t\t\tif (!stylesheet || this._styleElement?.href === stylesheet) return;\r\n\t\t\t\t\tthis._styleElement = document.createElement('link');\r\n\t\t\t\t\tthis._styleElement.rel = 'stylesheet';\r\n\t\t\t\t\tthis._styleElement.href = stylesheet;\r\n\t\t\t\t},\r\n\t\t\t\t'observeStylesheet',\r\n\t\t\t);\r\n\r\n\t\t\tthis.observe(\r\n\t\t\t\tmanager.readOnlyState.isReadOnly,\r\n\t\t\t\t(isReadOnly) => (this._isReadOnly = isReadOnly),\r\n\t\t\t\t'observeIsReadOnly',\r\n\t\t\t);\r\n\r\n\t\t\tthis.observe(\r\n\t\t\t\tmanager.variantId,\r\n\t\t\t\t(variantId) => {\r\n\t\t\t\t\tif (variantId) {\r\n\t\t\t\t\t\tthis.#sorter.identifier = 'umb-block-grid-' + variantId.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'observeVariantId',\r\n\t\t\t);\r\n\r\n\t\t\tif (this.areaKey) {\r\n\t\t\t\tthis.observe(\r\n\t\t\t\t\tthis.#context.areaTypeCreateLabel,\r\n\t\t\t\t\t(label) => (this._configCreateLabel = label),\r\n\t\t\t\t\t'observeConfigCreateLabel',\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tthis.observe(\r\n\t\t\t\t\tmanager.editorConfigurationPart((x) => x?.find((y) => y.alias === 'createLabel')?.value),\r\n\t\t\t\t\t(label) => (this._configCreateLabel = label as string | undefined),\r\n\t\t\t\t\t'observeConfigCreateLabel',\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tnew UmbFormControlValidator(this, this /*, this.#dataPath*/);\r\n\t}\r\n\r\n\tasync #setupRangeValidation(rangeLimit: UmbNumberRangeValueType | undefined) {\r\n\t\tif (this.#rangeUnderflowValidator) {\r\n\t\t\tthis.removeValidator(this.#rangeUnderflowValidator);\r\n\t\t\tthis.#rangeUnderflowValidator = undefined;\r\n\t\t}\r\n\t\tif (rangeLimit?.min !== 0) {\r\n\t\t\tthis.#rangeUnderflowValidator = this.addValidator(\r\n\t\t\t\t'rangeUnderflow',\r\n\t\t\t\t() => {\r\n\t\t\t\t\treturn this.localize.term(\r\n\t\t\t\t\t\t'validation_entriesShort',\r\n\t\t\t\t\t\trangeLimit!.min,\r\n\t\t\t\t\t\t(rangeLimit!.min ?? 0) - this._layoutEntries.length,\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t\t() => this._layoutEntries.length < (rangeLimit?.min ?? 0),\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (this.#rangeOverflowValidator) {\r\n\t\t\tthis.removeValidator(this.#rangeOverflowValidator);\r\n\t\t\tthis.#rangeOverflowValidator = undefined;\r\n\t\t}\r\n\t\tif (rangeLimit?.max !== Infinity) {\r\n\t\t\tthis.#rangeOverflowValidator = this.addValidator(\r\n\t\t\t\t'rangeOverflow',\r\n\t\t\t\t() => {\r\n\t\t\t\t\treturn this.localize.term(\r\n\t\t\t\t\t\t'validation_entriesExceed',\r\n\t\t\t\t\t\trangeLimit!.max,\r\n\t\t\t\t\t\tthis._layoutEntries.length - (rangeLimit!.max ?? this._layoutEntries.length),\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t\t() => this._layoutEntries.length > (rangeLimit?.max ?? Infinity),\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tasync #setupBlockTypeLimitValidation(hasTypeLimits: boolean | undefined) {\r\n\t\tif (this.#typeLimitValidator) {\r\n\t\t\tthis.removeValidator(this.#typeLimitValidator);\r\n\t\t\tthis.#typeLimitValidator = undefined;\r\n\t\t}\r\n\t\tif (hasTypeLimits) {\r\n\t\t\t// If we have specific block type limits, we should use those for validation (not the Block Type Configurations)\r\n\t\t\tthis.#typeLimitValidator = this.addValidator(\r\n\t\t\t\t'customError',\r\n\t\t\t\t() => {\r\n\t\t\t\t\tconst invalids = this.#context.getInvalidBlockTypeLimits();\r\n\t\t\t\t\treturn invalids\r\n\t\t\t\t\t\t.map((invalidRule) =>\r\n\t\t\t\t\t\t\tthis.localize.term(\r\n\t\t\t\t\t\t\t\tinvalidRule.amount < invalidRule.minRequirement\r\n\t\t\t\t\t\t\t\t\t? 'blockEditor_areaValidationEntriesShort'\r\n\t\t\t\t\t\t\t\t\t: 'blockEditor_areaValidationEntriesExceed',\r\n\t\t\t\t\t\t\t\tinvalidRule.name,\r\n\t\t\t\t\t\t\t\tinvalidRule.amount,\r\n\t\t\t\t\t\t\t\tinvalidRule.minRequirement,\r\n\t\t\t\t\t\t\t\tinvalidRule.maxRequirement,\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t.join(', ');\r\n\t\t\t\t},\r\n\t\t\t\t() => {\r\n\t\t\t\t\treturn !this.#context.checkBlockTypeLimitsValidity();\r\n\t\t\t\t},\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t// Limit based on Block Type Configurations (Allow in Areas / allow in root)\r\n\t\t\tthis.#typeLimitValidator = this.addValidator(\r\n\t\t\t\t'customError',\r\n\t\t\t\t() => {\r\n\t\t\t\t\tconst invalids = this.#context\r\n\t\t\t\t\t\t.getInvalidBlockTypeConfigurations()\r\n\t\t\t\t\t\t// make invalids unique:\r\n\t\t\t\t\t\t.filter((v, i, a) => a.indexOf(v) === i)\r\n\t\t\t\t\t\t// join them together to become a string:\r\n\t\t\t\t\t\t.join(', ');\r\n\t\t\t\t\treturn this.localize.term(\r\n\t\t\t\t\t\tthis._areaKey\r\n\t\t\t\t\t\t\t? 'blockEditor_areaValidationEntriesNotAllowed'\r\n\t\t\t\t\t\t\t: 'blockEditor_rootValidationEntriesNotAllowed',\r\n\t\t\t\t\t\tinvalids,\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t\t() => {\r\n\t\t\t\t\treturn !this.#context.checkBlockTypeConfigurationValidity();\r\n\t\t\t\t},\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t// TODO: Missing ability to jump directly to creating a Block, when there is only one Block Type. [NL]\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t${this._styleElement}\r\n\t\t\t<div class=\"umb-block-grid__layout-container\" data-area-length=${this._layoutEntries.length}>\r\n\t\t\t\t${repeat(\r\n\t\t\t\t\tthis._layoutEntries,\r\n\t\t\t\t\t(x) => x.contentKey,\r\n\t\t\t\t\t(layoutEntry, index) =>\r\n\t\t\t\t\t\thtml`<umb-block-grid-entry\r\n\t\t\t\t\t\t\tclass=\"umb-block-grid__layout-item\"\r\n\t\t\t\t\t\t\tindex=${index}\r\n\t\t\t\t\t\t\t.contentKey=${layoutEntry.contentKey}\r\n\t\t\t\t\t\t\t.layout=${layoutEntry}>\r\n\t\t\t\t\t\t</umb-block-grid-entry>`,\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t${this._canCreate ? this.#renderCreateButtonGroup() : nothing}\r\n\t\t\t${this._areaKey ? html` <uui-form-validation-message .for=${this}></uui-form-validation-message>` : nothing}\r\n\t\t`;\r\n\t}\r\n\r\n\t#renderCreateButtonGroup() {\r\n\t\tif (this._areaKey === null || this._layoutEntries.length === 0) {\r\n\t\t\treturn html` <uui-button-group id=\"createButton\">\r\n\t\t\t\t${this.#renderCreateButton()} ${this.#renderPasteButton()}\r\n\t\t\t</uui-button-group>`;\r\n\t\t} else if (this._isReadOnly === false) {\r\n\t\t\treturn html`<uui-button-inline-create\r\n\t\t\t\thref=${this.#context.getPathForCreateBlock(-1) ?? ''}\r\n\t\t\t\tlabel=${this.localize.term('blockEditor_addBlock')}></uui-button-inline-create> `;\r\n\t\t} else {\r\n\t\t\treturn nothing;\r\n\t\t}\r\n\t}\r\n\r\n\t#renderCreateButton() {\r\n\t\tif (this._isReadOnly && this._layoutEntries.length > 0) return nothing;\r\n\r\n\t\treturn html`\r\n\t\t\t<uui-button\r\n\t\t\t\tlook=\"placeholder\"\r\n\t\t\t\tcolor=${this.pristine === false && this.validity.valid === false ? 'invalid' : 'default'}\r\n\t\t\t\tlabel=${this._configCreateLabel ?? this._createLabel ?? ''}\r\n\t\t\t\thref=${this.#context.getPathForCreateBlock(-1) ?? ''}\r\n\t\t\t\t?disabled=${this._isReadOnly}></uui-button>\r\n\t\t`;\r\n\t}\r\n\r\n\t#renderPasteButton() {\r\n\t\tif (this._areaKey) return nothing;\r\n\t\tif (this._isReadOnly && this._layoutEntries.length > 0) return nothing;\r\n\r\n\t\treturn html`\r\n\t\t\t<uui-button\r\n\t\t\t\tlabel=${this.localize.term('content_createFromClipboard')}\r\n\t\t\t\tlook=\"placeholder\"\r\n\t\t\t\thref=${this.#context.getPathForClipboard(-1) ?? ''}\r\n\t\t\t\t?disabled=${this._isReadOnly}>\r\n\t\t\t\t<uui-icon name=\"icon-clipboard-paste\"></uui-icon>\r\n\t\t\t</uui-button>\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tposition: relative;\r\n\t\t\t\tdisplay: grid;\r\n\t\t\t\tgap: 1px;\r\n\t\t\t}\r\n\t\t\t:host([disallow-drop])::before {\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tz-index: 1;\r\n\t\t\t\tinset: 0;\r\n\t\t\t\tborder: 2px solid var(--uui-color-danger);\r\n\t\t\t\tborder-radius: calc(var(--uui-border-radius) * 2);\r\n\t\t\t\tpointer-events: none;\r\n\t\t\t}\r\n\t\t\t:host([disallow-drop])::after {\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tz-index: 1;\r\n\t\t\t\tinset: 0;\r\n\t\t\t\tborder-radius: calc(var(--uui-border-radius) * 2);\r\n\t\t\t\tbackground-color: var(--uui-color-danger);\r\n\t\t\t\topacity: 0.2;\r\n\t\t\t\tpointer-events: none;\r\n\t\t\t}\r\n\r\n\t\t\t> div {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex-direction: column;\r\n\t\t\t\talign-items: stretch;\r\n\t\t\t}\r\n\r\n\t\t\t#createButton {\r\n\t\t\t\tgrid-template-columns: 1fr auto;\r\n\t\t\t\tdisplay: grid;\r\n\t\t\t}\r\n\r\n\t\t\t/* Only when we are n an area, we like to hide the button on drag */\r\n\t\t\t:host([area-key]) #createButton {\r\n\t\t\t\t--umb-block-grid--create-button--is-dragging--variable: var(--umb-block-grid--is-dragging) none;\r\n\t\t\t\tdisplay: var(--umb-block-grid--create-button--is-dragging--variable, grid);\r\n\t\t\t}\r\n\r\n\t\t\t.umb-block-grid__layout-container[data-area-length='0'] {\r\n\t\t\t\t--umb-block-grid--layout-container--is-dragging--variable: var(--umb-block-grid--is-dragging) 1;\r\n\t\t\t\tmin-height: calc(var(--umb-block-grid--layout-container--is-dragging--variable, 0) * var(--uui-size-11));\r\n\t\t\t}\r\n\r\n\t\t\t.umb-block-grid__layout-container[data-area-length='0']::after {\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tinset: 0;\r\n\t\t\t\ttop: 1px;\r\n\t\t\t\tborder: calc(var(--umb-block-grid--layout-container--is-dragging--variable, 0) * 1px) dashed\r\n\t\t\t\t\tvar(--uui-color-border);\r\n\t\t\t\tborder-radius: var(--uui-border-radius);\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbBlockGridEntriesElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-block-grid-entries': UmbBlockGridEntriesElement;\r\n\t}\r\n}\r\n","import { closestColumnSpanOption, forEachBlockLayoutEntryOf } from '../../utils/index.js';\r\nimport type { UmbBlockGridValueModel } from '../../types.js';\r\nimport {\r\n\tUMB_BLOCK_GRID_PROPERTY_EDITOR_SCHEMA_ALIAS,\r\n\tUMB_BLOCK_GRID_PROPERTY_EDITOR_UI_ALIAS,\r\n} from '../../constants.js';\r\nimport { UMB_BLOCK_GRID_MANAGER_CONTEXT } from '../../block-grid-manager/block-grid-manager.context-token.js';\r\nimport { UMB_BLOCK_GRID_ENTRIES_CONTEXT } from '../block-grid-entries/block-grid-entries.context-token.js';\r\nimport {\r\n\ttype UmbBlockGridScalableContext,\r\n\tUmbBlockGridScaleManager,\r\n} from '../../context/block-grid-scale-manager/block-grid-scale-manager.controller.js';\r\nimport {\r\n\tUmbArrayState,\r\n\tUmbBooleanState,\r\n\tUmbNumberState,\r\n\tappendToFrozenArray,\r\n\tmergeObservables,\r\n\tobserveMultiple,\r\n} from '@umbraco-cms/backoffice/observable-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbBlockEntryContext } from '@umbraco-cms/backoffice/block';\r\nimport type { UmbBlockGridTypeModel, UmbBlockGridLayoutModel } from '@umbraco-cms/backoffice/block-grid';\r\nimport { UMB_PROPERTY_CONTEXT, UMB_PROPERTY_DATASET_CONTEXT } from '@umbraco-cms/backoffice/property';\r\nimport { UMB_CLIPBOARD_PROPERTY_CONTEXT } from '@umbraco-cms/backoffice/clipboard';\r\n\r\nexport class UmbBlockGridEntryContext\r\n\textends UmbBlockEntryContext<\r\n\t\ttypeof UMB_BLOCK_GRID_MANAGER_CONTEXT,\r\n\t\ttypeof UMB_BLOCK_GRID_MANAGER_CONTEXT.TYPE,\r\n\t\ttypeof UMB_BLOCK_GRID_ENTRIES_CONTEXT,\r\n\t\ttypeof UMB_BLOCK_GRID_ENTRIES_CONTEXT.TYPE,\r\n\t\tUmbBlockGridTypeModel,\r\n\t\tUmbBlockGridLayoutModel\r\n\t>\r\n\timplements UmbBlockGridScalableContext\r\n{\r\n\t//\r\n\treadonly columnSpan = this._layout.asObservablePart((x) => (x ? (x.columnSpan ?? null) : undefined));\r\n\treadonly rowSpan = this._layout.asObservablePart((x) => (x ? (x.rowSpan ?? null) : undefined));\r\n\treadonly layoutAreas = this._layout.asObservablePart((x) => x?.areas);\r\n\treadonly columnSpanOptions = this._blockType.asObservablePart((x) => x?.columnSpanOptions ?? []);\r\n\treadonly areaTypeGridColumns = this._blockType.asObservablePart((x) => x?.areaGridColumns);\r\n\treadonly areas = this._blockType.asObservablePart((x) => x?.areas ?? []);\r\n\treadonly minMaxRowSpan = this._blockType.asObservablePart((x) =>\r\n\t\tx ? [x.rowMinSpan ?? 1, x.rowMaxSpan ?? 1] : undefined,\r\n\t);\r\n\treadonly forceHideContentEditorInOverlay = this._blockType.asObservablePart((x) =>\r\n\t\tx ? (x.forceHideContentEditorInOverlay ?? false) : undefined,\r\n\t);\r\n\r\n\tpublic getMinMaxRowSpan(): [number, number] | undefined {\r\n\t\tconst x = this._blockType.getValue();\r\n\t\tif (!x) return undefined;\r\n\t\treturn [x.rowMinSpan ?? 1, x.rowMaxSpan ?? 1];\r\n\t}\r\n\treadonly inlineEditingMode = this._blockType.asObservablePart((x) => x?.inlineEditing === true);\r\n\r\n\t#relevantColumnSpanOptions = new UmbArrayState<number>([], (x) => x);\r\n\treadonly relevantColumnSpanOptions = this.#relevantColumnSpanOptions.asObservable();\r\n\tpublic getRelevantColumnSpanOptions() {\r\n\t\treturn this.#relevantColumnSpanOptions.getValue();\r\n\t}\r\n\r\n\t#canScale = new UmbBooleanState(false);\r\n\treadonly canScale = this.#canScale.asObservable();\r\n\r\n\t#isAllowed = new UmbBooleanState(false);\r\n\treadonly isAllowed = this.#isAllowed.asObservable();\r\n\r\n\t#areaGridColumns = new UmbNumberState(undefined);\r\n\treadonly areaGridColumns = this.#areaGridColumns.asObservable();\r\n\r\n\treadonly showContentEdit = mergeObservables(\r\n\t\t[this._contentStructureHasProperties, this.forceHideContentEditorInOverlay],\r\n\t\t([a, b]) => a === true && b === false,\r\n\t);\r\n\r\n\treadonly scaleManager = new UmbBlockGridScaleManager(this);\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UMB_BLOCK_GRID_MANAGER_CONTEXT, UMB_BLOCK_GRID_ENTRIES_CONTEXT);\r\n\t}\r\n\r\n\tlayoutsOfArea(areaKey: string) {\r\n\t\treturn this._layout.asObservablePart((x) => x?.areas?.find((x) => x.key === areaKey)?.items);\r\n\t}\r\n\r\n\tareaType(areaKey: string) {\r\n\t\treturn this._blockType.asObservablePart((x) => x?.areas?.find((x) => x.key === areaKey));\r\n\t}\r\n\r\n\tsetLayoutsOfArea(areaKey: string, layouts: UmbBlockGridLayoutModel[]) {\r\n\t\tconst frozenValue = this._layout.value;\r\n\t\tif (!frozenValue) return;\r\n\t\tconst areas = appendToFrozenArray(\r\n\t\t\tfrozenValue?.areas ?? [],\r\n\t\t\t{\r\n\t\t\t\tkey: areaKey,\r\n\t\t\t\titems: layouts,\r\n\t\t\t},\r\n\t\t\t(x) => x.key,\r\n\t\t);\r\n\t\tthis._layout.update({ areas });\r\n\t}\r\n\r\n\t/**\r\n\t * Set the column span of this entry.\r\n\t * @param columnSpan {number} The new column span.\r\n\t */\r\n\tsetColumnSpan(columnSpan: number) {\r\n\t\tif (!this._entries) return;\r\n\t\tconst layoutColumns = this._entries.getLayoutColumns();\r\n\t\tif (!layoutColumns) return;\r\n\r\n\t\tcolumnSpan = this.#calcColumnSpan(columnSpan, this.getRelevantColumnSpanOptions(), layoutColumns);\r\n\t\tif (columnSpan === this.getColumnSpan()) return;\r\n\t\tconst layoutValue = this._layout.getValue();\r\n\t\tif (!layoutValue) return;\r\n\t\tthis._layout.setValue({\r\n\t\t\t...layoutValue,\r\n\t\t\tcolumnSpan,\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * Get the column span of this entry.\r\n\t * @returns {number} The column span.\r\n\t */\r\n\tgetColumnSpan() {\r\n\t\treturn this._layout.getValue()?.columnSpan;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the row span of this entry.\r\n\t * @param rowSpan {number} The new row span.\r\n\t */\r\n\tsetRowSpan(rowSpan: number) {\r\n\t\tconst minMax = this.getMinMaxRowSpan();\r\n\t\tif (!minMax) return;\r\n\t\trowSpan = Math.max(minMax[0], Math.min(rowSpan, minMax[1]));\r\n\t\tif (rowSpan === this.getRowSpan()) return;\r\n\t\tconst layoutValue = this._layout.getValue();\r\n\t\tif (!layoutValue) return;\r\n\t\tthis._layout.setValue({\r\n\t\t\t...layoutValue,\r\n\t\t\trowSpan,\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * Get the row span of this entry.\r\n\t * @returns {number} The row span.\r\n\t */\r\n\tgetRowSpan() {\r\n\t\treturn this._layout.getValue()?.rowSpan;\r\n\t}\r\n\r\n\t_gotManager() {\r\n\t\tthis.#gotEntriesAndManager();\r\n\t}\r\n\r\n\t_gotEntries() {\r\n\t\tthis.scaleManager.setEntriesContext(this._entries);\r\n\t\tif (!this._entries) return;\r\n\r\n\t\tthis.#gotEntriesAndManager();\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.contentElementTypeKey,\r\n\t\t\t(key) => {\r\n\t\t\t\tthis.observe(\r\n\t\t\t\t\tkey ? this._entries?.isBlockTypeAllowed(key) : undefined,\r\n\t\t\t\t\t(isAllowed) => {\r\n\t\t\t\t\t\tif (isAllowed === undefined) return;\r\n\t\t\t\t\t\tthis.#isAllowed.setValue(isAllowed);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'observeIsAllowed',\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t'observeContentElementTypeKey',\r\n\t\t);\r\n\r\n\t\t// Retrieve scale options:\r\n\t\tthis.observe(\r\n\t\t\tobserveMultiple([this.minMaxRowSpan, this.columnSpanOptions, this._entries.layoutColumns]),\r\n\t\t\t([minMaxRowSpan, columnSpanOptions, layoutColumns]) => {\r\n\t\t\t\tif (!layoutColumns || !minMaxRowSpan) return;\r\n\t\t\t\tconst relevantColumnSpanOptions = columnSpanOptions\r\n\t\t\t\t\t? columnSpanOptions\r\n\t\t\t\t\t\t\t.filter((x) => x.columnSpan <= layoutColumns)\r\n\t\t\t\t\t\t\t.map((x) => x.columnSpan)\r\n\t\t\t\t\t\t\t.sort((a, b) => (a > b ? 1 : b > a ? -1 : 0))\r\n\t\t\t\t\t: [];\r\n\t\t\t\tthis.#relevantColumnSpanOptions.setValue(relevantColumnSpanOptions);\r\n\t\t\t\tconst hasRelevantColumnSpanOptions = relevantColumnSpanOptions.length > 1;\r\n\t\t\t\tconst hasRowSpanOptions = minMaxRowSpan[0] !== minMaxRowSpan[1];\r\n\t\t\t\tconst canScale = hasRelevantColumnSpanOptions || hasRowSpanOptions;\r\n\r\n\t\t\t\tthis.#canScale.setValue(canScale);\r\n\t\t\t},\r\n\t\t\t'observeScaleOptions',\r\n\t\t);\r\n\r\n\t\t// Retrieve The Grid Columns for the Areas:\r\n\t\tthis.observe(\r\n\t\t\tobserveMultiple([this.areaTypeGridColumns, this._entries.layoutColumns]),\r\n\t\t\t([areaTypeGridColumns, layoutColumns]) => {\r\n\t\t\t\tthis.#areaGridColumns.setValue(areaTypeGridColumns ?? layoutColumns);\r\n\t\t\t},\r\n\t\t\t'observeAreaGridColumns',\r\n\t\t);\r\n\t}\r\n\r\n\t#gotEntriesAndManager() {\r\n\t\tif (!this._entries || !this._manager) return;\r\n\r\n\t\t// Secure areas fits options:\r\n\t\tthis.observe(\r\n\t\t\tobserveMultiple([this.areas, this.layoutAreas]),\r\n\t\t\t([areas, layoutAreas]) => {\r\n\t\t\t\tif (!areas || !layoutAreas) return;\r\n\t\t\t\tconst areasAreIdentical =\r\n\t\t\t\t\tareas.length === layoutAreas.length && areas.every((area) => layoutAreas.some((y) => y.key === area.key));\r\n\t\t\t\tif (areasAreIdentical === false) {\r\n\t\t\t\t\tconst layoutValue = this._layout.getValue();\r\n\t\t\t\t\tif (!layoutValue) return;\r\n\t\t\t\t\tthis._layout.setValue({\r\n\t\t\t\t\t\t...layoutValue,\r\n\t\t\t\t\t\tareas: layoutAreas.map((x) => (areas.find((y) => y.key === x.key) ? x : { key: x.key, items: [] })),\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'observeAreaValidation',\r\n\t\t);\r\n\r\n\t\t// Secure columnSpan fits options:\r\n\t\tthis.observe(\r\n\t\t\tobserveMultiple([this.columnSpan, this.relevantColumnSpanOptions, this._entries.layoutColumns]),\r\n\t\t\t([columnSpan, relevantColumnSpanOptions, layoutColumns]) => {\r\n\t\t\t\tif (!layoutColumns || columnSpan === undefined) return;\r\n\t\t\t\tconst newColumnSpan = this.#calcColumnSpan(\r\n\t\t\t\t\tcolumnSpan ?? layoutColumns,\r\n\t\t\t\t\trelevantColumnSpanOptions,\r\n\t\t\t\t\tlayoutColumns,\r\n\t\t\t\t);\r\n\t\t\t\tif (newColumnSpan !== columnSpan) {\r\n\t\t\t\t\tconst layoutValue = this._layout.getValue();\r\n\t\t\t\t\tif (!layoutValue) return;\r\n\t\t\t\t\tthis._layout.setValue({\r\n\t\t\t\t\t\t...layoutValue,\r\n\t\t\t\t\t\tcolumnSpan: newColumnSpan,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'observeColumnSpanValidation',\r\n\t\t);\r\n\r\n\t\t// Secure rowSpan fits options:\r\n\t\tthis.observe(\r\n\t\t\tobserveMultiple([this.minMaxRowSpan, this.rowSpan]),\r\n\t\t\t([minMax, rowSpan]) => {\r\n\t\t\t\tif (!minMax || rowSpan === undefined) return;\r\n\t\t\t\tconst newRowSpan = Math.max(minMax[0], Math.min(rowSpan ?? 1, minMax[1]));\r\n\t\t\t\tif (newRowSpan !== rowSpan) {\r\n\t\t\t\t\tconst layoutValue = this._layout.getValue();\r\n\t\t\t\t\tif (!layoutValue) return;\r\n\t\t\t\t\tthis._layout.setValue({\r\n\t\t\t\t\t\t...layoutValue,\r\n\t\t\t\t\t\trowSpan: newRowSpan,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'observeRowSpanValidation',\r\n\t\t);\r\n\t}\r\n\r\n\t_gotContentType() {}\r\n\r\n\t#calcColumnSpan(columnSpan: number, relevantColumnSpanOptions: number[], layoutColumns: number) {\r\n\t\tif (relevantColumnSpanOptions.length > 0) {\r\n\t\t\t// Correct to a columnSpan option.\r\n\t\t\tconst newColumnSpan =\r\n\t\t\t\tclosestColumnSpanOption(columnSpan, relevantColumnSpanOptions, layoutColumns) ?? layoutColumns;\r\n\t\t\tif (newColumnSpan !== columnSpan) {\r\n\t\t\t\treturn newColumnSpan;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// Fallback to the layoutColumns.\r\n\t\t\treturn layoutColumns;\r\n\t\t}\r\n\t\treturn columnSpan;\r\n\t}\r\n\r\n\tasync copyToClipboard() {\r\n\t\tif (!this._manager) return;\r\n\r\n\t\tconst propertyDatasetContext = await this.getContext(UMB_PROPERTY_DATASET_CONTEXT);\r\n\t\tconst propertyContext = await this.getContext(UMB_PROPERTY_CONTEXT);\r\n\t\tconst clipboardContext = await this.getContext(UMB_CLIPBOARD_PROPERTY_CONTEXT);\r\n\r\n\t\tconst workspaceName = propertyDatasetContext?.getName();\r\n\t\tconst propertyLabel = propertyContext?.getLabel();\r\n\t\tconst blockLabel = this.getLabel();\r\n\r\n\t\tconst entryName = workspaceName\r\n\t\t\t? `${workspaceName} - ${propertyLabel} - ${blockLabel}`\r\n\t\t\t: `${propertyLabel} - ${blockLabel}`;\r\n\r\n\t\tconst layout = this.getLayout();\r\n\t\tif (!layout) {\r\n\t\t\tthrow new Error('No layout found');\r\n\t\t}\r\n\t\tconst content = this.getContent();\r\n\t\tconst settings = this.getSettings();\r\n\t\tconst expose = this.getExpose();\r\n\r\n\t\tconst contentData = content ? [structuredClone(content)] : [];\r\n\t\tconst settingsData = settings ? [structuredClone(settings)] : [];\r\n\t\tconst exposes = expose ? [structuredClone(expose)] : [];\r\n\r\n\t\t// Find sub Blocks and append their data:\r\n\t\tforEachBlockLayoutEntryOf(layout, async (entry) => {\r\n\t\t\tconst content = this._manager!.getContentOf(entry.contentKey);\r\n\t\t\tif (!content) {\r\n\t\t\t\tthrow new Error('No content found');\r\n\t\t\t}\r\n\t\t\tcontentData.push(structuredClone(content));\r\n\r\n\t\t\tif (entry.settingsKey) {\r\n\t\t\t\tconst settings = this._manager!.getSettingsOf(entry.settingsKey);\r\n\t\t\t\tif (settings) {\r\n\t\t\t\t\tsettingsData.push(structuredClone(settings));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst propertyValue: UmbBlockGridValueModel = {\r\n\t\t\tlayout: {\r\n\t\t\t\t[UMB_BLOCK_GRID_PROPERTY_EDITOR_SCHEMA_ALIAS]: layout ? [structuredClone(layout)] : undefined,\r\n\t\t\t},\r\n\t\t\tcontentData,\r\n\t\t\tsettingsData,\r\n\t\t\texpose: exposes,\r\n\t\t};\r\n\r\n\t\tclipboardContext.write({\r\n\t\t\ticon: this.getContentElementTypeIcon(),\r\n\t\t\tname: entryName,\r\n\t\t\tpropertyValue,\r\n\t\t\tpropertyEditorUiAlias: UMB_BLOCK_GRID_PROPERTY_EDITOR_UI_ALIAS,\r\n\t\t});\r\n\t}\r\n}\r\n","import type { UmbBlockGridLayoutModel } from '../../types.js';\r\nimport { UMB_BLOCK_GRID } from '../../constants.js';\r\nimport { UmbBlockGridEntryContext } from './block-grid-entry.context.js';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { html, css, customElement, property, state, nothing } from '@umbraco-cms/backoffice/external/lit';\r\nimport type { PropertyValueMap } from '@umbraco-cms/backoffice/external/lit';\r\nimport type { UmbPropertyEditorUiElement } from '@umbraco-cms/backoffice/property-editor';\r\nimport { stringOrStringArrayContains } from '@umbraco-cms/backoffice/utils';\r\nimport { UmbObserveValidationStateController } from '@umbraco-cms/backoffice/validation';\r\nimport { UmbDataPathBlockElementDataQuery } from '@umbraco-cms/backoffice/block';\r\nimport type {\r\n\tManifestBlockEditorCustomView,\r\n\tUmbBlockEditorCustomViewProperties,\r\n} from '@umbraco-cms/backoffice/block-custom-view';\r\nimport { UUIBlinkAnimationValue, UUIBlinkKeyframes } from '@umbraco-cms/backoffice/external/uui';\r\nimport type { UmbExtensionElementInitializer } from '@umbraco-cms/backoffice/extension-api';\r\n\r\n/**\r\n * @element umb-block-grid-entry\r\n */\r\n@customElement('umb-block-grid-entry')\r\nexport class UmbBlockGridEntryElement extends UmbLitElement implements UmbPropertyEditorUiElement {\r\n\t//\r\n\t@property({ type: Number, reflect: true })\r\n\tpublic get index(): number | undefined {\r\n\t\treturn this.#context.getIndex();\r\n\t}\r\n\tpublic set index(value: number | undefined) {\r\n\t\tthis.#context.setIndex(value);\r\n\t}\r\n\r\n\t@property({ attribute: false })\r\n\tpublic get contentKey(): string | undefined {\r\n\t\treturn this._contentKey;\r\n\t}\r\n\tpublic set contentKey(key: string | undefined) {\r\n\t\tif (!key || key === this._contentKey) return;\r\n\t\tthis._contentKey = key;\r\n\t\tthis._blockViewProps.contentKey = key;\r\n\t\tthis.setAttribute('data-element-key', key);\r\n\t\tthis.#context.setContentKey(key);\r\n\r\n\t\tnew UmbObserveValidationStateController(\r\n\t\t\tthis,\r\n\t\t\t`$.contentData[${UmbDataPathBlockElementDataQuery({ key: key })}]`,\r\n\t\t\t(hasMessages) => {\r\n\t\t\t\tthis._contentInvalid = hasMessages;\r\n\t\t\t\tthis._blockViewProps.contentInvalid = hasMessages;\r\n\t\t\t},\r\n\t\t\t'observeMessagesForContent',\r\n\t\t);\r\n\t}\r\n\tprivate _contentKey?: string | undefined;\r\n\t//\r\n\r\n\t#context = new UmbBlockGridEntryContext(this);\r\n\t#renderTimeout: number | undefined;\r\n\r\n\t@state()\r\n\t_contentTypeAlias?: string;\r\n\r\n\t@state()\r\n\t_contentTypeName?: string;\r\n\r\n\t@state()\r\n\t_columnSpan?: number;\r\n\r\n\t@state()\r\n\t_rowSpan?: number;\r\n\r\n\t@state()\r\n\t_showContentEdit = false;\r\n\t@state()\r\n\t_hasSettings = false;\r\n\r\n\t// If _createPath is undefined, its because no blocks are allowed to be created here[NL]\r\n\t@state()\r\n\t_createBeforePath?: string;\r\n\t@state()\r\n\t_createAfterPath?: string;\r\n\r\n\t@state()\r\n\t_label = '';\r\n\r\n\t@state()\r\n\t_icon?: string;\r\n\r\n\t@state()\r\n\t_exposed?: boolean;\r\n\r\n\t// Unuspported is triggerede if the Block Type is not reconized, it can also be triggerede by the Content Element Type not existing any longer. [NL]\r\n\t@state()\r\n\t_unsupported?: boolean;\r\n\r\n\t@state()\r\n\t_workspaceEditContentPath?: string;\r\n\r\n\t@state()\r\n\t_workspaceEditSettingsPath?: string;\r\n\r\n\t@state()\r\n\t_inlineEditingMode?: boolean;\r\n\r\n\t@state()\r\n\t_canScale?: boolean;\r\n\t@state()\r\n\t_showInlineCreateBefore?: boolean;\r\n\t@state()\r\n\t_showInlineCreateAfter?: boolean;\r\n\t@state()\r\n\t_inlineCreateAboveWidth?: string;\r\n\r\n\t// If the Block Type is disallowed in this location then it become a invalid Block Type. Notice not supported blocks are determined via the unsupported property. [NL]\r\n\t@property({ type: Boolean, attribute: 'location-invalid', reflect: true })\r\n\t_invalidLocation?: boolean;\r\n\r\n\t// 'content-invalid' attribute is used for styling purpose.\r\n\t@property({ type: Boolean, attribute: 'content-invalid', reflect: true })\r\n\t_contentInvalid?: boolean;\r\n\r\n\t// 'settings-invalid' attribute is used for styling purpose.\r\n\t@property({ type: Boolean, attribute: 'settings-invalid', reflect: true })\r\n\t_settingsInvalid?: boolean;\r\n\r\n\t@state()\r\n\t_blockViewProps: UmbBlockEditorCustomViewProperties<UmbBlockGridLayoutModel> = {\r\n\t\tcontentKey: undefined!,\r\n\t\tconfig: { showContentEdit: false, showSettingsEdit: false },\r\n\t}; // Set to undefined cause it will be set before we render.\r\n\r\n\t#updateBlockViewProps(incoming: Partial<UmbBlockEditorCustomViewProperties<UmbBlockGridLayoutModel>>) {\r\n\t\tthis._blockViewProps = { ...this._blockViewProps, ...incoming };\r\n\t\tthis.requestUpdate('_blockViewProps');\r\n\t}\r\n\r\n\t@state()\r\n\tprivate _isReadOnly = false;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.#init();\r\n\t}\r\n\t#init() {\r\n\t\t// Misc:\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.showContentEdit,\r\n\t\t\t(showContentEdit) => {\r\n\t\t\t\tthis._showContentEdit = showContentEdit;\r\n\t\t\t\tthis.#updateBlockViewProps({ config: { ...this._blockViewProps.config!, showContentEdit } });\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.settingsElementTypeKey,\r\n\t\t\t(key) => {\r\n\t\t\t\tthis._hasSettings = !!key;\r\n\t\t\t\tthis.#updateBlockViewProps({ config: { ...this._blockViewProps.config!, showSettingsEdit: !!key } });\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.canScale,\r\n\t\t\t(canScale) => {\r\n\t\t\t\tthis._canScale = canScale;\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.isAllowed,\r\n\t\t\t(isAllowed) => {\r\n\t\t\t\tthis._invalidLocation = !isAllowed;\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.blockType,\r\n\t\t\t(blockType) => {\r\n\t\t\t\tthis.#updateBlockViewProps({ blockType });\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\t// TODO: Implement index.\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.label,\r\n\t\t\t(label) => {\r\n\t\t\t\tthis.#updateBlockViewProps({ label });\r\n\t\t\t\tthis._label = label;\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.contentElementTypeIcon,\r\n\t\t\t(icon) => {\r\n\t\t\t\tthis.#updateBlockViewProps({ icon });\r\n\t\t\t\tthis._icon = icon;\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.hasExpose,\r\n\t\t\t(exposed) => {\r\n\t\t\t\tthis.#updateBlockViewProps({ unpublished: !exposed });\r\n\t\t\t\tthis._exposed = exposed;\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.unsupported,\r\n\t\t\t(unsupported) => {\r\n\t\t\t\tif (unsupported === undefined) return;\r\n\t\t\t\tthis.#updateBlockViewProps({ unsupported: unsupported });\r\n\t\t\t\tthis._unsupported = unsupported;\r\n\t\t\t\tthis.toggleAttribute('unsupported', unsupported);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.inlineEditingMode,\r\n\t\t\t(mode) => {\r\n\t\t\t\tthis._inlineEditingMode = mode;\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\t// Data:\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.layout,\r\n\t\t\t(layout) => {\r\n\t\t\t\tthis.#updateBlockViewProps({ layout });\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.#observeData();\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.settingsKey,\r\n\t\t\t(settingsKey) => {\r\n\t\t\t\tthis.removeUmbControllerByAlias('observeMessagesForSettings');\r\n\t\t\t\tif (settingsKey) {\r\n\t\t\t\t\t// Observe settings validation state:\r\n\t\t\t\t\tnew UmbObserveValidationStateController(\r\n\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\t`$.settingsData[${UmbDataPathBlockElementDataQuery({ key: settingsKey })}]`,\r\n\t\t\t\t\t\t(hasMessages) => {\r\n\t\t\t\t\t\t\tthis._settingsInvalid = hasMessages;\r\n\t\t\t\t\t\t\tthis._blockViewProps.settingsInvalid = hasMessages;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'observeMessagesForSettings',\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\t// Paths:\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.createBeforePath,\r\n\t\t\t(createPath) => {\r\n\t\t\t\tthis._createBeforePath = createPath;\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.createAfterPath,\r\n\t\t\t(createPath) => {\r\n\t\t\t\tthis._createAfterPath = createPath;\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.workspaceEditContentPath,\r\n\t\t\t(path) => {\r\n\t\t\t\tthis._workspaceEditContentPath = path;\r\n\t\t\t\tthis.#updateBlockViewProps({ config: { ...this._blockViewProps.config!, editContentPath: path } });\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.workspaceEditSettingsPath,\r\n\t\t\t(path) => {\r\n\t\t\t\tthis._workspaceEditSettingsPath = path;\r\n\t\t\t\tthis.#updateBlockViewProps({ config: { ...this._blockViewProps.config!, editSettingsPath: path } });\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.readOnlyState.isReadOnly,\r\n\t\t\t(isReadOnly) => (this._isReadOnly = isReadOnly),\r\n\t\t\t'umbReadonlyObserver',\r\n\t\t);\r\n\t}\r\n\r\n\tasync #observeData() {\r\n\t\tthis.observe(\r\n\t\t\tawait this.#context.contentValues(),\r\n\t\t\t(content) => {\r\n\t\t\t\tthis.#updateBlockViewProps({ content });\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tawait this.#context.settingsValues(),\r\n\t\t\t(settings) => {\r\n\t\t\t\tthis.#updateBlockViewProps({ settings });\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t}\r\n\r\n\toverride connectedCallback(): void {\r\n\t\tsuper.connectedCallback();\r\n\t\t// element styling:\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.columnSpan,\r\n\t\t\t(columnSpan) => {\r\n\t\t\t\tthis._columnSpan = columnSpan;\r\n\t\t\t\tthis.setAttribute('data-col-span', columnSpan ? columnSpan.toString() : '');\r\n\t\t\t\tthis.style.setProperty('--umb-block-grid--item-column-span', columnSpan ? columnSpan.toString() : '');\r\n\t\t\t},\r\n\t\t\t'columnSpan',\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.rowSpan,\r\n\t\t\t(rowSpan) => {\r\n\t\t\t\tthis._rowSpan = rowSpan;\r\n\t\t\t\tthis.setAttribute('data-row-span', rowSpan ? rowSpan.toString() : '');\r\n\t\t\t\tthis.style.setProperty('--umb-block-grid--item-row-span', rowSpan ? rowSpan.toString() : '');\r\n\t\t\t},\r\n\t\t\t'rowSpan',\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.contentElementTypeKey,\r\n\t\t\t(contentElementTypeKey) => {\r\n\t\t\t\tif (contentElementTypeKey) {\r\n\t\t\t\t\tthis.setAttribute('data-content-element-type-key', contentElementTypeKey);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'contentElementTypeKey',\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.contentElementTypeAlias,\r\n\t\t\t(contentElementTypeAlias) => {\r\n\t\t\t\tif (contentElementTypeAlias) {\r\n\t\t\t\t\tthis._contentTypeAlias = contentElementTypeAlias;\r\n\t\t\t\t\tthis.setAttribute('data-content-element-type-alias', contentElementTypeAlias);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'contentElementTypeAlias',\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.#context.contentElementTypeName,\r\n\t\t\t(contentElementTypeName) => {\r\n\t\t\t\tthis._contentTypeName = contentElementTypeName;\r\n\t\t\t},\r\n\t\t\t'contentElementTypeName',\r\n\t\t);\r\n\r\n\t\tthis.#callUpdateInlineCreateButtons();\r\n\t}\r\n\r\n\tprotected override updated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void {\r\n\t\tsuper.updated(_changedProperties);\r\n\t\tif (_changedProperties.has('_blockViewProps') || _changedProperties.has('_columnSpan')) {\r\n\t\t\tthis.#callUpdateInlineCreateButtons();\r\n\t\t}\r\n\t}\r\n\r\n\t#expose = () => {\r\n\t\tthis.#context.expose();\r\n\t};\r\n\r\n\t#callUpdateInlineCreateButtons() {\r\n\t\tclearTimeout(this.#renderTimeout);\r\n\t\tthis.#renderTimeout = setTimeout(this.#updateInlineCreateButtons, 100) as unknown as number;\r\n\t}\r\n\r\n\t#updateInlineCreateButtons = () => {\r\n\t\t// TODO: Could we optimize this, so it wont break?, cause currently we trust blindly that parentElement is '.umb-block-grid__layout-container' [NL]\r\n\t\tconst layoutContainer = this.parentElement;\r\n\t\tif (!layoutContainer) return;\r\n\t\tconst layoutContainerRect = layoutContainer.getBoundingClientRect();\r\n\r\n\t\tif (layoutContainerRect.width === 0) {\r\n\t\t\tthis._showInlineCreateBefore = false;\r\n\t\t\tthis._showInlineCreateAfter = false;\r\n\t\t\tthis._inlineCreateAboveWidth = undefined;\r\n\t\t\tthis.#renderTimeout = setTimeout(this.#updateInlineCreateButtons, 100) as unknown as number;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst layoutItemRect = this.getBoundingClientRect();\r\n\t\tif (layoutItemRect.right > layoutContainerRect.right - 5) {\r\n\t\t\tthis._showInlineCreateAfter = false;\r\n\t\t} else {\r\n\t\t\tthis._showInlineCreateAfter = true;\r\n\t\t}\r\n\r\n\t\tif (layoutItemRect.left > layoutContainerRect.left + 5) {\r\n\t\t\tthis._showInlineCreateBefore = false;\r\n\t\t\tthis._inlineCreateAboveWidth = undefined;\r\n\t\t} else {\r\n\t\t\tthis._inlineCreateAboveWidth = getComputedStyle(layoutContainer).width;\r\n\t\t\tthis._showInlineCreateBefore = true;\r\n\t\t}\r\n\t};\r\n\r\n\t#extensionSlotFilterMethod = (manifest: ManifestBlockEditorCustomView) => {\r\n\t\tif (!this._contentTypeAlias) {\r\n\t\t\t// accept no extensions if we don't have a content type alias\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// We do have _contentTypeAlias at this stage, cause we do use the filter method in the extension slot which first gets rendered when we have the _contentTypeAlias. [NL]\r\n\t\tif (\r\n\t\t\tmanifest.forContentTypeAlias &&\r\n\t\t\t!stringOrStringArrayContains(manifest.forContentTypeAlias, this._contentTypeAlias!)\r\n\t\t) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (manifest.forBlockEditor && !stringOrStringArrayContains(manifest.forBlockEditor, UMB_BLOCK_GRID)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t#extensionSlotRenderMethod = (ext: UmbExtensionElementInitializer<ManifestBlockEditorCustomView>) => {\r\n\t\tif (ext.component) {\r\n\t\t\text.component.classList.add('umb-block-grid__block--view');\r\n\t\t}\r\n\t\tif (this._exposed) {\r\n\t\t\treturn ext.component;\r\n\t\t} else {\r\n\t\t\treturn html`<div>\r\n\t\t\t\t${ext.component}\r\n\t\t\t\t<umb-block-overlay-expose-button\r\n\t\t\t\t\t.contentTypeName=${this._contentTypeName}\r\n\t\t\t\t\t@click=${this.#expose}></umb-block-overlay-expose-button>\r\n\t\t\t</div>`;\r\n\t\t}\r\n\t};\r\n\r\n\toverride render() {\r\n\t\treturn this.contentKey && (this._contentTypeAlias || this._unsupported)\r\n\t\t\t? html`\r\n\t\t\t\t\t${this.#renderCreateBeforeInlineButton()}\r\n\t\t\t\t\t<div class=\"umb-block-grid__block\" part=\"umb-block-grid__block\">\r\n\t\t\t\t\t\t<umb-extension-slot\r\n\t\t\t\t\t\t\t.filter=${this.#extensionSlotFilterMethod}\r\n\t\t\t\t\t\t\t.renderMethod=${this.#extensionSlotRenderMethod}\r\n\t\t\t\t\t\t\t.props=${this._blockViewProps}\r\n\t\t\t\t\t\t\tdefault-element=${this._inlineEditingMode ? 'umb-block-grid-block-inline' : 'umb-block-grid-block'}\r\n\t\t\t\t\t\t\ttype=\"blockEditorCustomView\"\r\n\t\t\t\t\t\t\tsingle\r\n\t\t\t\t\t\t\t>${this.#renderBuiltinBlockView()}</umb-extension-slot\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t${this.#renderActionBar()}\r\n\t\t\t\t\t\t${!this._showContentEdit && this._contentInvalid\r\n\t\t\t\t\t\t\t? html`<uui-badge attention color=\"invalid\" label=\"Invalid content\">!</uui-badge>`\r\n\t\t\t\t\t\t\t: nothing}\r\n\t\t\t\t\t\t${this._invalidLocation\r\n\t\t\t\t\t\t\t? html`<uui-tag id=\"invalidLocation\" color=\"danger\"\r\n\t\t\t\t\t\t\t\t\t><umb-localize key=\"blockEditor_invalidDropPosition\" .args=${[this._label]}></umb-localize\r\n\t\t\t\t\t\t\t\t></uui-tag>`\r\n\t\t\t\t\t\t\t: nothing}\r\n\t\t\t\t\t\t${this._canScale\r\n\t\t\t\t\t\t\t? html` <umb-block-scale-handler\r\n\t\t\t\t\t\t\t\t\t@mousedown=${(e: MouseEvent) => this.#context.scaleManager.onScaleMouseDown(e)}>\r\n\t\t\t\t\t\t\t\t\t${this._columnSpan}x${this._rowSpan}\r\n\t\t\t\t\t\t\t\t</umb-block-scale-handler>`\r\n\t\t\t\t\t\t\t: nothing}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t${this.#renderCreateAfterInlineButton()}\r\n\t\t\t\t`\r\n\t\t\t: nothing;\r\n\t}\r\n\r\n\t#renderBuiltinBlockView() {\r\n\t\tif (this._unsupported) {\r\n\t\t\treturn this.#renderUnsupportedBlock();\r\n\t\t}\r\n\t\tif (this._inlineEditingMode) {\r\n\t\t\treturn this.renderInlineBlock();\r\n\t\t}\r\n\t\treturn this.#renderRefBlock();\r\n\t}\r\n\r\n\t#renderUnsupportedBlock() {\r\n\t\treturn html`<umb-block-grid-block-unsupported\r\n\t\t\tclass=\"umb-block-grid__block--view\"\r\n\t\t\t.config=${this._blockViewProps.config}\r\n\t\t\t.content=${this._blockViewProps.content}\r\n\t\t\t.settings=${this._blockViewProps.settings}></umb-block-grid-block-unsupported>`;\r\n\t\t//TODO: investigate if we should have ${umbDestroyOnDisconnect()} here. Note how it works for drag n' drop in grid between areas and areas-root\r\n\t}\r\n\r\n\trenderInlineBlock() {\r\n\t\treturn html`<umb-block-grid-block-inline\r\n\t\t\tclass=\"umb-block-grid__block--view\"\r\n\t\t\t.label=${this._label}\r\n\t\t\t.icon=${this._icon}\r\n\t\t\t.unpublished=${!this._exposed}\r\n\t\t\t.config=${this._blockViewProps.config}\r\n\t\t\t.content=${this._blockViewProps.content}\r\n\t\t\t.settings=${this._blockViewProps.settings}></umb-block-grid-block-inline>`;\r\n\t\t//TODO: investigate if we should have ${umbDestroyOnDisconnect()} here. Note how it works for drag n' drop in grid between areas and areas-root\r\n\t}\r\n\r\n\t#renderRefBlock() {\r\n\t\treturn html`<umb-block-grid-block\r\n\t\t\tclass=\"umb-block-grid__block--view\"\r\n\t\t\t.label=${this._label}\r\n\t\t\t.icon=${this._icon}\r\n\t\t\t.unpublished=${!this._exposed}\r\n\t\t\t.config=${this._blockViewProps.config}\r\n\t\t\t.content=${this._blockViewProps.content}\r\n\t\t\t.settings=${this._blockViewProps.settings}></umb-block-grid-block>`;\r\n\t\t//TODO: investigate if we should have ${umbDestroyOnDisconnect()} here. Note how it works for drag n' drop in grid between areas and areas-root\r\n\t}\r\n\r\n\t#renderCreateBeforeInlineButton() {\r\n\t\tif (this._isReadOnly) return nothing;\r\n\t\tif (!this._createBeforePath) return nothing;\r\n\t\tif (!this._showInlineCreateBefore) return nothing;\r\n\r\n\t\treturn html`<uui-button-inline-create\r\n\t\t\thref=${this._createBeforePath}\r\n\t\t\tlabel=${this.localize.term('blockEditor_addBlock')}\r\n\t\t\tstyle=${this._inlineCreateAboveWidth\r\n\t\t\t\t? `width: ${this._inlineCreateAboveWidth}`\r\n\t\t\t\t: ''}></uui-button-inline-create>`;\r\n\t}\r\n\r\n\t#renderCreateAfterInlineButton() {\r\n\t\tif (this._isReadOnly) return nothing;\r\n\t\tif (!this._createAfterPath) return nothing;\r\n\t\tif (!this._showInlineCreateAfter) return nothing;\r\n\r\n\t\treturn html`\r\n\t\t\t<uui-button-inline-create\r\n\t\t\t\tvertical\r\n\t\t\t\tlabel=${this.localize.term('blockEditor_addBlock')}\r\n\t\t\t\thref=${this._createAfterPath}></uui-button-inline-create>\r\n\t\t`;\r\n\t}\r\n\r\n\t#renderActionBar() {\r\n\t\treturn html`\r\n\t\t\t<uui-action-bar>\r\n\t\t\t\t${this.#renderEditAction()} ${this.#renderEditSettingsAction()} ${this.#renderCopyToClipboardAction()}\r\n\t\t\t\t${this.#renderDeleteAction()}</uui-action-bar\r\n\t\t\t>\r\n\t\t`;\r\n\t}\r\n\r\n\t#renderEditAction() {\r\n\t\treturn this._showContentEdit && this._workspaceEditContentPath\r\n\t\t\t? html`<uui-button\r\n\t\t\t\t\tlabel=\"edit\"\r\n\t\t\t\t\tlook=\"secondary\"\r\n\t\t\t\t\tcolor=${this._contentInvalid ? 'danger' : ''}\r\n\t\t\t\t\thref=${this._workspaceEditContentPath}>\r\n\t\t\t\t\t<uui-icon name=${this._exposed === false ? 'icon-add' : 'icon-edit'}></uui-icon>\r\n\t\t\t\t\t${this._contentInvalid\r\n\t\t\t\t\t\t? html`<uui-badge attention color=\"invalid\" label=\"Invalid content\">!</uui-badge>`\r\n\t\t\t\t\t\t: nothing}\r\n\t\t\t\t</uui-button>`\r\n\t\t\t: this._showContentEdit === false && this._exposed === false\r\n\t\t\t\t? html`<uui-button\r\n\t\t\t\t\t\t@click=${this.#expose}\r\n\t\t\t\t\t\tlabel=${this.localize.term('blockEditor_createThisFor', this._contentTypeName)}\r\n\t\t\t\t\t\tlook=\"secondary\"\r\n\t\t\t\t\t\t><uui-icon name=\"icon-add\"></uui-icon\r\n\t\t\t\t\t></uui-button>`\r\n\t\t\t\t: nothing;\r\n\t}\r\n\r\n\t#renderEditSettingsAction() {\r\n\t\treturn html`\r\n\t\t\t${this._hasSettings && this._workspaceEditSettingsPath\r\n\t\t\t\t? html`<uui-button\r\n\t\t\t\t\t\tlabel=\"Edit settings\"\r\n\t\t\t\t\t\tlook=\"secondary\"\r\n\t\t\t\t\t\tcolor=${this._settingsInvalid ? 'invalid' : ''}\r\n\t\t\t\t\t\thref=${this._workspaceEditSettingsPath}>\r\n\t\t\t\t\t\t<uui-icon name=\"icon-settings\"></uui-icon>\r\n\t\t\t\t\t\t${this._settingsInvalid\r\n\t\t\t\t\t\t\t? html`<uui-badge attention color=\"invalid\" label=\"Invalid settings\">!</uui-badge>`\r\n\t\t\t\t\t\t\t: nothing}\r\n\t\t\t\t\t</uui-button>`\r\n\t\t\t\t: nothing}\r\n\t\t`;\r\n\t}\r\n\r\n\t#renderCopyToClipboardAction() {\r\n\t\treturn html`<uui-button label=\"Copy to clipboard\" look=\"secondary\" @click=${() => this.#context.copyToClipboard()}>\r\n\t\t\t<uui-icon name=\"icon-clipboard-copy\"></uui-icon>\r\n\t\t</uui-button>`;\r\n\t}\r\n\r\n\t#renderDeleteAction() {\r\n\t\tif (this._isReadOnly) return nothing;\r\n\t\treturn html`\r\n\t\t\t<uui-button label=\"delete\" look=\"secondary\" @click=${() => this.#context.requestDelete()}>\r\n\t\t\t\t<uui-icon name=\"icon-remove\"></uui-icon>\r\n\t\t\t</uui-button>\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tUUIBlinkKeyframes,\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tposition: relative;\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\t--umb-block-grid-entry-actions-opacity: 0;\r\n\t\t\t}\r\n\r\n\t\t\t:host([settings-invalid]),\r\n\t\t\t:host([content-invalid]),\r\n\t\t\t:host(:hover),\r\n\t\t\t:host(:focus-within) {\r\n\t\t\t\t--umb-block-grid-entry-actions-opacity: 1;\r\n\t\t\t}\r\n\r\n\t\t\t:host::after {\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tz-index: 1;\r\n\t\t\t\tpointer-events: none;\r\n\t\t\t\tinset: 0;\r\n\t\t\t\tborder: 1px solid transparent;\r\n\t\t\t\tborder-radius: var(--uui-border-radius);\r\n\r\n\t\t\t\ttransition: border-color 240ms ease-in;\r\n\t\t\t}\r\n\r\n\t\t\t:host([location-invalid])::after,\r\n\t\t\t:host([settings-invalid])::after,\r\n\t\t\t:host([content-invalid])::after {\r\n\t\t\t\tborder-color: var(--uui-color-invalid);\r\n\t\t\t}\r\n\r\n\t\t\t#invalidLocation {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\ttop: -1em;\r\n\t\t\t\tleft: var(--uui-size-space-2);\r\n\t\t\t\tz-index: 2;\r\n\t\t\t}\r\n\r\n\t\t\tuui-action-bar {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\ttop: var(--uui-size-2);\r\n\t\t\t\tright: var(--uui-size-2);\r\n\t\t\t\topacity: var(--umb-block-grid-entry-actions-opacity, 0);\r\n\t\t\t\ttransition: opacity 120ms;\r\n\t\t\t}\r\n\t\t\tuui-button-inline-create {\r\n\t\t\t\ttop: 0px;\r\n\t\t\t\tposition: absolute;\r\n\r\n\t\t\t\t--umb-block-grid__block--inline-create-button-display--condition: var(--umb-block-grid--dragging-mode) none;\r\n\t\t\t\tdisplay: var(--umb-block-grid__block--inline-create-button-display--condition);\r\n\t\t\t}\r\n\t\t\tuui-button-inline-create:not([vertical]) {\r\n\t\t\t\tleft: 0;\r\n\t\t\t\twidth: var(--umb-block-grid-editor--inline-create-width, 100%);\r\n\t\t\t}\r\n\t\t\t:host(:not([index='0'])) uui-button-inline-create:not([vertical]) {\r\n\t\t\t\ttop: calc(var(--umb-block-grid--row-gap, 0px) * -0.5);\r\n\t\t\t}\r\n\t\t\tuui-button-inline-create[vertical] {\r\n\t\t\t\tright: calc(1px - (var(--umb-block-grid--column-gap, 0px) * 0.5));\r\n\t\t\t}\r\n\r\n\t\t\t.umb-block-grid__block {\r\n\t\t\t\theight: 100%;\r\n\t\t\t}\r\n\r\n\t\t\t:host(:hover):not(:drop)::after {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tborder-color: var(--uui-color-interactive-emphasis);\r\n\t\t\t\tbox-shadow:\r\n\t\t\t\t\t0 0 0 1px rgba(255, 255, 255, 0.7),\r\n\t\t\t\t\tinset 0 0 0 1px rgba(255, 255, 255, 0.7);\r\n\t\t\t}\r\n\r\n\t\t\t:host([drag-placeholder])::after {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tborder-width: 2px;\r\n\t\t\t\tborder-color: var(--uui-color-interactive-emphasis);\r\n\t\t\t\tanimation: ${UUIBlinkAnimationValue};\r\n\t\t\t}\r\n\t\t\t:host([drag-placeholder])::before {\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tpointer-events: none;\r\n\t\t\t\tinset: 0;\r\n\t\t\t\tborder-radius: var(--uui-border-radius);\r\n\t\t\t\tbackground-color: var(--uui-color-interactive-emphasis);\r\n\t\t\t\topacity: 0.12;\r\n\t\t\t}\r\n\t\t\t:host([drag-placeholder]) .umb-block-grid__block {\r\n\t\t\t\ttransition: opacity 50ms 16ms;\r\n\t\t\t\topacity: 0;\r\n\t\t\t}\r\n\r\n\t\t\tuui-badge {\r\n\t\t\t\tz-index: 2;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbBlockGridEntryElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-block-grid-entry': UmbBlockGridEntryElement;\r\n\t}\r\n}\r\n","import { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { html, css, customElement } from '@umbraco-cms/backoffice/external/lit';\r\nimport type { UmbPropertyEditorUiElement } from '@umbraco-cms/backoffice/property-editor';\r\n\r\n/**\r\n * @element umb-block-scale-handler\r\n */\r\n@customElement('umb-block-scale-handler')\r\nexport class UmbBlockGridScaleHandlerElement extends UmbLitElement implements UmbPropertyEditorUiElement {\r\n\t//\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.addEventListener('dragstart', (e: DragEvent) => {\r\n\t\t\te.preventDefault();\r\n\t\t});\r\n\t\tthis.addEventListener('dragstart', (e: DragEvent) => {\r\n\t\t\te.preventDefault();\r\n\t\t});\r\n\t}\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<button aria-label=\"TODO: Some introduction to keyboard scaling\" id=\"handler\"></button>\r\n\t\t\t<slot id=\"label\"></slot>\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tinset: 0;\r\n\t\t\t\tpointer-events: none;\r\n\t\t\t\tbox-sizing: border-box;\r\n\t\t\t}\r\n\t\t\t:host(:focus-within),\r\n\t\t\t:host(:hover) {\r\n\t\t\t\tborder: var(--uui-color-interactive) solid 1px;\r\n\t\t\t\tborder-radius: var(--uui-border-radius);\r\n\t\t\t}\r\n\r\n\t\t\t#handler {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\t// TODO: Look at the feature I out-commented here, what was that suppose to do [NL]:\r\n\t\t\t\t//display: var(--umb-block-grid--block-ui-display, block);\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tz-index: 2;\r\n\r\n\t\t\t\tpointer-events: all;\r\n\t\t\t\tcursor: nwse-resize;\r\n\r\n\t\t\t\tbottom: -4px;\r\n\t\t\t\tright: -4px;\r\n\t\t\t\twidth: 7px;\r\n\t\t\t\theight: 7px;\r\n\t\t\t\tpadding: 0;\r\n\t\t\t\tbackground-color: var(--uui-color-surface);\r\n\t\t\t\tborder: var(--uui-color-interactive) solid 1px;\r\n\t\t\t\tbox-shadow: 0 0 0 1px rgba(255, 255, 255, 0.7);\r\n\t\t\t\topacity: 0;\r\n\t\t\t\ttransition: opacity 120ms;\r\n\t\t\t}\r\n\t\t\t#handler:hover,\r\n\t\t\t#handler:focus {\r\n\t\t\t\topacity: 1;\r\n\t\t\t}\r\n\t\t\t#handler:focus {\r\n\t\t\t\toutline: 2px solid var(--uui-color-selected);\r\n\t\t\t\toutline-offset: 1px;\r\n\t\t\t}\r\n\t\t\t#handler::after {\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tinset: -10px;\r\n\t\t\t\tbackground-color: rgba(0, 0, 0, 0);\r\n\t\t\t}\r\n\t\t\t#handler:focus + #label,\r\n\t\t\t#handler:hover + #label {\r\n\t\t\t\topacity: 1;\r\n\t\t\t}\r\n\r\n\t\t\t#label {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\ttop: 100%;\r\n\t\t\t\tleft: 100%;\r\n\t\t\t\tmargin-left: 6px;\r\n\t\t\t\tmargin-top: 6px;\r\n\t\t\t\tz-index: 2;\r\n\r\n\t\t\t\tbackground-color: white;\r\n\t\t\t\tcolor: black;\r\n\t\t\t\tfont-size: 12px;\r\n\t\t\t\tpadding: 0px 6px;\r\n\t\t\t\tborder-radius: 3px;\r\n\t\t\t\topacity: 0;\r\n\t\t\t\ttransition: opacity 120ms;\r\n\r\n\t\t\t\tpointer-events: none;\r\n\t\t\t\twhite-space: nowrap;\r\n\t\t\t}\r\n\r\n\t\t\t:host([scale-mode]) > #handler {\r\n\t\t\t\topacity: 1;\r\n\t\t\t}\r\n\t\t\t:host([scale-mode]) > #label {\r\n\t\t\t\topacity: 1;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbBlockGridScaleHandlerElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-block-scale-handler': UmbBlockGridScaleHandlerElement;\r\n\t}\r\n}\r\n","import { UUIRefNodeElement } from '@umbraco-cms/backoffice/external/uui';\r\nimport { css, customElement, html } from '@umbraco-cms/backoffice/external/lit';\r\n\r\n/**\r\n * @element umb-ref-grid-block\r\n */\r\n@customElement('umb-ref-grid-block')\r\nexport class UmbRefGridBlockElement extends UUIRefNodeElement {\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t${super.render()}\r\n\t\t\t<div class=\"break\"></div>\r\n\t\t\t<slot name=\"areas\"></slot>\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\t...UUIRefNodeElement.styles,\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tmin-width: 20px; /* Set to something, to overwrite UUI min width. */\r\n\t\t\t\theight: 100%; /* Help to fill out the whole layout entry. */\r\n\t\t\t\tmin-height: var(--uui-size-16);\r\n\t\t\t\tflex-flow: row wrap;\r\n\t\t\t\tbackground-color: var(--uui-color-surface);\r\n\t\t\t}\r\n\r\n\t\t\t.break {\r\n\t\t\t\tflex-basis: 100%;\r\n\t\t\t\theight: 0;\r\n\t\t\t}\r\n\r\n\t\t\t#open-part {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tmin-height: var(--uui-size-16);\r\n\t\t\t\tpadding: calc(var(--uui-size-2) + 1px);\r\n\t\t\t}\r\n\r\n\t\t\t:host([unpublished]) #open-part {\r\n\t\t\t\topacity: 0.6;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbRefGridBlockElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-ref-grid-block': UmbRefGridBlockElement;\r\n\t}\r\n}\r\n","import { UmbBlockGridManagerContext } from '../../block-grid-manager/index.js';\r\nimport { UMB_BLOCK_GRID_PROPERTY_EDITOR_SCHEMA_ALIAS } from './constants.js';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport {\r\n\thtml,\r\n\tcustomElement,\r\n\tproperty,\r\n\tstate,\r\n\tcss,\r\n\ttype PropertyValueMap,\r\n\tref,\r\n\tnothing,\r\n} from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport type {\r\n\tUmbPropertyEditorUiElement,\r\n\tUmbPropertyEditorConfigCollection,\r\n} from '@umbraco-cms/backoffice/property-editor';\r\nimport { observeMultiple } from '@umbraco-cms/backoffice/observable-api';\r\nimport { UMB_PROPERTY_CONTEXT, UMB_PROPERTY_DATASET_CONTEXT } from '@umbraco-cms/backoffice/property';\r\nimport { UmbFormControlMixin, UmbValidationContext } from '@umbraco-cms/backoffice/validation';\r\nimport type { UmbBlockTypeGroup } from '@umbraco-cms/backoffice/block-type';\r\nimport type { UmbBlockGridTypeModel, UmbBlockGridValueModel } from '@umbraco-cms/backoffice/block-grid';\r\nimport { debounceTime } from '@umbraco-cms/backoffice/external/rxjs';\r\n\r\n// TODO: consider moving the components to the property editor folder as they are only used here\r\nimport '../../local-components.js';\r\nimport { UMB_CONTENT_WORKSPACE_CONTEXT } from '@umbraco-cms/backoffice/content';\r\n\r\n/**\r\n * @element umb-property-editor-ui-block-grid\r\n */\r\n@customElement('umb-property-editor-ui-block-grid')\r\nexport class UmbPropertyEditorUIBlockGridElement\r\n\textends UmbFormControlMixin<UmbBlockGridValueModel, typeof UmbLitElement>(UmbLitElement)\r\n\timplements UmbPropertyEditorUiElement\r\n{\r\n\t#validationContext = new UmbValidationContext(this);\r\n\t#managerContext = new UmbBlockGridManagerContext(this);\r\n\t//\r\n\r\n\t#lastValue: UmbBlockGridValueModel | undefined = undefined;\r\n\r\n\tpublic set config(config: UmbPropertyEditorConfigCollection | undefined) {\r\n\t\tif (!config) return;\r\n\r\n\t\tconst blocks = config.getValueByAlias<Array<UmbBlockGridTypeModel>>('blocks') ?? [];\r\n\t\tthis.#managerContext.setBlockTypes(blocks);\r\n\r\n\t\tconst blockGroups = config.getValueByAlias<Array<UmbBlockTypeGroup>>('blockGroups') ?? [];\r\n\t\tthis.#managerContext.setBlockGroups(blockGroups);\r\n\r\n\t\tconst useInlineEditingAsDefault = config.getValueByAlias<boolean>('useInlineEditingAsDefault');\r\n\t\tthis.#managerContext.setInlineEditingMode(useInlineEditingAsDefault);\r\n\r\n\t\tthis.style.maxWidth = config.getValueByAlias<string>('maxPropertyWidth') ?? '';\r\n\r\n\t\t//config.useLiveEditing, is covered by the EditorConfiguration of context. [NL]\r\n\t\tthis.#managerContext.setEditorConfiguration(config);\r\n\t}\r\n\r\n\t@state()\r\n\tprivate _layoutColumns?: number;\r\n\r\n\t@property({ attribute: false })\r\n\tpublic override set value(value: UmbBlockGridValueModel | undefined) {\r\n\t\tthis.#lastValue = value;\r\n\r\n\t\tif (!value) {\r\n\t\t\tsuper.value = undefined;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst buildUpValue: Partial<UmbBlockGridValueModel> = value ? { ...value } : {};\r\n\t\tbuildUpValue.layout ??= {};\r\n\t\tbuildUpValue.contentData ??= [];\r\n\t\tbuildUpValue.settingsData ??= [];\r\n\t\tbuildUpValue.expose ??= [];\r\n\t\tsuper.value = buildUpValue as UmbBlockGridValueModel;\r\n\r\n\t\tthis.#managerContext.setLayouts(super.value.layout[UMB_BLOCK_GRID_PROPERTY_EDITOR_SCHEMA_ALIAS] ?? []);\r\n\t\tthis.#managerContext.setContents(super.value.contentData);\r\n\t\tthis.#managerContext.setSettings(super.value.settingsData);\r\n\t\tthis.#managerContext.setExposes(super.value.expose);\r\n\t}\r\n\tpublic override get value(): UmbBlockGridValueModel | undefined {\r\n\t\treturn super.value;\r\n\t}\r\n\r\n\t@state()\r\n\t_notSupportedVariantSetting?: boolean;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.consumeContext(UMB_CONTENT_WORKSPACE_CONTEXT, (context) => {\r\n\t\t\tthis.observe(\r\n\t\t\t\tobserveMultiple([\r\n\t\t\t\t\tthis.#managerContext.blockTypes,\r\n\t\t\t\t\tcontext.structure.variesByCulture,\r\n\t\t\t\t\tcontext.structure.variesBySegment,\r\n\t\t\t\t]),\r\n\t\t\t\tasync ([blockTypes, variesByCulture, variesBySegment]) => {\r\n\t\t\t\t\tif (blockTypes.length > 0 && (variesByCulture === false || variesBySegment === false)) {\r\n\t\t\t\t\t\t// check if any of the Blocks varyByCulture or Segment and then display a warning.\r\n\t\t\t\t\t\tconst promises = await Promise.all(\r\n\t\t\t\t\t\t\tblockTypes.map(async (blockType) => {\r\n\t\t\t\t\t\t\t\tconst elementType = blockType.contentElementTypeKey;\r\n\t\t\t\t\t\t\t\tawait this.#managerContext.contentTypesLoaded;\r\n\t\t\t\t\t\t\t\tconst structure = await this.#managerContext.getStructure(elementType);\r\n\t\t\t\t\t\t\t\tif (variesByCulture === false && structure?.getVariesByCulture() === true) {\r\n\t\t\t\t\t\t\t\t\t// If block varies by culture but document does not.\r\n\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t} else if (variesBySegment === false && structure?.getVariesBySegment() === true) {\r\n\t\t\t\t\t\t\t\t\t// If block varies by segment but document does not.\r\n\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tthis._notSupportedVariantSetting = promises.filter((x) => x === true).length > 0;\r\n\r\n\t\t\t\t\t\tif (this._notSupportedVariantSetting) {\r\n\t\t\t\t\t\t\tthis.#validationContext.messages.addMessage(\r\n\t\t\t\t\t\t\t\t'config',\r\n\t\t\t\t\t\t\t\t'$',\r\n\t\t\t\t\t\t\t\t'#blockEditor_blockVariantConfigurationNotSupported',\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t);\r\n\t\t}).passContextAliasMatches();\r\n\r\n\t\tthis.consumeContext(UMB_PROPERTY_CONTEXT, (context) => {\r\n\t\t\tthis.observe(\r\n\t\t\t\tcontext.dataPath,\r\n\t\t\t\t(dataPath) => {\r\n\t\t\t\t\tif (dataPath) {\r\n\t\t\t\t\t\t// Set the data path for the local validation context:\r\n\t\t\t\t\t\tthis.#validationContext.setDataPath(dataPath);\r\n\t\t\t\t\t\tthis.#validationContext.autoReport();\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'observeDataPath',\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\t// TODO: Prevent initial notification from these observes\r\n\t\tthis.consumeContext(UMB_PROPERTY_CONTEXT, (propertyContext) => {\r\n\t\t\tthis.observe(\r\n\t\t\t\tobserveMultiple([\r\n\t\t\t\t\tthis.#managerContext.layouts,\r\n\t\t\t\t\tthis.#managerContext.contents,\r\n\t\t\t\t\tthis.#managerContext.settings,\r\n\t\t\t\t\tthis.#managerContext.exposes,\r\n\t\t\t\t]).pipe(debounceTime(20)),\r\n\t\t\t\t([layouts, contents, settings, exposes]) => {\r\n\t\t\t\t\tif (layouts.length === 0) {\r\n\t\t\t\t\t\tsuper.value = undefined;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsuper.value = {\r\n\t\t\t\t\t\t\t...super.value,\r\n\t\t\t\t\t\t\tlayout: { [UMB_BLOCK_GRID_PROPERTY_EDITOR_SCHEMA_ALIAS]: layouts },\r\n\t\t\t\t\t\t\tcontentData: contents,\r\n\t\t\t\t\t\t\tsettingsData: settings,\r\n\t\t\t\t\t\t\texpose: exposes,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// If we don't have a value set from the outside or an internal value, we don't want to set the value.\r\n\t\t\t\t\t// This is added to prevent the block grid from setting an empty value on startup.\r\n\t\t\t\t\tif (this.#lastValue === undefined && super.value === undefined) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpropertyContext.setValue(super.value);\r\n\t\t\t\t},\r\n\t\t\t\t'motherObserver',\r\n\t\t\t);\r\n\r\n\t\t\tthis.observe(\r\n\t\t\t\tpropertyContext?.alias,\r\n\t\t\t\t(alias) => {\r\n\t\t\t\t\tthis.#managerContext.setPropertyAlias(alias);\r\n\t\t\t\t},\r\n\t\t\t\t'observePropertyAlias',\r\n\t\t\t);\r\n\r\n\t\t\t// If the current property is readonly all inner block content should also be readonly.\r\n\t\t\tthis.observe(\r\n\t\t\t\tobserveMultiple([propertyContext.isReadOnly, propertyContext.variantId]),\r\n\t\t\t\t([isReadOnly, variantId]) => {\r\n\t\t\t\t\tconst unique = 'UMB_PROPERTY_EDITOR_UI';\r\n\t\t\t\t\tif (variantId === undefined) return;\r\n\r\n\t\t\t\t\tif (isReadOnly) {\r\n\t\t\t\t\t\tconst state = {\r\n\t\t\t\t\t\t\tunique,\r\n\t\t\t\t\t\t\tvariantId,\r\n\t\t\t\t\t\t\tmessage: '',\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tthis.#managerContext.readOnlyState.addState(state);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.#managerContext.readOnlyState.removeState(unique);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'observeIsReadOnly',\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.consumeContext(UMB_PROPERTY_DATASET_CONTEXT, (context) => {\r\n\t\t\tthis.#managerContext.setVariantId(context.getVariantId());\r\n\t\t});\r\n\t}\r\n\r\n\tprotected override firstUpdated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void {\r\n\t\tsuper.firstUpdated(_changedProperties);\r\n\r\n\t\tthis.observe(this.#managerContext.gridColumns, (gridColumns) => {\r\n\t\t\tif (gridColumns) {\r\n\t\t\t\tthis._layoutColumns = gridColumns;\r\n\t\t\t\tthis.style.setProperty('--umb-block-grid--grid-columns', gridColumns.toString());\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t#currentEntriesElement?: Element;\r\n\t#gotRootEntriesElement(element: Element | undefined): void {\r\n\t\tif (this.#currentEntriesElement === element) return;\r\n\t\tif (this.#currentEntriesElement) {\r\n\t\t\tthis.removeFormControlElement(this.#currentEntriesElement as any);\r\n\t\t}\r\n\t\tthis.#currentEntriesElement = element;\r\n\t\tif (element) {\r\n\t\t\tthis.addFormControlElement(element as any);\r\n\t\t}\r\n\t}\r\n\r\n\toverride render() {\r\n\t\tif (this._notSupportedVariantSetting) {\r\n\t\t\treturn nothing;\r\n\t\t}\r\n\t\treturn html` <umb-block-grid-entries\r\n\t\t\t${ref(this.#gotRootEntriesElement)}\r\n\t\t\t.areaKey=${null}\r\n\t\t\t.layoutColumns=${this._layoutColumns}></umb-block-grid-entries>`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: grid;\r\n\t\t\t\tgap: 1px;\r\n\t\t\t}\r\n\t\t\t> div {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex-direction: column;\r\n\t\t\t\talign-items: stretch;\r\n\t\t\t}\r\n\r\n\t\t\tuui-button-group {\r\n\t\t\t\tpadding-top: 1px;\r\n\t\t\t\tdisplay: grid;\r\n\t\t\t\tgrid-template-columns: 1fr auto;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbPropertyEditorUIBlockGridElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-property-editor-ui-block-grid': UmbPropertyEditorUIBlockGridElement;\r\n\t}\r\n}\r\n"],"names":["UmbBlockGridManagerContext","UmbBlockManagerContext","host","#inlineEditingMode","UmbBooleanState","#blockGroups","UmbArrayState","x","layoutStylesheet","UMB_BLOCK_GRID_DEFAULT_LAYOUT_STYLESHEET","transformServerPathToClientPath","#serverUrl","value","#initAppUrl","UMB_APP_CONTEXT","appContext","inlineEditingMode","configs","blockGroups","unique","group","contentElementTypeKey","partialLayoutEntry","_originData","originData","#appendLayoutEntryToArea","insert","entries","parentId","areaKey","index","i","currentEntry","areas","pushAtToUniqueArray","appendToFrozenArray","y","correctedAreaItems","area","z","layoutEntry","content","settings","layoutEntries","UmbBlockGridAreasContainerElement","UmbLitElement","UMB_BLOCK_GRID_ENTRY_CONTEXT","context","areaGridColumns","UMB_BLOCK_GRID_MANAGER_CONTEXT","manager","stylesheet","html","repeat","css","__decorateClass","state","customElement","_blockContext","_workspaceContext","_variantId","_contentKey","_parentUnique","_areaKey","_UmbBlockGridBlockInlineElement_instances","load_fn","generatePropertyDataPath_fn","_expose","renderBlockInfo_fn","renderInside_fn","apiArgsCreator","manifest","UmbBlockGridBlockInlineElement","__privateAdd","__privateGet","blockContext","__privateSet","contentKey","__privateMethod","UMB_BLOCK_GRID_ENTRIES_CONTEXT","entriesContext","UmbExtensionApiInitializer","umbExtensionsRegistry","UMB_BLOCK_WORKSPACE_ALIAS","permitted","ctrl","contentTypeProperties","name","variantId","culture","languageRepository","UmbLanguageItemRepository","data","UmbExtensionsApiInitializer","property","UmbDataPathPropertyValueQuery","nothing","UmbTextStyles","_UmbBlockGridBlockUnsupportedElement_instances","UmbBlockGridBlockUnsupportedElement","UmbBlockGridBlockElement","UmbBlockGridEntriesContext","UmbBlockEntriesContext","#pathAddendum","UmbRoutePathAddendumContext","#layoutColumns","UmbNumberState","#areaType","UmbObjectState","#rangeLimits","#allowedBlockTypes","#hasTypeLimits","blockGridEntry","#parentEntry","#gotBlockParentEntry","UmbModalRouteRegistrationController","UMB_BLOCK_CATALOGUE_MODAL","routingInfo","clipboardContext","UMB_CLIPBOARD_PROPERTY_CONTEXT","pasteTranslatorManifests","UMB_BLOCK_GRID_PROPERTY_EDITOR_UI_ALIAS","config","UMB_PROPERTY_CONTEXT","valueResolver","UmbClipboardPastePropertyValueTranslatorValueResolver","clipboardEntryDetail","pasteTranslator","#clipboardEntriesFilter","#areaKey","#parentUnique","created","propertyValues","routeBuilder","UMB_BLOCK_GRID_WORKSPACE_MODAL","newPath","nameState","UmbStringState","#gotAreaKey","columns","propertyValue","allowedElementTypeKeys","#retrieveAllowedElementTypes","rootContentKeys","block","#setupAllowedBlockTypes","#setupRangeLimits","layouts","hostEl","areaType","#setupAllowedBlockTypesLimits","min","max","contentTypeKey","types","layout","forEachBlockLayoutEntryOf","entry","UMB_BLOCK_GRID_PROPERTY_EDITOR_SCHEMA_ALIAS","parentUnique","localOriginData","permission","blockType","v","a","#invalidBlockTypeLimits","rule","minAllowed","maxAllowed","groupElementTypeKeys","groupAmount","amount","#invalidBlockTypeConfigurations","allowedBlocks","allowedKeys","isBad","_sorter","_context","_controlValidator","_typeLimitValidator","_rangeUnderflowValidator","_rangeOverflowValidator","_UmbBlockGridEntriesElement_instances","setupRangeValidation_fn","setupBlockTypeLimitValidation_fn","renderCreateButtonGroup_fn","renderCreateButton_fn","renderPasteButton_fn","resolvePlacementAsBlockGrid","args","isWithinRect","approvedContainerComputedStyles","gridColumnGap","gridColumnNumber","foundElColumns","currentElementColumns","approvedContainerGridColumns","n","list","amountOfColumnsInWeightMap","amountOfUnknownColumns","accumulatedValue","getAccumulatedValueOfIndex","missingColumnWidth","offsetPlacement","relatedStartX","getInterpolatedIndexOfPositionInWeightMap","SORTER_CONFIG","element","modelEntry","UmbBlockGridEntriesElement","UmbFormControlMixin","UmbSorterController","model","item","length","firstAllowedName","rangeLimits","hasTypeLimits","isReadOnly","label","UmbFormControlValidator","rangeLimit","invalidRule","invalids","UmbBlockGridEntryContext","UmbBlockEntryContext","#relevantColumnSpanOptions","#canScale","#isAllowed","#areaGridColumns","mergeObservables","b","UmbBlockGridScaleManager","frozenValue","columnSpan","layoutColumns","#calcColumnSpan","layoutValue","rowSpan","minMax","#gotEntriesAndManager","key","isAllowed","observeMultiple","minMaxRowSpan","columnSpanOptions","relevantColumnSpanOptions","hasRelevantColumnSpanOptions","hasRowSpanOptions","canScale","areaTypeGridColumns","layoutAreas","newColumnSpan","newRowSpan","closestColumnSpanOption","propertyDatasetContext","UMB_PROPERTY_DATASET_CONTEXT","propertyContext","workspaceName","propertyLabel","blockLabel","entryName","expose","contentData","settingsData","exposes","_renderTimeout","_UmbBlockGridEntryElement_instances","updateBlockViewProps_fn","init_fn","observeData_fn","callUpdateInlineCreateButtons_fn","_updateInlineCreateButtons","_extensionSlotFilterMethod","_extensionSlotRenderMethod","renderBuiltinBlockView_fn","renderUnsupportedBlock_fn","renderRefBlock_fn","renderCreateBeforeInlineButton_fn","renderCreateAfterInlineButton_fn","renderActionBar_fn","renderEditAction_fn","renderEditSettingsAction_fn","renderCopyToClipboardAction_fn","renderDeleteAction_fn","UmbBlockGridEntryElement","layoutContainer","layoutContainerRect","layoutItemRect","stringOrStringArrayContains","UMB_BLOCK_GRID","ext","UmbObserveValidationStateController","UmbDataPathBlockElementDataQuery","hasMessages","contentElementTypeAlias","contentElementTypeName","_changedProperties","e","incoming","showContentEdit","icon","exposed","unsupported","mode","settingsKey","createPath","path","UUIBlinkKeyframes","UUIBlinkAnimationValue","UmbBlockGridScaleHandlerElement","UmbRefGridBlockElement","UUIRefNodeElement","_validationContext","_managerContext","_lastValue","_currentEntriesElement","_UmbPropertyEditorUIBlockGridElement_instances","gotRootEntriesElement_fn","UmbPropertyEditorUIBlockGridElement","UmbValidationContext","UMB_CONTENT_WORKSPACE_CONTEXT","blockTypes","variesByCulture","variesBySegment","promises","elementType","structure","dataPath","debounceTime","contents","alias","blocks","useInlineEditingAsDefault","buildUpValue","gridColumns","ref","UmbPropertyEditorUIBlockGridElement$1"],"mappings":"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"}