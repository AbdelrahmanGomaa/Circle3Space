{"version":3,"file":"default-tree.context-D0xONizl.js","sources":["../../../src/packages/core/tree/expansion-manager/tree-expansion-manager.ts","../../../src/packages/core/tree/default/default-tree.context.ts"],"sourcesContent":["import type { UmbTreeExpansionModel } from './types.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbEntityModel } from '@umbraco-cms/backoffice/entity';\r\nimport { UmbArrayState, type Observable } from '@umbraco-cms/backoffice/observable-api';\r\n\r\n/**\r\n * Manages the expansion state of a tree\r\n * @exports\r\n * @class UmbTreeExpansionManager\r\n * @augments {UmbControllerBase}\r\n */\r\nexport class UmbTreeExpansionManager extends UmbControllerBase {\r\n\t#expansion = new UmbArrayState<UmbEntityModel>([], (x) => x.unique);\r\n\texpansion = this.#expansion.asObservable();\r\n\r\n\t/**\r\n\t * Checks if an entity is expanded\r\n\t * @param {UmbEntityModel} entity The entity to check\r\n\t * @param {string} entity.entityType The entity type\r\n\t * @param {string} entity.unique The unique key\r\n\t * @returns {Observable<boolean>} True if the entity is expanded\r\n\t * @memberof UmbTreeExpansionManager\r\n\t */\r\n\tisExpanded(entity: UmbEntityModel): Observable<boolean> {\r\n\t\treturn this.#expansion.asObservablePart((entries) =>\r\n\t\t\tentries?.some((entry) => entry.entityType === entity.entityType && entry.unique === entity.unique),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the expansion state\r\n\t * @param {UmbTreeExpansionModel | undefined} expansion The expansion state\r\n\t * @memberof UmbTreeExpansionManager\r\n\t * @returns {void}\r\n\t */\r\n\tsetExpansion(expansion: UmbTreeExpansionModel): void {\r\n\t\tthis.#expansion.setValue(expansion);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the expansion state\r\n\t * @memberof UmbTreeExpansionManager\r\n\t * @returns {UmbTreeExpansionModel} The expansion state\r\n\t */\r\n\tgetExpansion(): UmbTreeExpansionModel {\r\n\t\treturn this.#expansion.getValue();\r\n\t}\r\n\r\n\t/**\r\n\t * Opens a child tree item\r\n\t * @param {UmbEntityModel} entity The entity to open\r\n\t * @param {string} entity.entityType The entity type\r\n\t * @param {string} entity.unique The unique key\r\n\t * @memberof UmbTreeExpansionManager\r\n\t * @returns {Promise<void>}\r\n\t */\r\n\tpublic async expandItem(entity: UmbEntityModel): Promise<void> {\r\n\t\tthis.#expansion.appendOne(entity);\r\n\t}\r\n\r\n\t/**\r\n\t * Closes a child tree item\r\n\t * @param {UmbEntityModel} entity The entity to close\r\n\t * @param {string} entity.entityType The entity type\r\n\t * @param {string} entity.unique The unique key\r\n\t * @memberof UmbTreeExpansionManager\r\n\t * @returns {Promise<void>}\r\n\t */\r\n\tpublic async collapseItem(entity: UmbEntityModel): Promise<void> {\r\n\t\tthis.#expansion.filter((x) => x.entityType !== entity.entityType || x.unique !== entity.unique);\r\n\t}\r\n\r\n\t/**\r\n\t * Closes all child tree items\r\n\t * @memberof UmbTreeExpansionManager\r\n\t * @returns {Promise<void>}\r\n\t */\r\n\tpublic async collapseAll(): Promise<void> {\r\n\t\tthis.#expansion.setValue([]);\r\n\t}\r\n}\r\n","import type { UmbTreeItemModel, UmbTreeRootModel, UmbTreeStartNode } from '../types.js';\r\nimport type { UmbTreeRepository } from '../data/tree-repository.interface.js';\r\nimport type { UmbTreeContext } from '../tree-context.interface.js';\r\nimport type { UmbTreeRootItemsRequestArgs } from '../data/types.js';\r\nimport type { ManifestTree } from '../extensions/types.js';\r\nimport { UmbTreeExpansionManager } from '../expansion-manager/index.js';\r\nimport type { UmbTreeExpansionModel } from '../expansion-manager/types.js';\r\nimport { UMB_TREE_CONTEXT } from './default-tree.context-token.js';\r\nimport { type UmbActionEventContext, UMB_ACTION_EVENT_CONTEXT } from '@umbraco-cms/backoffice/action';\r\nimport { type ManifestRepository, umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbExtensionApiInitializer } from '@umbraco-cms/backoffice/extension-api';\r\nimport { UmbPaginationManager, UmbSelectionManager, debounce } from '@umbraco-cms/backoffice/utils';\r\nimport {\r\n\tUmbRequestReloadChildrenOfEntityEvent,\r\n\ttype UmbEntityActionEvent,\r\n} from '@umbraco-cms/backoffice/entity-action';\r\nimport { UmbArrayState, UmbBooleanState, UmbObjectState } from '@umbraco-cms/backoffice/observable-api';\r\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event';\r\n\r\nexport class UmbDefaultTreeContext<\r\n\t\tTreeItemType extends UmbTreeItemModel,\r\n\t\tTreeRootType extends UmbTreeRootModel,\r\n\t\tRequestArgsType extends UmbTreeRootItemsRequestArgs = UmbTreeRootItemsRequestArgs,\r\n\t>\r\n\textends UmbContextBase<UmbDefaultTreeContext<TreeItemType, TreeRootType, RequestArgsType>>\r\n\timplements UmbTreeContext\r\n{\r\n\t#additionalRequestArgs = new UmbObjectState<Partial<RequestArgsType> | object>({});\r\n\tpublic readonly additionalRequestArgs = this.#additionalRequestArgs.asObservable();\r\n\r\n\t#treeRoot = new UmbObjectState<TreeRootType | undefined>(undefined);\r\n\ttreeRoot = this.#treeRoot.asObservable();\r\n\r\n\t#rootItems = new UmbArrayState<TreeItemType>([], (x) => x.unique);\r\n\trootItems = this.#rootItems.asObservable();\r\n\r\n\tpublic selectableFilter?: (item: TreeItemType) => boolean = () => true;\r\n\tpublic filter?: (item: TreeItemType) => boolean = () => true;\r\n\tpublic readonly selection = new UmbSelectionManager(this._host);\r\n\tpublic readonly pagination = new UmbPaginationManager();\r\n\tpublic readonly expansion = new UmbTreeExpansionManager(this._host);\r\n\r\n\t#hideTreeRoot = new UmbBooleanState(false);\r\n\thideTreeRoot = this.#hideTreeRoot.asObservable();\r\n\r\n\t#expandTreeRoot = new UmbBooleanState(undefined);\r\n\texpandTreeRoot = this.#expandTreeRoot.asObservable();\r\n\r\n\t#startNode = new UmbObjectState<UmbTreeStartNode | undefined>(undefined);\r\n\tstartNode = this.#startNode.asObservable();\r\n\r\n\t#foldersOnly = new UmbBooleanState(false);\r\n\tfoldersOnly = this.#foldersOnly.asObservable();\r\n\r\n\t#manifest?: ManifestTree;\r\n\t#repository?: UmbTreeRepository<TreeItemType, TreeRootType>;\r\n\t#actionEventContext?: UmbActionEventContext;\r\n\r\n\t#paging = {\r\n\t\tskip: 0,\r\n\t\ttake: 50,\r\n\t};\r\n\r\n\t#initResolver?: () => void;\r\n\t#initialized = false;\r\n\r\n\t#init = new Promise<void>((resolve) => {\r\n\t\tif (this.#initialized) {\r\n\t\t\tresolve();\r\n\t\t} else {\r\n\t\t\tthis.#initResolver = resolve;\r\n\t\t}\r\n\t});\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t// @ts-ignore\r\n\t\tsuper(host, UMB_TREE_CONTEXT);\r\n\t\tthis.pagination.setPageSize(this.#paging.take);\r\n\t\tthis.#consumeContexts();\r\n\r\n\t\t// listen for page changes on the pagination manager\r\n\t\tthis.pagination.addEventListener(UmbChangeEvent.TYPE, this.#onPageChange);\r\n\r\n\t\t// always load the tree root because we need the root entity to reload the entire tree\r\n\t\tthis.#loadTreeRoot();\r\n\t}\r\n\r\n\t// TODO: find a generic way to do this\r\n\t#checkIfInitialized() {\r\n\t\tif (this.#repository) {\r\n\t\t\tthis.#initialized = true;\r\n\t\t\tthis.#initResolver?.();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the manifest\r\n\t * @param {ManifestTree} manifest\r\n\t * @memberof UmbDefaultTreeContext\r\n\t */\r\n\tpublic set manifest(manifest: ManifestTree | undefined) {\r\n\t\tif (this.#manifest === manifest) return;\r\n\t\tthis.#manifest = manifest;\r\n\t\tthis.#observeRepository(this.#manifest?.meta.repositoryAlias);\r\n\t}\r\n\tpublic get manifest() {\r\n\t\treturn this.#manifest;\r\n\t}\r\n\r\n\t// TODO: getManifest, could be refactored to use the getter method [NL]\r\n\t/**\r\n\t * Returns the manifest.\r\n\t * @returns {ManifestTree}\r\n\t * @memberof UmbDefaultTreeContext\r\n\t */\r\n\tpublic getManifest() {\r\n\t\treturn this.#manifest;\r\n\t}\r\n\r\n\tpublic getRepository() {\r\n\t\treturn this.#repository;\r\n\t}\r\n\r\n\t/**\r\n\t * Loads the tree\r\n\t * @memberof UmbDefaultTreeContext\r\n\t */\r\n\t// TODO: debouncing the load tree method because multiple props can be set at the same time\r\n\t// that would trigger multiple loadTree calls. This is a temporary solution to avoid that.\r\n\tpublic loadTree = debounce(() => this.#debouncedLoadTree(), 100);\r\n\r\n\t/**\r\n\t * Reloads the tree\r\n\t * @memberof UmbDefaultTreeContext\r\n\t * @returns {void}\r\n\t */\r\n\tpublic loadMore = () => this.#debouncedLoadTree(true);\r\n\r\n\t#debouncedLoadTree(reload = false) {\r\n\t\tif (this.getStartNode()) {\r\n\t\t\tthis.#loadRootItems(reload);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst hideTreeRoot = this.getHideTreeRoot();\r\n\t\tif (hideTreeRoot) {\r\n\t\t\tthis.#loadRootItems(reload);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.#loadTreeRoot();\r\n\t}\r\n\r\n\tasync #loadTreeRoot() {\r\n\t\tawait this.#init;\r\n\r\n\t\tconst { data } = await this.#repository!.requestTreeRoot();\r\n\r\n\t\tif (data) {\r\n\t\t\tthis.#treeRoot.setValue(data);\r\n\t\t\tthis.pagination.setTotalItems(1);\r\n\r\n\t\t\tif (this.getExpandTreeRoot()) {\r\n\t\t\t\tthis.#toggleTreeRootExpansion(true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync #loadRootItems(loadMore = false) {\r\n\t\tawait this.#init;\r\n\r\n\t\tconst skip = loadMore ? this.#paging.skip : 0;\r\n\t\tconst take = loadMore ? this.#paging.take : this.pagination.getCurrentPageNumber() * this.#paging.take;\r\n\r\n\t\t// If we have a start node get children of that instead of the root\r\n\t\tconst startNode = this.getStartNode();\r\n\t\tconst foldersOnly = this.#foldersOnly.getValue();\r\n\t\tconst additionalArgs = this.#additionalRequestArgs.getValue();\r\n\r\n\t\tconst { data } = startNode?.unique\r\n\t\t\t? await this.#repository!.requestTreeItemsOf({\r\n\t\t\t\t\t...additionalArgs,\r\n\t\t\t\t\tparent: {\r\n\t\t\t\t\t\tunique: startNode.unique,\r\n\t\t\t\t\t\tentityType: startNode.entityType,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfoldersOnly,\r\n\t\t\t\t\tskip,\r\n\t\t\t\t\ttake,\r\n\t\t\t\t})\r\n\t\t\t: await this.#repository!.requestTreeRootItems({\r\n\t\t\t\t\t...additionalArgs,\r\n\t\t\t\t\tfoldersOnly,\r\n\t\t\t\t\tskip,\r\n\t\t\t\t\ttake,\r\n\t\t\t\t});\r\n\r\n\t\tif (data) {\r\n\t\t\tif (loadMore) {\r\n\t\t\t\tconst currentItems = this.#rootItems.getValue();\r\n\t\t\t\tthis.#rootItems.setValue([...currentItems, ...data.items]);\r\n\t\t\t} else {\r\n\t\t\t\tthis.#rootItems.setValue(data.items);\r\n\t\t\t}\r\n\r\n\t\t\tthis.pagination.setTotalItems(data.total);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the hideTreeRoot config\r\n\t * @param {boolean} hideTreeRoot - Whether to hide the tree root\r\n\t * @memberof UmbDefaultTreeContext\r\n\t */\r\n\tsetHideTreeRoot(hideTreeRoot: boolean) {\r\n\t\tthis.#hideTreeRoot.setValue(hideTreeRoot);\r\n\t\t// we need to reset the tree if this config changes\r\n\t\tthis.#resetTree();\r\n\t\tthis.loadTree();\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the hideTreeRoot config\r\n\t * @returns {boolean}\r\n\t * @memberof UmbDefaultTreeContext\r\n\t */\r\n\tgetHideTreeRoot() {\r\n\t\treturn this.#hideTreeRoot.getValue();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the startNode config\r\n\t * @param {UmbTreeStartNode} startNode\r\n\t * @memberof UmbDefaultTreeContext\r\n\t */\r\n\tsetStartNode(startNode: UmbTreeStartNode | undefined) {\r\n\t\tthis.#startNode.setValue(startNode);\r\n\t\t// we need to reset the tree if this config changes\r\n\t\tthis.#resetTree();\r\n\t\tthis.loadTree();\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the startNode config\r\n\t * @returns {UmbTreeStartNode} - The start node\r\n\t * @memberof UmbDefaultTreeContext\r\n\t */\r\n\tgetStartNode() {\r\n\t\treturn this.#startNode.getValue();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the foldersOnly config\r\n\t * @param {boolean} foldersOnly - Whether to show only folders\r\n\t * @memberof UmbDefaultTreeContext\r\n\t */\r\n\tsetFoldersOnly(foldersOnly: boolean) {\r\n\t\tthis.#foldersOnly.setValue(foldersOnly);\r\n\t\t// we need to reset the tree if this config changes\r\n\t\tthis.#resetTree();\r\n\t\tthis.loadTree();\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the foldersOnly config\r\n\t * @returns {boolean} - Whether to show only folders\r\n\t * @memberof UmbDefaultTreeContext\r\n\t */\r\n\tgetFoldersOnly() {\r\n\t\treturn this.#foldersOnly.getValue();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the requestArgs config and reloads the tree.\r\n\t * @param args\r\n\t */\r\n\tpublic updateAdditionalRequestArgs(args: Partial<RequestArgsType>) {\r\n\t\tthis.#additionalRequestArgs.setValue({ ...this.#additionalRequestArgs.getValue(), ...args });\r\n\t\tthis.#resetTree();\r\n\t\tthis.loadTree();\r\n\t}\r\n\r\n\tpublic getAdditionalRequestArgs() {\r\n\t\treturn this.#additionalRequestArgs.getValue();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the expansion state\r\n\t * @param {UmbTreeExpansionModel} data - The expansion state\r\n\t * @returns {void}\r\n\t * @memberof UmbDefaultTreeContext\r\n\t */\r\n\tsetExpansion(data: UmbTreeExpansionModel): void {\r\n\t\tthis.expansion.setExpansion(data);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the expansion state\r\n\t * @returns {UmbTreeExpansionModel} - The expansion state\r\n\t * @memberof UmbDefaultTreeContext\r\n\t */\r\n\tgetExpansion(): UmbTreeExpansionModel {\r\n\t\treturn this.expansion.getExpansion();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the expandTreeRoot config\r\n\t * @param {boolean} expandTreeRoot - Whether to expand the tree root\r\n\t * @memberof UmbDefaultTreeContext\r\n\t */\r\n\tsetExpandTreeRoot(expandTreeRoot: boolean) {\r\n\t\tthis.#expandTreeRoot.setValue(expandTreeRoot);\r\n\t\tthis.#toggleTreeRootExpansion(expandTreeRoot);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the expandTreeRoot config\r\n\t * @returns {boolean | undefined} - Whether to expand the tree root\r\n\t * @memberof UmbDefaultTreeContext\r\n\t */\r\n\tgetExpandTreeRoot(): boolean | undefined {\r\n\t\treturn this.#expandTreeRoot.getValue();\r\n\t}\r\n\r\n\t#toggleTreeRootExpansion(expand: boolean) {\r\n\t\tconst treeRoot = this.#treeRoot.getValue();\r\n\t\tif (!treeRoot) return;\r\n\t\tconst treeRootEntity = { entityType: treeRoot.entityType, unique: treeRoot.unique };\r\n\r\n\t\tif (expand) {\r\n\t\t\tthis.expansion.expandItem(treeRootEntity);\r\n\t\t} else {\r\n\t\t\tthis.expansion.collapseItem(treeRootEntity);\r\n\t\t}\r\n\t}\r\n\r\n\t#resetTree() {\r\n\t\tthis.#treeRoot.setValue(undefined);\r\n\t\tthis.#rootItems.setValue([]);\r\n\t\tthis.pagination.clear();\r\n\t}\r\n\r\n\t#consumeContexts() {\r\n\t\tthis.consumeContext(UMB_ACTION_EVENT_CONTEXT, (instance) => {\r\n\t\t\tthis.#removeEventListeners();\r\n\t\t\tthis.#actionEventContext = instance;\r\n\r\n\t\t\tthis.#actionEventContext?.addEventListener(\r\n\t\t\t\tUmbRequestReloadChildrenOfEntityEvent.TYPE,\r\n\t\t\t\tthis.#onReloadRequest as EventListener,\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t#onPageChange = (event: UmbChangeEvent) => {\r\n\t\tconst target = event.target as UmbPaginationManager;\r\n\t\tthis.#paging.skip = target.getSkip();\r\n\t\tthis.loadMore();\r\n\t};\r\n\r\n\t#observeRepository(repositoryAlias?: string) {\r\n\t\tif (!repositoryAlias) throw new Error('Tree must have a repository alias.');\r\n\r\n\t\tnew UmbExtensionApiInitializer<ManifestRepository<UmbTreeRepository<TreeItemType>>>(\r\n\t\t\tthis,\r\n\t\t\tumbExtensionsRegistry,\r\n\t\t\trepositoryAlias,\r\n\t\t\t[this._host],\r\n\t\t\t(permitted, ctrl) => {\r\n\t\t\t\tthis.#repository = permitted ? ctrl.api : undefined;\r\n\t\t\t\tthis.#checkIfInitialized();\r\n\t\t\t},\r\n\t\t);\r\n\t}\r\n\r\n\t#onReloadRequest = (event: UmbEntityActionEvent) => {\r\n\t\t// Only handle root request here. Items are handled by the tree item context\r\n\t\tconst treeRoot = this.#treeRoot.getValue();\r\n\t\tif (treeRoot === undefined) return;\r\n\t\tif (event.getUnique() !== treeRoot.unique) return;\r\n\t\tif (event.getEntityType() !== treeRoot.entityType) return;\r\n\t\tthis.loadTree();\r\n\t};\r\n\r\n\t#removeEventListeners() {\r\n\t\tthis.#actionEventContext?.removeEventListener(\r\n\t\t\tUmbRequestReloadChildrenOfEntityEvent.TYPE,\r\n\t\t\tthis.#onReloadRequest as EventListener,\r\n\t\t);\r\n\t}\r\n\r\n\toverride destroy(): void {\r\n\t\tthis.#removeEventListeners();\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n\r\nexport { UmbDefaultTreeContext as api };\r\n"],"names":["UmbTreeExpansionManager","UmbControllerBase","#expansion","UmbArrayState","x","entity","entries","entry","expansion","UmbDefaultTreeContext","UmbContextBase","host","UMB_TREE_CONTEXT","#additionalRequestArgs","UmbObjectState","#treeRoot","#rootItems","UmbSelectionManager","UmbPaginationManager","#hideTreeRoot","UmbBooleanState","#expandTreeRoot","#startNode","#foldersOnly","#paging","#initialized","#init","resolve","#initResolver","debounce","#debouncedLoadTree","#onPageChange","event","target","#onReloadRequest","treeRoot","#consumeContexts","UmbChangeEvent","#loadTreeRoot","#manifest","#repository","#actionEventContext","#checkIfInitialized","manifest","#observeRepository","reload","#loadRootItems","data","#toggleTreeRootExpansion","loadMore","skip","take","startNode","foldersOnly","additionalArgs","currentItems","hideTreeRoot","#resetTree","args","expandTreeRoot","expand","treeRootEntity","UMB_ACTION_EVENT_CONTEXT","instance","#removeEventListeners","UmbRequestReloadChildrenOfEntityEvent","repositoryAlias","UmbExtensionApiInitializer","umbExtensionsRegistry","permitted","ctrl"],"mappings":"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"}