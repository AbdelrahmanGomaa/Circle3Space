{"version":3,"file":"media-item.store.context-token-9YLCPlu1.js","sources":["../../../src/packages/media/media/entity.ts","../../../src/packages/media/media/repository/detail/media-detail.server.data-source.ts","../../../src/packages/media/media/repository/detail/media-detail.store.context-token.ts","../../../src/packages/media/media/repository/detail/media-detail.repository.ts","../../../src/packages/media/media/repository/item/media-item.store.context-token.ts"],"sourcesContent":["export const UMB_MEDIA_ENTITY_TYPE = 'media';\r\nexport const UMB_MEDIA_ROOT_ENTITY_TYPE = 'media-root';\r\nexport const UMB_MEDIA_PLACEHOLDER_ENTITY_TYPE = 'umb-media-placeholder';\r\n\r\nexport type UmbMediaEntityType = typeof UMB_MEDIA_ENTITY_TYPE;\r\nexport type UmbMediaRootEntityType = typeof UMB_MEDIA_ROOT_ENTITY_TYPE;\r\n\r\nexport type UmbMediaPlaceholderEntityType = typeof UMB_MEDIA_PLACEHOLDER_ENTITY_TYPE;\r\n\r\nexport type UmbMediaEntityTypeUnion = UmbMediaEntityType | UmbMediaRootEntityType;\r\n","import type { UmbMediaDetailModel } from '../../types.js';\r\nimport { UMB_MEDIA_ENTITY_TYPE } from '../../entity.js';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport type { UmbDetailDataSource } from '@umbraco-cms/backoffice/repository';\r\nimport type { CreateMediaRequestModel, UpdateMediaRequestModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { MediaService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecuteAndNotify } from '@umbraco-cms/backoffice/resources';\r\n\r\n/**\r\n * A data source for the Media that fetches data from the server\r\n * @class UmbMediaServerDataSource\r\n * @implements {RepositoryDetailDataSource}\r\n */\r\nexport class UmbMediaServerDataSource implements UmbDetailDataSource<UmbMediaDetailModel> {\r\n\t#host: UmbControllerHost;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbMediaServerDataSource.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbMediaServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Media scaffold\r\n\t * @param {Partial<UmbMediaDetailModel>} [preset]\r\n\t * @returns { UmbMediaDetailModel }\r\n\t * @memberof UmbMediaServerDataSource\r\n\t */\r\n\tasync createScaffold(preset: Partial<UmbMediaDetailModel> = {}) {\r\n\t\tconst data: UmbMediaDetailModel = {\r\n\t\t\tentityType: UMB_MEDIA_ENTITY_TYPE,\r\n\t\t\tunique: UmbId.new(),\r\n\t\t\turls: [],\r\n\t\t\tmediaType: {\r\n\t\t\t\tunique: '',\r\n\t\t\t\tcollection: null,\r\n\t\t\t\ticon: null,\r\n\t\t\t},\r\n\t\t\tisTrashed: false,\r\n\t\t\tvalues: [],\r\n\t\t\tvariants: [\r\n\t\t\t\t{\r\n\t\t\t\t\tculture: null,\r\n\t\t\t\t\tsegment: null,\r\n\t\t\t\t\tname: '',\r\n\t\t\t\t\tcreateDate: null,\r\n\t\t\t\t\tupdateDate: null,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t\t...preset,\r\n\t\t};\r\n\r\n\t\treturn { data };\r\n\t}\r\n\r\n\t/**\r\n\t * Fetches a Media with the given id from the server\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbMediaServerDataSource\r\n\t */\r\n\tasync read(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tconst { data, error } = await tryExecuteAndNotify(this.#host, MediaService.getMediaById({ id: unique }));\r\n\r\n\t\tif (error || !data) {\r\n\t\t\treturn { error };\r\n\t\t}\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst media: UmbMediaDetailModel = {\r\n\t\t\tentityType: UMB_MEDIA_ENTITY_TYPE,\r\n\t\t\tunique: data.id,\r\n\t\t\tvalues: data.values as UmbMediaDetailModel['values'],\r\n\t\t\tvariants: data.variants.map((variant) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstate: null,\r\n\t\t\t\t\tculture: variant.culture || null,\r\n\t\t\t\t\tsegment: variant.segment || null,\r\n\t\t\t\t\tname: variant.name,\r\n\t\t\t\t\tcreateDate: variant.createDate,\r\n\t\t\t\t\tupdateDate: variant.updateDate,\r\n\t\t\t\t};\r\n\t\t\t}),\r\n\t\t\turls: data.urls as UmbMediaDetailModel['urls'],\r\n\t\t\tmediaType: {\r\n\t\t\t\tunique: data.mediaType.id,\r\n\t\t\t\tcollection: data.mediaType.collection ? { unique: data.mediaType.collection.id } : null,\r\n\t\t\t\ticon: data.mediaType.icon,\r\n\t\t\t},\r\n\t\t\tisTrashed: data.isTrashed,\r\n\t\t};\r\n\r\n\t\treturn { data: media };\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts a new Media on the server\r\n\t * @param {UmbMediaDetailModel} model\r\n\t * @param parentUnique\r\n\t * @returns {*}\r\n\t * @memberof UmbMediaServerDataSource\r\n\t */\r\n\tasync create(model: UmbMediaDetailModel, parentUnique: string | null = null) {\r\n\t\tif (!model) throw new Error('Media is missing');\r\n\t\tif (!model.unique) throw new Error('Media unique is missing');\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst requestBody: CreateMediaRequestModel = {\r\n\t\t\tid: model.unique,\r\n\t\t\tparent: parentUnique ? { id: parentUnique } : null,\r\n\t\t\tmediaType: { id: model.mediaType.unique },\r\n\t\t\tvalues: model.values,\r\n\t\t\tvariants: model.variants.map((variant) => ({\r\n\t\t\t\tculture: variant.culture || null,\r\n\t\t\t\tsegment: variant.segment || null,\r\n\t\t\t\tname: variant.name,\r\n\t\t\t})),\r\n\t\t};\r\n\r\n\t\tconst { data, error } = await tryExecuteAndNotify(\r\n\t\t\tthis.#host,\r\n\t\t\tMediaService.postMedia({\r\n\t\t\t\trequestBody,\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (data) {\r\n\t\t\treturn this.read(data);\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a Media on the server\r\n\t * @param {UmbMediaDetailModel} Media\r\n\t * @param model\r\n\t * @returns {*}\r\n\t * @memberof UmbMediaServerDataSource\r\n\t */\r\n\tasync update(model: UmbMediaDetailModel) {\r\n\t\tif (!model.unique) throw new Error('Unique is missing');\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst requestBody: UpdateMediaRequestModel = {\r\n\t\t\tvalues: model.values,\r\n\t\t\tvariants: model.variants,\r\n\t\t};\r\n\r\n\t\tconst { error } = await tryExecuteAndNotify(\r\n\t\t\tthis.#host,\r\n\t\t\tMediaService.putMediaById({\r\n\t\t\t\tid: model.unique,\r\n\t\t\t\trequestBody,\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (!error) {\r\n\t\t\treturn this.read(model.unique);\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes a Media on the server\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbMediaServerDataSource\r\n\t */\r\n\tasync delete(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\treturn tryExecuteAndNotify(this.#host, MediaService.deleteMediaById({ id: unique }));\r\n\t}\r\n}\r\n","import type UmbMediaDetailStore from './media-detail.store.js';\r\nimport { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\n\r\nexport const UMB_MEDIA_DETAIL_STORE_CONTEXT = new UmbContextToken<UmbMediaDetailStore>('UmbMediaDetailStore');\r\n","import type { UmbMediaDetailModel } from '../../types.js';\r\nimport { UmbMediaServerDataSource } from './media-detail.server.data-source.js';\r\nimport { UMB_MEDIA_DETAIL_STORE_CONTEXT } from './media-detail.store.context-token.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbDetailRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\n\r\nexport class UmbMediaDetailRepository extends UmbDetailRepositoryBase<UmbMediaDetailModel> {\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UmbMediaServerDataSource, UMB_MEDIA_DETAIL_STORE_CONTEXT);\r\n\t}\r\n}\r\n\r\nexport { UmbMediaDetailRepository as api };\r\n\r\nexport default UmbMediaDetailRepository;\r\n","import type UmbMediaItemStore from './media-item.store.js';\r\nimport { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\n\r\nexport const UMB_MEDIA_ITEM_STORE_CONTEXT = new UmbContextToken<UmbMediaItemStore>('UmbMediaItemStore');\r\n"],"names":["UMB_MEDIA_ENTITY_TYPE","UMB_MEDIA_ROOT_ENTITY_TYPE","UMB_MEDIA_PLACEHOLDER_ENTITY_TYPE","UmbMediaServerDataSource","#host","host","preset","UmbId","unique","data","error","tryExecuteAndNotify","MediaService","variant","model","parentUnique","requestBody","UMB_MEDIA_DETAIL_STORE_CONTEXT","UmbContextToken","UmbMediaDetailRepository","UmbDetailRepositoryBase","UMB_MEDIA_ITEM_STORE_CONTEXT"],"mappings":"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"}