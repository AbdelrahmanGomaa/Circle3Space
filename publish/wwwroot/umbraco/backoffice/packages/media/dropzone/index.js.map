{"version":3,"file":"index.js","sources":["../../../../src/packages/media/dropzone/modals/dropzone-media-type-picker/dropzone-media-type-picker-modal.token.ts","../../../../src/packages/media/dropzone/constants.ts","../../../../src/packages/media/dropzone/dropzone-manager.class.ts","../../../../src/packages/media/dropzone/dropzone-change.event.ts","../../../../src/packages/media/dropzone/dropzone-submitted.event.ts","../../../../src/packages/media/dropzone/components/input-dropzone/input-dropzone.element.ts"],"sourcesContent":["import type { UmbAllowedMediaTypeModel } from '@umbraco-cms/backoffice/media-type';\r\nimport { UmbModalToken } from '@umbraco-cms/backoffice/modal';\r\n\r\nexport interface UmbDropzoneMediaTypePickerModalData {\r\n\toptions: Array<UmbAllowedMediaTypeModel>;\r\n\tfiles?: Array<File>;\r\n}\r\n\r\nexport type UmbDropzoneMediaTypePickerModalValue = {\r\n\tmediaTypeUnique: string | undefined;\r\n};\r\n\r\nexport const UMB_DROPZONE_MEDIA_TYPE_PICKER_MODAL = new UmbModalToken<\r\n\tUmbDropzoneMediaTypePickerModalData,\r\n\tUmbDropzoneMediaTypePickerModalValue\r\n>('Umb.Modal.Dropzone.MediaTypePicker', {\r\n\tmodal: {\r\n\t\ttype: 'dialog',\r\n\t},\r\n});\r\n","export { UMB_DROPZONE_MEDIA_TYPE_PICKER_MODAL } from './modals/dropzone-media-type-picker/dropzone-media-type-picker-modal.token.js';\r\n\r\nexport enum UmbFileDropzoneItemStatus {\r\n\tWAITING = 'waiting',\r\n\tCOMPLETE = 'complete',\r\n\tNOT_ALLOWED = 'not allowed',\r\n\tCANCELLED = 'cancelled',\r\n\tERROR = 'error',\r\n}\r\n","import { UmbMediaDetailRepository } from '../media/repository/index.js';\r\nimport type { UmbMediaDetailModel, UmbMediaValueModel } from '../media/types.js';\r\nimport { UmbFileDropzoneItemStatus } from './constants.js';\r\nimport { UMB_DROPZONE_MEDIA_TYPE_PICKER_MODAL } from './modals/index.js';\r\nimport type {\r\n\tUmbUploadableFile,\r\n\tUmbUploadableFolder,\r\n\tUmbFileDropzoneDroppedItems,\r\n\tUmbFileDropzoneProgress,\r\n\tUmbUploadableItem,\r\n\tUmbAllowedMediaTypesOfExtension,\r\n\tUmbAllowedChildrenOfMediaType,\r\n} from './types.js';\r\nimport {\r\n\tTemporaryFileStatus,\r\n\tUmbTemporaryFileManager,\r\n\ttype UmbTemporaryFileModel,\r\n} from '@umbraco-cms/backoffice/temporary-file';\r\nimport { UmbArrayState, UmbObjectState } from '@umbraco-cms/backoffice/observable-api';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport { UmbMediaTypeStructureRepository } from '@umbraco-cms/backoffice/media-type';\r\nimport { UMB_MODAL_MANAGER_CONTEXT } from '@umbraco-cms/backoffice/modal';\r\nimport type { UmbAllowedMediaTypeModel } from '@umbraco-cms/backoffice/media-type';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UMB_NOTIFICATION_CONTEXT } from '@umbraco-cms/backoffice/notification';\r\nimport { UmbLocalizationController } from '@umbraco-cms/backoffice/localization-api';\r\n\r\n/**\r\n * Manages the dropzone and uploads folders and files to the server.\r\n * @function createMediaItems - Upload files and folders to the server and creates the items using corresponding media type.\r\n * @function createTemporaryFiles - Upload the files as temporary files and returns the data.\r\n * @observable progress - Emits the number of completed items and total items.\r\n * @observable progressItems - Emits the items with their current status.\r\n */\r\nexport class UmbDropzoneManager extends UmbControllerBase {\r\n\treadonly #host: UmbControllerHost;\r\n\t/**\r\n\t * @deprecated Not used anymore; this method will be removed in Umbraco 17.\r\n\t */\r\n\t#isFoldersAllowed = true;\r\n\r\n\t#mediaTypeStructure = new UmbMediaTypeStructureRepository(this);\r\n\t#mediaDetailRepository = new UmbMediaDetailRepository(this);\r\n\r\n\t#tempFileManager = new UmbTemporaryFileManager(this);\r\n\r\n\t// The available media types for a file extension.\r\n\treadonly #availableMediaTypesOf = new UmbArrayState<UmbAllowedMediaTypesOfExtension>([], (x) => x.extension);\r\n\r\n\t// The media types that the parent will allow to be created under it.\r\n\treadonly #allowedChildrenOf = new UmbArrayState<UmbAllowedChildrenOfMediaType>([], (x) => x.mediaTypeUnique);\r\n\r\n\treadonly #progress = new UmbObjectState<UmbFileDropzoneProgress>({ total: 0, completed: 0 });\r\n\tpublic readonly progress = this.#progress.asObservable();\r\n\r\n\treadonly #progressItems = new UmbArrayState<UmbUploadableItem>([], (x) => x.unique);\r\n\tpublic readonly progressItems = this.#progressItems.asObservable();\r\n\r\n\t#notificationContext?: typeof UMB_NOTIFICATION_CONTEXT.TYPE;\r\n\t#localization = new UmbLocalizationController(this);\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\t\tthis.#host = host;\r\n\r\n\t\tthis.consumeContext(UMB_NOTIFICATION_CONTEXT, (context) => {\r\n\t\t\tthis.#notificationContext = context;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated Not used anymore; this method will be removed in Umbraco 17.\r\n\t */\r\n\tpublic setIsFoldersAllowed(isAllowed: boolean) {\r\n\t\tthis.#isFoldersAllowed = isAllowed;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated Not used anymore; this method will be removed in Umbraco 17.\r\n\t */\r\n\tpublic getIsFoldersAllowed(): boolean {\r\n\t\treturn this.#isFoldersAllowed;\r\n\t}\r\n\r\n\t/** @deprecated Please use `createMediaItems()` instead; this method will be removed in Umbraco 17. */\r\n\tpublic createFilesAsMedia = this.createMediaItems;\r\n\r\n\t/**\r\n\t * Uploads files and folders to the server and creates the media items with corresponding media type.\\\r\n\t * Allows the user to pick a media type option if multiple types are allowed.\r\n\t * @param {UmbFileDropzoneDroppedItems} items - The files and folders to upload.\r\n\t * @param {string | null} parentUnique - Where the items should be uploaded.\r\n\t * @returns {Array<UmbUploadableItem>} - The items about to be uploaded.\r\n\t */\r\n\tpublic createMediaItems(items: UmbFileDropzoneDroppedItems, parentUnique: string | null = null) {\r\n\t\tconst uploadableItems = this.#setupProgress(items, parentUnique);\r\n\r\n\t\tif (!uploadableItems.length) return [];\r\n\r\n\t\tif (uploadableItems.length === 1) {\r\n\t\t\t// When there is only one item being uploaded, allow the user to pick the media type, if more than one is allowed.\r\n\t\t\tthis.#createOneMediaItem(uploadableItems[0]);\r\n\t\t} else {\r\n\t\t\t// When there are multiple items being uploaded, automatically pick the media types for each item. We probably want to allow the user to pick the media type in the future.\r\n\t\t\tthis.#createMediaItems(uploadableItems);\r\n\t\t}\r\n\r\n\t\treturn uploadableItems;\r\n\t}\r\n\r\n\t/** @deprecated Please use `createTemporaryFiles()` instead; this method will be removed in Umbraco 17. */\r\n\tpublic createFilesAsTemporary = this.createTemporaryFiles;\r\n\r\n\t/**\r\n\t * Uploads the files as temporary files and returns the data.\r\n\t * @param { File[] } files - The files to upload.\r\n\t * @returns {Promise<Array<UmbUploadableItem>>} - Files as temporary files.\r\n\t */\r\n\tpublic async createTemporaryFiles(files: Array<File>): Promise<Array<UmbUploadableItem>> {\r\n\t\tconst uploadableItems = this.#setupProgress({ files, folders: [] }, null) as Array<UmbUploadableFile>;\r\n\r\n\t\tconst uploadedItems: Array<UmbUploadableItem> = [];\r\n\r\n\t\tfor (const item of uploadableItems) {\r\n\t\t\t// Upload as temp file\r\n\t\t\tconst uploaded = await this.#tempFileManager.uploadOne(item.temporaryFile);\r\n\r\n\t\t\t// Update progress\r\n\t\t\tif (uploaded.status === TemporaryFileStatus.CANCELLED) {\r\n\t\t\t\tthis.#updateStatus(item, UmbFileDropzoneItemStatus.CANCELLED);\r\n\t\t\t} else if (uploaded.status === TemporaryFileStatus.SUCCESS) {\r\n\t\t\t\tthis.#updateStatus(item, UmbFileDropzoneItemStatus.COMPLETE);\r\n\t\t\t} else {\r\n\t\t\t\tthis.#updateStatus(item, UmbFileDropzoneItemStatus.ERROR);\r\n\t\t\t}\r\n\r\n\t\t\t// Add to return value\r\n\t\t\tuploadedItems.push(item);\r\n\t\t}\r\n\r\n\t\treturn uploadedItems;\r\n\t}\r\n\r\n\tpublic removeOne(item: UmbUploadableItem) {\r\n\t\titem.temporaryFile?.abortController?.abort();\r\n\t\tthis.#progressItems.removeOne(item.unique);\r\n\t\tif (item.temporaryFile) {\r\n\t\t\tthis.#tempFileManager.removeOne(item.temporaryFile.temporaryUnique);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic remove(items: Array<UmbUploadableItem>) {\r\n\t\tconst uniques: string[] = [];\r\n\t\tfor (const item of items) {\r\n\t\t\titem.temporaryFile?.abortController?.abort();\r\n\t\t\tif (item.temporaryFile) {\r\n\t\t\t\tuniques.push(item.temporaryFile.temporaryUnique);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.#progressItems.remove(uniques);\r\n\t\tconst temporaryUniques = items.map((x) => x.temporaryFile?.temporaryUnique).filter((x): x is string => !!x);\r\n\t\tthis.#tempFileManager.remove(temporaryUniques);\r\n\t}\r\n\r\n\tpublic removeAll() {\r\n\t\tfor (const item of this.#progressItems.getValue()) {\r\n\t\t\titem.temporaryFile?.abortController?.abort();\r\n\t\t}\r\n\t\tthis.#progressItems.setValue([]);\r\n\t\tthis.#tempFileManager.removeAll();\r\n\t}\r\n\r\n\tasync #showDialogMediaTypePicker(options: Array<UmbAllowedMediaTypeModel>) {\r\n\t\tconst modalManager = await this.getContext(UMB_MODAL_MANAGER_CONTEXT);\r\n\t\tconst modalContext = modalManager.open(this.#host, UMB_DROPZONE_MEDIA_TYPE_PICKER_MODAL, { data: { options } });\r\n\t\tconst value = await modalContext.onSubmit().catch(() => undefined);\r\n\t\treturn value?.mediaTypeUnique;\r\n\t}\r\n\r\n\tasync #createOneMediaItem(item: UmbUploadableItem) {\r\n\t\tconst options = await this.#getMediaTypeOptions(item);\r\n\t\tif (!options.length) {\r\n\t\t\tthis.#notificationContext?.peek('warning', {\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tmessage: `${this.#localization.term('media_disallowedFileType')}: ${item.temporaryFile?.file.name}.`,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\treturn this.#updateStatus(item, UmbFileDropzoneItemStatus.NOT_ALLOWED);\r\n\t\t}\r\n\r\n\t\tconst mediaTypeUnique = options.length > 1 ? await this.#showDialogMediaTypePicker(options) : options[0].unique;\r\n\r\n\t\tif (!mediaTypeUnique) {\r\n\t\t\treturn this.#updateStatus(item, UmbFileDropzoneItemStatus.CANCELLED);\r\n\t\t}\r\n\r\n\t\tif (item.temporaryFile) {\r\n\t\t\tthis.#handleFile(item as UmbUploadableFile, mediaTypeUnique);\r\n\t\t} else if (item.folder) {\r\n\t\t\tthis.#handleFolder(item as UmbUploadableFolder, mediaTypeUnique);\r\n\t\t}\r\n\t}\r\n\r\n\tasync #createMediaItems(uploadableItems: Array<UmbUploadableItem>) {\r\n\t\tfor (const item of uploadableItems) {\r\n\t\t\tconst options = await this.#getMediaTypeOptions(item);\r\n\t\t\tif (!options.length) {\r\n\t\t\t\tthis.#updateStatus(item, UmbFileDropzoneItemStatus.NOT_ALLOWED);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst mediaTypeUnique = options[0].unique;\r\n\r\n\t\t\tif (!mediaTypeUnique) {\r\n\t\t\t\tthrow new Error('Media type unique is not defined');\r\n\t\t\t}\r\n\r\n\t\t\t// Handle files and folders differently: a file is uploaded as temp then created as a media item, and a folder is created as a media item directly\r\n\t\t\tif (item.temporaryFile) {\r\n\t\t\t\tthis.#handleFile(item as UmbUploadableFile, mediaTypeUnique);\r\n\t\t\t} else if (item.folder) {\r\n\t\t\t\tthis.#handleFolder(item as UmbUploadableFolder, mediaTypeUnique);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync #handleFile(item: UmbUploadableFile, mediaTypeUnique: string) {\r\n\t\t// Upload the file as a temporary file and update progress.\r\n\t\tconst temporaryFile = await this.#tempFileManager.uploadOne(item.temporaryFile);\r\n\r\n\t\tif (temporaryFile.status === TemporaryFileStatus.CANCELLED) {\r\n\t\t\tthis.#updateStatus(item, UmbFileDropzoneItemStatus.CANCELLED);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (temporaryFile.status !== TemporaryFileStatus.SUCCESS) {\r\n\t\t\tthis.#updateStatus(item, UmbFileDropzoneItemStatus.ERROR);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Create the media item.\r\n\t\tconst scaffold = await this.#getItemScaffold(item, mediaTypeUnique);\r\n\t\tconst { data } = await this.#mediaDetailRepository.create(scaffold, item.parentUnique);\r\n\r\n\t\tif (data) {\r\n\t\t\tthis.#updateStatus(item, UmbFileDropzoneItemStatus.COMPLETE);\r\n\t\t} else {\r\n\t\t\tthis.#updateStatus(item, UmbFileDropzoneItemStatus.ERROR);\r\n\t\t}\r\n\t}\r\n\r\n\tasync #handleFolder(item: UmbUploadableFolder, mediaTypeUnique: string) {\r\n\t\tconst scaffold = await this.#getItemScaffold(item, mediaTypeUnique);\r\n\t\tconst { data } = await this.#mediaDetailRepository.create(scaffold, item.parentUnique);\r\n\t\tif (data) {\r\n\t\t\tthis.#updateStatus(item, UmbFileDropzoneItemStatus.COMPLETE);\r\n\t\t} else {\r\n\t\t\tthis.#updateStatus(item, UmbFileDropzoneItemStatus.ERROR);\r\n\t\t}\r\n\t}\r\n\r\n\t// Media types\r\n\tasync #getMediaTypeOptions(item: UmbUploadableItem): Promise<Array<UmbAllowedMediaTypeModel>> {\r\n\t\t// Check the parent which children media types are allowed\r\n\t\tconst parent = item.parentUnique ? await this.#mediaDetailRepository.requestByUnique(item.parentUnique) : null;\r\n\t\tconst allowedChildren = await this.#getAllowedChildrenOf(parent?.data?.mediaType.unique ?? null, item.parentUnique);\r\n\r\n\t\tconst extension = item.temporaryFile?.file.name.split('.').pop() ?? null;\r\n\r\n\t\t// Check which media types allow the file's extension\r\n\t\tconst availableMediaType = await this.#getAvailableMediaTypesOf(extension);\r\n\r\n\t\tif (!availableMediaType.length) return [];\r\n\r\n\t\tconst options = allowedChildren.filter((x) => availableMediaType.find((y) => y.unique === x.unique));\r\n\t\treturn options;\r\n\t}\r\n\r\n\tasync #getAvailableMediaTypesOf(extension: string | null) {\r\n\t\t// Check if we already have information on this file extension.\r\n\t\tconst available = this.#availableMediaTypesOf\r\n\t\t\t.getValue()\r\n\t\t\t.find((x) => x.extension === extension)?.availableMediaTypes;\r\n\t\tif (available) return available;\r\n\r\n\t\t// Request information on this file extension\r\n\t\tconst availableMediaTypes = extension\r\n\t\t\t? await this.#mediaTypeStructure.requestMediaTypesOf({ fileExtension: extension })\r\n\t\t\t: await this.#mediaTypeStructure.requestMediaTypesOfFolders();\r\n\r\n\t\tthis.#availableMediaTypesOf.appendOne({ extension, availableMediaTypes });\r\n\t\treturn availableMediaTypes;\r\n\t}\r\n\r\n\tasync #getAllowedChildrenOf(mediaTypeUnique: string | null, parentUnique: string | null) {\r\n\t\t//Check if we already got information on this media type.\r\n\t\tconst allowed = this.#allowedChildrenOf\r\n\t\t\t.getValue()\r\n\t\t\t.find((x) => x.mediaTypeUnique === mediaTypeUnique)?.allowedChildren;\r\n\t\tif (allowed) return allowed;\r\n\r\n\t\t// Request information on this media type.\r\n\t\tconst { data } = await this.#mediaTypeStructure.requestAllowedChildrenOf(mediaTypeUnique, parentUnique);\r\n\t\tif (!data) throw new Error('Parent media type does not exists');\r\n\r\n\t\tthis.#allowedChildrenOf.appendOne({ mediaTypeUnique, allowedChildren: data.items });\r\n\t\treturn data.items;\r\n\t}\r\n\r\n\t// Scaffold\r\n\tasync #getItemScaffold(item: UmbUploadableItem, mediaTypeUnique: string): Promise<UmbMediaDetailModel> {\r\n\t\t// TODO: Use a scaffolding feature to ensure consistency. [NL]\r\n\t\tconst name = item.temporaryFile ? item.temporaryFile.file.name : (item.folder?.name ?? '');\r\n\t\tconst umbracoFile: UmbMediaValueModel = {\r\n\t\t\teditorAlias: '',\r\n\t\t\talias: 'umbracoFile',\r\n\t\t\tvalue: { temporaryFileId: item.temporaryFile?.temporaryUnique },\r\n\t\t\tculture: null,\r\n\t\t\tsegment: null,\r\n\t\t};\r\n\r\n\t\tconst preset: Partial<UmbMediaDetailModel> = {\r\n\t\t\tunique: item.unique,\r\n\t\t\tmediaType: { unique: mediaTypeUnique, collection: null },\r\n\t\t\tvariants: [{ culture: null, segment: null, createDate: null, updateDate: null, name }],\r\n\t\t\tvalues: item.temporaryFile ? [umbracoFile] : undefined,\r\n\t\t};\r\n\t\tconst { data } = await this.#mediaDetailRepository.createScaffold(preset);\r\n\t\treturn data!;\r\n\t}\r\n\r\n\t// Progress handling\r\n\t#setupProgress(items: UmbFileDropzoneDroppedItems, parent: string | null) {\r\n\t\tconst current = this.#progress.getValue();\r\n\t\tconst currentItems = this.#progressItems.getValue();\r\n\r\n\t\tconst uploadableItems = this.#prepareItemsAsUploadable({ folders: items.folders, files: items.files }, parent);\r\n\r\n\t\tthis.#progressItems.setValue([...currentItems, ...uploadableItems]);\r\n\t\tthis.#progress.setValue({ total: current.total + uploadableItems.length, completed: current.completed });\r\n\r\n\t\treturn uploadableItems;\r\n\t}\r\n\r\n\t#updateStatus(item: UmbUploadableItem, status: UmbFileDropzoneItemStatus) {\r\n\t\tthis.#progressItems.updateOne(item.unique, { status });\r\n\t\tconst progress = this.#progress.getValue();\r\n\t\tthis.#progress.update({ completed: progress.completed + 1 });\r\n\t}\r\n\r\n\t#updateProgress(item: UmbUploadableItem, progress: number) {\r\n\t\tthis.#progressItems.updateOne(item.unique, { progress });\r\n\t}\r\n\r\n\treadonly #prepareItemsAsUploadable = (\r\n\t\t{ folders, files }: UmbFileDropzoneDroppedItems,\r\n\t\tparentUnique: string | null,\r\n\t): Array<UmbUploadableItem> => {\r\n\t\tconst items: Array<UmbUploadableItem> = [];\r\n\r\n\t\tfor (const file of files) {\r\n\t\t\tconst temporaryFile: UmbTemporaryFileModel = {\r\n\t\t\t\tfile,\r\n\t\t\t\ttemporaryUnique: UmbId.new(),\r\n\t\t\t\tabortController: new AbortController(),\r\n\t\t\t\tonProgress: (progress) => this.#updateProgress(uploadableItem, progress),\r\n\t\t\t};\r\n\r\n\t\t\tconst uploadableItem: UmbUploadableFile = {\r\n\t\t\t\tunique: UmbId.new(),\r\n\t\t\t\tparentUnique,\r\n\t\t\t\tstatus: UmbFileDropzoneItemStatus.WAITING,\r\n\t\t\t\tprogress: 0,\r\n\t\t\t\ttemporaryFile,\r\n\t\t\t};\r\n\r\n\t\t\ttemporaryFile.abortController?.signal.addEventListener('abort', () => {\r\n\t\t\t\tthis.#updateStatus(uploadableItem, UmbFileDropzoneItemStatus.CANCELLED);\r\n\t\t\t});\r\n\r\n\t\t\titems.push(uploadableItem);\r\n\t\t}\r\n\r\n\t\tfor (const subfolder of folders) {\r\n\t\t\tconst unique = UmbId.new();\r\n\t\t\titems.push({\r\n\t\t\t\tunique,\r\n\t\t\t\tparentUnique,\r\n\t\t\t\tstatus: UmbFileDropzoneItemStatus.WAITING,\r\n\t\t\t\tprogress: 100, // Folders are created instantly.\r\n\t\t\t\tfolder: { name: subfolder.folderName },\r\n\t\t\t});\r\n\r\n\t\t\titems.push(...this.#prepareItemsAsUploadable({ folders: subfolder.folders, files: subfolder.files }, unique));\r\n\t\t}\r\n\t\treturn items;\r\n\t};\r\n\r\n\tpublic override destroy() {\r\n\t\tthis.#tempFileManager.destroy();\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n","import type { UmbUploadableItem } from './types.js';\r\n\r\nexport class UmbDropzoneChangeEvent extends Event {\r\n\tpublic static readonly TYPE = 'change';\r\n\r\n\t/**\r\n\t * An array of resolved uploadable items.\r\n\t */\r\n\tpublic items;\r\n\r\n\tpublic constructor(items: Array<UmbUploadableItem>, args?: EventInit) {\r\n\t\tsuper(UmbDropzoneChangeEvent.TYPE, { bubbles: false, composed: false, cancelable: false, ...args });\r\n\t\tthis.items = items;\r\n\t}\r\n}\r\n","import type { UmbUploadableItem } from './types.js';\r\n\r\nexport class UmbDropzoneSubmittedEvent extends Event {\r\n\tpublic static readonly TYPE = 'submitted';\r\n\r\n\t/**\r\n\t * An array of resolved uploadable items.\r\n\t */\r\n\tpublic items;\r\n\r\n\tpublic constructor(items: Array<UmbUploadableItem>, args?: EventInit) {\r\n\t\tsuper(UmbDropzoneSubmittedEvent.TYPE, { bubbles: false, composed: false, cancelable: false, ...args });\r\n\t\tthis.items = items;\r\n\t}\r\n}\r\n","import type { UmbUploadableItem } from '../../types.js';\r\nimport { UmbFileDropzoneItemStatus } from '../../constants.js';\r\nimport { UmbDropzoneManager } from '../../dropzone-manager.class.js';\r\nimport { UmbDropzoneChangeEvent } from '../../dropzone-change.event.js';\r\nimport { UmbDropzoneSubmittedEvent } from '../../dropzone-submitted.event.js';\r\nimport {\r\n\tcss,\r\n\tcustomElement,\r\n\thtml,\r\n\tifDefined,\r\n\tnothing,\r\n\tproperty,\r\n\tquery,\r\n\trepeat,\r\n\tstate,\r\n\twhen,\r\n} from '@umbraco-cms/backoffice/external/lit';\r\nimport type { UUIFileDropzoneElement, UUIFileDropzoneEvent } from '@umbraco-cms/backoffice/external/uui';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport { formatBytes } from '@umbraco-cms/backoffice/utils';\r\nimport { UmbFormControlMixin } from '@umbraco-cms/backoffice/validation';\r\n\r\n/**\r\n * A dropzone for uploading files and folders.\r\n * The files will be uploaded to the server as temporary files and can be used in the backoffice.\r\n * @element umb-input-dropzone\r\n * @fires ProgressEvent When the progress of the upload changes.\r\n * @fires UmbDropzoneChangeEvent When the upload is complete.\r\n * @fires UmbDropzoneSubmittedEvent When the upload is submitted.\r\n * @slot - The default slot.\r\n * @slot text - A text shown above the dropzone graphic.\r\n */\r\n@customElement('umb-input-dropzone')\r\nexport class UmbInputDropzoneElement extends UmbFormControlMixin<UmbUploadableItem[], typeof UmbLitElement>(\r\n\tUmbLitElement,\r\n) {\r\n\t/**\r\n\t * Comma-separated list of accepted mime types or file extensions.\r\n\t */\r\n\t@property({ type: String })\r\n\taccept?: string;\r\n\r\n\t/**\r\n\t * Disable folder uploads.\r\n\t */\r\n\t@property({ type: Boolean, attribute: 'disable-folder-upload' })\r\n\tdisableFolderUpload: boolean = false;\r\n\r\n\t/**\r\n\t * Disables the dropzone.\r\n\t * @description The dropzone will not accept any uploads.\r\n\t */\r\n\t@property({ type: Boolean, reflect: true })\r\n\tdisabled: boolean = false;\r\n\r\n\t/**\r\n\t * Determines if the dropzone should accept multiple files.\r\n\t */\r\n\t@property({ type: Boolean })\r\n\tmultiple: boolean = false;\r\n\r\n\t/**\r\n\t * The label for the dropzone.\r\n\t */\r\n\t@property({ type: String })\r\n\tlabel = 'dropzone';\r\n\r\n\t@query('#dropzone', true)\r\n\tprotected _dropzone?: UUIFileDropzoneElement;\r\n\r\n\t@state()\r\n\tprotected _progressItems: Array<UmbUploadableItem> = [];\r\n\r\n\tprotected _manager = new UmbDropzoneManager(this);\r\n\r\n\t/**\r\n\t * Determines if the dropzone should be disabled.\r\n\t * If the dropzone is disabled, it will not accept any uploads.\r\n\t * It is considered disabled if the `disabled` property is set or if `multiple` is set to `false` and there is already an upload in progress.\r\n\t * @returns {boolean} True if the dropzone should not accept uploads, otherwise false.\r\n\t */\r\n\tget #isDisabled(): boolean {\r\n\t\treturn this.disabled || (!this.multiple && this._progressItems.length > 0);\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis._manager.progress,\r\n\t\t\t(progress) =>\r\n\t\t\t\tthis.dispatchEvent(new ProgressEvent('progress', { loaded: progress.completed, total: progress.total })),\r\n\t\t\t'_observeProgress',\r\n\t\t);\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis._manager.progressItems,\r\n\t\t\t(progressItems) => {\r\n\t\t\t\tthis._progressItems = [...progressItems];\r\n\t\t\t\tconst waiting = this._progressItems.find((item) => item.status === UmbFileDropzoneItemStatus.WAITING);\r\n\t\t\t\tif (this._progressItems.length && !waiting) {\r\n\t\t\t\t\tthis.value = [...this._progressItems];\r\n\t\t\t\t\tthis.dispatchEvent(new UmbDropzoneChangeEvent(this._progressItems));\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'_observeProgressItems',\r\n\t\t);\r\n\t}\r\n\r\n\toverride disconnectedCallback(): void {\r\n\t\tsuper.disconnectedCallback();\r\n\t\tthis._manager.destroy();\r\n\t}\r\n\r\n\t/**\r\n\t * Opens the file browse dialog.\r\n\t */\r\n\tpublic browse(): void {\r\n\t\tif (this.#isDisabled) return;\r\n\t\tthis._dropzone?.browse();\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<slot name=\"text\"></slot>\r\n\t\t\t<uui-file-dropzone\r\n\t\t\t\tid=\"dropzone\"\r\n\t\t\t\tlabel=${this.label}\r\n\t\t\t\taccept=${ifDefined(this.accept)}\r\n\t\t\t\t?multiple=${this.multiple}\r\n\t\t\t\t?disabled=${this.#isDisabled}\r\n\t\t\t\t?disallowFolderUpload=${this.disableFolderUpload}\r\n\t\t\t\t@change=${this.onUpload}\r\n\t\t\t\t@click=${this.#handleBrowse}>\r\n\t\t\t\t<slot>\r\n\t\t\t\t\t<uui-button label=${this.localize.term('media_clickToUpload')} @click=${this.#handleBrowse}></uui-button>\r\n\t\t\t\t</slot>\r\n\t\t\t</uui-file-dropzone>\r\n\t\t\t${this.renderUploader()}\r\n\t\t`;\r\n\t}\r\n\r\n\tprotected renderUploader() {\r\n\t\tif (!this._progressItems?.length) return nothing;\r\n\r\n\t\treturn html`\r\n\t\t\t<div id=\"uploader\">\r\n\t\t\t\t${repeat(\r\n\t\t\t\t\tthis._progressItems,\r\n\t\t\t\t\t(item) => item.unique,\r\n\t\t\t\t\t(item) => this.renderPlaceholder(item),\r\n\t\t\t\t)}\r\n\t\t\t\t<uui-button\r\n\t\t\t\t\tid=\"uploader-clear\"\r\n\t\t\t\t\tcompact\r\n\t\t\t\t\t@click=${this.#handleRemove}\r\n\t\t\t\t\tlabel=${this.localize.term('content_uploadClear')}>\r\n\t\t\t\t\t<uui-icon name=\"icon-trash\"></uui-icon>${this.localize.term('content_uploadClear')}\r\n\t\t\t\t</uui-button>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n\r\n\tprotected renderPlaceholder(item: UmbUploadableItem) {\r\n\t\tconst file = item.temporaryFile?.file;\r\n\t\treturn html`\r\n\t\t\t<div class=\"placeholder\">\r\n\t\t\t\t<div class=\"fileIcon\">\r\n\t\t\t\t\t${when(\r\n\t\t\t\t\t\titem.status === UmbFileDropzoneItemStatus.COMPLETE,\r\n\t\t\t\t\t\t() => html`<umb-icon name=\"check\" color=\"green\"></umb-icon>`,\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t${when(\r\n\t\t\t\t\t\titem.status === UmbFileDropzoneItemStatus.ERROR ||\r\n\t\t\t\t\t\t\titem.status === UmbFileDropzoneItemStatus.CANCELLED ||\r\n\t\t\t\t\t\t\titem.status === UmbFileDropzoneItemStatus.NOT_ALLOWED,\r\n\t\t\t\t\t\t() => html`<umb-icon name=\"wrong\" color=\"red\"></umb-icon>`,\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"fileDetails\">\r\n\t\t\t\t\t<div class=\"fileName\" title=${file?.name ?? ''}>${file?.name ?? ''}</div>\r\n\t\t\t\t\t<div class=\"fileSize\">\r\n\t\t\t\t\t\t${formatBytes(file?.size ?? 0, { decimals: 2 })}:\r\n\t\t\t\t\t\t${this.localize.number(item.progress, { maximumFractionDigits: 0 })}%\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t${when(\r\n\t\t\t\t\t\titem.status === UmbFileDropzoneItemStatus.WAITING,\r\n\t\t\t\t\t\t() => html`<div class=\"progress\"><uui-loader-bar progress=${item.progress}></uui-loader-bar></div>`,\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t${when(\r\n\t\t\t\t\t\titem.status === UmbFileDropzoneItemStatus.ERROR,\r\n\t\t\t\t\t\t() => html`<div class=\"error\">An error occured</div>`,\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t${when(item.status === UmbFileDropzoneItemStatus.CANCELLED, () => html`<div class=\"error\">Cancelled</div>`)}\r\n\t\t\t\t\t${when(\r\n\t\t\t\t\t\titem.status === UmbFileDropzoneItemStatus.NOT_ALLOWED,\r\n\t\t\t\t\t\t() => html`<div class=\"error\">File type not allowed</div>`,\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"fileActions\">\r\n\t\t\t\t\t${when(\r\n\t\t\t\t\t\titem.status === UmbFileDropzoneItemStatus.WAITING,\r\n\t\t\t\t\t\t() => html`\r\n\t\t\t\t\t\t\t<uui-button\r\n\t\t\t\t\t\t\t\tcompact\r\n\t\t\t\t\t\t\t\t@click=${() => this.#handleCancel(item)}\r\n\t\t\t\t\t\t\t\tlabel=${this.localize.term('general_cancel')}>\r\n\t\t\t\t\t\t\t\t<uui-icon name=\"icon-remove\"></uui-icon>${this.localize.term('general_cancel')}\r\n\t\t\t\t\t\t\t</uui-button>\r\n\t\t\t\t\t\t`,\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n\r\n\tprotected async onUpload(e: UUIFileDropzoneEvent) {\r\n\t\te.stopImmediatePropagation();\r\n\r\n\t\tif (this.#isDisabled) return;\r\n\t\tif (!e.detail.files.length && !e.detail.folders.length) return;\r\n\r\n\t\tconst uploadables = this._manager.createTemporaryFiles(e.detail.files);\r\n\t\tthis.dispatchEvent(new UmbDropzoneSubmittedEvent(await uploadables));\r\n\t}\r\n\r\n\t#handleBrowse(e: Event) {\r\n\t\tif (!this._dropzone) return;\r\n\t\te.stopImmediatePropagation();\r\n\t\tthis._dropzone.browse();\r\n\t}\r\n\r\n\t#handleCancel(item: UmbUploadableItem) {\r\n\t\titem.temporaryFile?.abortController?.abort();\r\n\t}\r\n\r\n\t#handleRemove() {\r\n\t\tthis._manager.removeAll();\r\n\t}\r\n\r\n\tstatic override readonly styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex-direction: column;\r\n\t\t\t\tflex-wrap: wrap;\r\n\t\t\t\tplace-items: center;\r\n\t\t\t\tcursor: pointer;\r\n\t\t\t}\r\n\r\n\t\t\t:host([disabled]) #dropzone {\r\n\t\t\t\topacity: 0.5;\r\n\t\t\t\tpointer-events: none;\r\n\t\t\t}\r\n\r\n\t\t\t#dropzone {\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\tinset: 0;\r\n\t\t\t\tbackdrop-filter: opacity(1); /* Removes the built in blur effect */\r\n\r\n\t\t\t\t&[disabled] {\r\n\t\t\t\t\topacity: 0.5;\r\n\t\t\t\t\tpointer-events: none;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t#uploader {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex-direction: column;\r\n\t\t\t\tflex-wrap: wrap;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\tgap: var(--uui-size-space-3);\r\n\r\n\t\t\t\t.placeholder {\r\n\t\t\t\t\tdisplay: grid;\r\n\t\t\t\t\tgrid-template-columns: 30px 200px 1fr;\r\n\t\t\t\t\tmax-width: fit-content;\r\n\t\t\t\t\tpadding: var(--uui-size-space-3);\r\n\t\t\t\t\tborder: 1px dashed var(--uui-color-divider-emphasis);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.fileIcon,\r\n\t\t\t\t.fileActions {\r\n\t\t\t\t\tplace-self: center center;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.fileName {\r\n\t\t\t\t\twhite-space: nowrap;\r\n\t\t\t\t\toverflow: hidden;\r\n\t\t\t\t\ttext-overflow: ellipsis;\r\n\t\t\t\t\tfont-size: var(--uui-size-5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.fileSize {\r\n\t\t\t\t\tfont-size: var(--uui-font-size-small);\r\n\t\t\t\t\tcolor: var(--uui-color-text-alt);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.error {\r\n\t\t\t\t\tcolor: var(--uui-color-danger);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport const UmbInputDropzoneDashedStyles = css`\r\n\tumb-input-dropzone {\r\n\t\tposition: relative;\r\n\t\tdisplay: block;\r\n\t\tinset: 0;\r\n\t\tcursor: pointer;\r\n\t\tborder: 1px dashed var(--uui-color-divider-emphasis);\r\n\t}\r\n`;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-input-dropzone': UmbInputDropzoneElement;\r\n\t}\r\n}\r\n"],"names":["UMB_DROPZONE_MEDIA_TYPE_PICKER_MODAL","UmbModalToken","UmbFileDropzoneItemStatus","UmbDropzoneManager","UmbControllerBase","host","#isFoldersAllowed","#mediaTypeStructure","UmbMediaTypeStructureRepository","#mediaDetailRepository","UmbMediaDetailRepository","#tempFileManager","UmbTemporaryFileManager","#availableMediaTypesOf","UmbArrayState","x","#allowedChildrenOf","#progress","UmbObjectState","#progressItems","#localization","UmbLocalizationController","#prepareItemsAsUploadable","folders","files","parentUnique","items","file","temporaryFile","UmbId","progress","#updateProgress","uploadableItem","#updateStatus","subfolder","unique","#host","UMB_NOTIFICATION_CONTEXT","context","#notificationContext","isAllowed","uploadableItems","#setupProgress","#createOneMediaItem","#createMediaItems","uploadedItems","item","uploaded","TemporaryFileStatus","uniques","temporaryUniques","#showDialogMediaTypePicker","options","UMB_MODAL_MANAGER_CONTEXT","#getMediaTypeOptions","mediaTypeUnique","#handleFile","#handleFolder","scaffold","#getItemScaffold","data","parent","allowedChildren","#getAllowedChildrenOf","extension","availableMediaType","#getAvailableMediaTypesOf","y","available","availableMediaTypes","allowed","name","umbracoFile","preset","current","currentItems","status","UmbDropzoneChangeEvent","args","UmbDropzoneSubmittedEvent","_UmbInputDropzoneElement_instances","isDisabled_get","handleBrowse_fn","handleCancel_fn","handleRemove_fn","UmbInputDropzoneElement","UmbFormControlMixin","UmbLitElement","__privateAdd","progressItems","waiting","__privateGet","html","ifDefined","__privateMethod","repeat","nothing","when","formatBytes","e","uploadables","UmbTextStyles","css","__decorateClass","property","query","state","customElement","UmbInputDropzoneDashedStyles"],"mappings":";;;;;;;;;;;;;;;;;;AAYa,MAAAA,IAAuC,IAAIC,EAGtD,sCAAsC;AAAA,EACvC,OAAO;AAAA,IACN,MAAM;AAAA,EAAA;AAER,CAAC;ACjBW,IAAAC,sBAAAA,OACXA,EAAA,UAAU,WACVA,EAAA,WAAW,YACXA,EAAA,cAAc,eACdA,EAAA,YAAY,aACZA,EAAA,QAAQ,SALGA,IAAAA,KAAA,CAAA,CAAA;ACiCL,MAAMC,UAA2BC,EAAkB;AAAA,EA2BzD,YAAYC,GAAyB;AACpC,UAAMA,CAAI,GAvBS,KAAAC,KAAA,IAEE,KAAAC,KAAA,IAAIC,EAAgC,IAAI,GACrC,KAAAC,KAAA,IAAIC,EAAyB,IAAI,GAEvC,KAAAC,KAAA,IAAIC,EAAwB,IAAI,GAG1C,KAAAC,KAAyB,IAAIC,EAA+C,IAAI,CAACC,MAAMA,EAAE,SAAS,GAGlG,KAAAC,KAAqB,IAAIF,EAA6C,IAAI,CAACC,MAAMA,EAAE,eAAe,GAElG,KAAAE,KAAY,IAAIC,EAAwC,EAAE,OAAO,GAAG,WAAW,GAAG,GAC3E,KAAA,WAAW,KAAKD,GAAU,aAAa,GAE9C,KAAAE,KAAiB,IAAIL,EAAiC,IAAI,CAACC,MAAMA,EAAE,MAAM,GAClE,KAAA,gBAAgB,KAAKI,GAAe,aAAa,GAGjD,KAAAC,KAAA,IAAIC,EAA0B,IAAI,GA0BlD,KAAO,qBAAqB,KAAK,kBA0BjC,KAAO,yBAAyB,KAAK,sBAkPrC,KAASC,KAA4B,CACpC,EAAE,SAAAC,GAAS,OAAAC,EAAA,GACXC,MAC8B;AAC9B,YAAMC,IAAkC,CAAC;AAEzC,iBAAWC,KAAQH,GAAO;AACzB,cAAMI,IAAuC;AAAA,UAC5C,MAAAD;AAAA,UACA,iBAAiBE,EAAM,IAAI;AAAA,UAC3B,iBAAiB,IAAI,gBAAgB;AAAA,UACrC,YAAY,CAACC,MAAa,KAAKC,GAAgBC,GAAgBF,CAAQ;AAAA,QACxE,GAEME,IAAoC;AAAA,UACzC,QAAQH,EAAM,IAAI;AAAA,UAClB,cAAAJ;AAAA,UACA,QAAQvB,EAA0B;AAAA,UAClC,UAAU;AAAA,UACV,eAAA0B;AAAA,QACD;AAEA,QAAAA,EAAc,iBAAiB,OAAO,iBAAiB,SAAS,MAAM;AAChE,eAAAK,GAAcD,GAAgB9B,EAA0B,SAAS;AAAA,QAAA,CACtE,GAEDwB,EAAM,KAAKM,CAAc;AAAA,MAAA;AAG1B,iBAAWE,KAAaX,GAAS;AAC1B,cAAAY,IAASN,EAAM,IAAI;AACzB,QAAAH,EAAM,KAAK;AAAA,UACV,QAAAS;AAAA,UACA,cAAAV;AAAA,UACA,QAAQvB,EAA0B;AAAA,UAClC,UAAU;AAAA;AAAA,UACV,QAAQ,EAAE,MAAMgC,EAAU,WAAW;AAAA,QAAA,CACrC,GAEDR,EAAM,KAAK,GAAG,KAAKJ,GAA0B,EAAE,SAASY,EAAU,SAAS,OAAOA,EAAU,MAAM,GAAGC,CAAM,CAAC;AAAA,MAAA;AAEtG,aAAAT;AAAA,IACR,GA5UC,KAAKU,KAAQ/B,GAER,KAAA,eAAegC,GAA0B,CAACC,MAAY;AAC1D,WAAKC,KAAuBD;AAAA,IAAA,CAC5B;AAAA,EAAA;AAAA,EAhCOF;AAAA,EAIT9B;AAAA,EAEAC;AAAA,EACAE;AAAA,EAEAE;AAAA,EAGSE;AAAA,EAGAG;AAAA,EAEAC;AAAA,EAGAE;AAAA,EAGToB;AAAA,EACAnB;AAAA;AAAA;AAAA;AAAA,EAcO,oBAAoBoB,GAAoB;AAC9C,SAAKlC,KAAoBkC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMnB,sBAA+B;AACrC,WAAO,KAAKlC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaN,iBAAiBoB,GAAoCD,IAA8B,MAAM;AAC/F,UAAMgB,IAAkB,KAAKC,GAAehB,GAAOD,CAAY;AAE/D,WAAKgB,EAAgB,UAEjBA,EAAgB,WAAW,IAEzB,KAAAE,GAAoBF,EAAgB,CAAC,CAAC,IAG3C,KAAKG,GAAkBH,CAAe,GAGhCA,KAV6B,CAAC;AAAA,EAU9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWR,MAAa,qBAAqBjB,GAAuD;AAClF,UAAAiB,IAAkB,KAAKC,GAAe,EAAE,OAAAlB,GAAO,SAAS,CAAA,EAAG,GAAG,IAAI,GAElEqB,IAA0C,CAAC;AAEjD,eAAWC,KAAQL,GAAiB;AAEnC,YAAMM,IAAW,MAAM,KAAKpC,GAAiB,UAAUmC,EAAK,aAAa;AAGrE,MAAAC,EAAS,WAAWC,EAAoB,YACtC,KAAAf,GAAca,GAAM5C,EAA0B,SAAS,IAClD6C,EAAS,WAAWC,EAAoB,UAC7C,KAAAf,GAAca,GAAM5C,EAA0B,QAAQ,IAEtD,KAAA+B,GAAca,GAAM5C,EAA0B,KAAK,GAIzD2C,EAAc,KAAKC,CAAI;AAAA,IAAA;AAGjB,WAAAD;AAAA,EAAA;AAAA,EAGD,UAAUC,GAAyB;AACpC,IAAAA,EAAA,eAAe,iBAAiB,MAAM,GACtC,KAAA3B,GAAe,UAAU2B,EAAK,MAAM,GACrCA,EAAK,iBACR,KAAKnC,GAAiB,UAAUmC,EAAK,cAAc,eAAe;AAAA,EACnE;AAAA,EAGM,OAAOpB,GAAiC;AAC9C,UAAMuB,IAAoB,CAAC;AAC3B,eAAWH,KAAQpB;AACb,MAAAoB,EAAA,eAAe,iBAAiB,MAAM,GACvCA,EAAK,iBACAG,EAAA,KAAKH,EAAK,cAAc,eAAe;AAG5C,SAAA3B,GAAe,OAAO8B,CAAO;AAClC,UAAMC,IAAmBxB,EAAM,IAAI,CAACX,MAAMA,EAAE,eAAe,eAAe,EAAE,OAAO,CAACA,MAAmB,CAAC,CAACA,CAAC;AACrG,SAAAJ,GAAiB,OAAOuC,CAAgB;AAAA,EAAA;AAAA,EAGvC,YAAY;AAClB,eAAWJ,KAAQ,KAAK3B,GAAe,SAAA;AACjC,MAAA2B,EAAA,eAAe,iBAAiB,MAAM;AAEvC,SAAA3B,GAAe,SAAS,EAAE,GAC/B,KAAKR,GAAiB,UAAU;AAAA,EAAA;AAAA,EAGjC,MAAMwC,GAA2BC,GAA0C;AAI1E,YADc,OAFO,MAAM,KAAK,WAAWC,CAAyB,GAClC,KAAK,KAAKjB,IAAOpC,GAAsC,EAAE,MAAM,EAAE,SAAAoD,EAAQ,GAAG,EAC7E,WAAW,MAAM,MAAA;AAAA,KAAe,IACnD;AAAA,EAAA;AAAA,EAGf,MAAMT,GAAoBG,GAAyB;AAClD,UAAMM,IAAU,MAAM,KAAKE,GAAqBR,CAAI;AAChD,QAAA,CAACM,EAAQ;AACP,kBAAAb,IAAsB,KAAK,WAAW;AAAA,QAC1C,MAAM;AAAA,UACL,SAAS,GAAG,KAAKnB,GAAc,KAAK,0BAA0B,CAAC,KAAK0B,EAAK,eAAe,KAAK,IAAI;AAAA,QAAA;AAAA,MAClG,CACA,GACM,KAAKb,GAAca,GAAM5C,EAA0B,WAAW;AAGhE,UAAAqD,IAAkBH,EAAQ,SAAS,IAAI,MAAM,KAAKD,GAA2BC,CAAO,IAAIA,EAAQ,CAAC,EAAE;AAEzG,QAAI,CAACG;AACJ,aAAO,KAAKtB,GAAca,GAAM5C,EAA0B,SAAS;AAGpE,IAAI4C,EAAK,gBACH,KAAAU,GAAYV,GAA2BS,CAAe,IACjDT,EAAK,UACV,KAAAW,GAAcX,GAA6BS,CAAe;AAAA,EAChE;AAAA,EAGD,MAAMX,GAAkBH,GAA2C;AAClE,eAAWK,KAAQL,GAAiB;AACnC,YAAMW,IAAU,MAAM,KAAKE,GAAqBR,CAAI;AAChD,UAAA,CAACM,EAAQ,QAAQ;AACf,aAAAnB,GAAca,GAAM5C,EAA0B,WAAW;AAC9D;AAAA,MAAA;AAGK,YAAAqD,IAAkBH,EAAQ,CAAC,EAAE;AAEnC,UAAI,CAACG;AACE,cAAA,IAAI,MAAM,kCAAkC;AAInD,MAAIT,EAAK,gBACH,KAAAU,GAAYV,GAA2BS,CAAe,IACjDT,EAAK,UACV,KAAAW,GAAcX,GAA6BS,CAAe;AAAA,IAChE;AAAA,EACD;AAAA,EAGD,MAAMC,GAAYV,GAAyBS,GAAyB;AAEnE,UAAM3B,IAAgB,MAAM,KAAKjB,GAAiB,UAAUmC,EAAK,aAAa;AAE1E,QAAAlB,EAAc,WAAWoB,EAAoB,WAAW;AACtD,WAAAf,GAAca,GAAM5C,EAA0B,SAAS;AAC5D;AAAA,IAAA;AAEG,QAAA0B,EAAc,WAAWoB,EAAoB,SAAS;AACpD,WAAAf,GAAca,GAAM5C,EAA0B,KAAK;AACxD;AAAA,IAAA;AAID,UAAMwD,IAAW,MAAM,KAAKC,GAAiBb,GAAMS,CAAe,GAC5D,EAAE,MAAAK,EAAS,IAAA,MAAM,KAAKnD,GAAuB,OAAOiD,GAAUZ,EAAK,YAAY;AAErF,IAAIc,IACE,KAAA3B,GAAca,GAAM5C,EAA0B,QAAQ,IAEtD,KAAA+B,GAAca,GAAM5C,EAA0B,KAAK;AAAA,EACzD;AAAA,EAGD,MAAMuD,GAAcX,GAA2BS,GAAyB;AACvE,UAAMG,IAAW,MAAM,KAAKC,GAAiBb,GAAMS,CAAe,GAC5D,EAAE,MAAAK,EAAS,IAAA,MAAM,KAAKnD,GAAuB,OAAOiD,GAAUZ,EAAK,YAAY;AACrF,IAAIc,IACE,KAAA3B,GAAca,GAAM5C,EAA0B,QAAQ,IAEtD,KAAA+B,GAAca,GAAM5C,EAA0B,KAAK;AAAA,EACzD;AAAA;AAAA,EAID,MAAMoD,GAAqBR,GAAmE;AAEvF,UAAAe,IAASf,EAAK,eAAe,MAAM,KAAKrC,GAAuB,gBAAgBqC,EAAK,YAAY,IAAI,MACpGgB,IAAkB,MAAM,KAAKC,GAAsBF,GAAQ,MAAM,UAAU,UAAU,MAAMf,EAAK,YAAY,GAE5GkB,IAAYlB,EAAK,eAAe,KAAK,KAAK,MAAM,GAAG,EAAE,IAAA,KAAS,MAG9DmB,IAAqB,MAAM,KAAKC,GAA0BF,CAAS;AAEzE,WAAKC,EAAmB,SAERH,EAAgB,OAAO,CAAC/C,MAAMkD,EAAmB,KAAK,CAACE,MAAMA,EAAE,WAAWpD,EAAE,MAAM,CAAC,IAF5D,CAAC;AAAA,EAGjC;AAAA,EAGR,MAAMmD,GAA0BF,GAA0B;AAEnD,UAAAI,IAAY,KAAKvD,GACrB,SAAS,EACT,KAAK,CAACE,MAAMA,EAAE,cAAciD,CAAS,GAAG;AAC1C,QAAII,EAAkB,QAAAA;AAGtB,UAAMC,IAAsBL,IACzB,MAAM,KAAKzD,GAAoB,oBAAoB,EAAE,eAAeyD,EAAA,CAAW,IAC/E,MAAM,KAAKzD,GAAoB,2BAA2B;AAE7D,gBAAKM,GAAuB,UAAU,EAAE,WAAAmD,GAAW,qBAAAK,GAAqB,GACjEA;AAAA,EAAA;AAAA,EAGR,MAAMN,GAAsBR,GAAgC9B,GAA6B;AAElF,UAAA6C,IAAU,KAAKtD,GACnB,SAAS,EACT,KAAK,CAACD,MAAMA,EAAE,oBAAoBwC,CAAe,GAAG;AACtD,QAAIe,EAAgB,QAAAA;AAGd,UAAA,EAAE,MAAAV,MAAS,MAAM,KAAKrD,GAAoB,yBAAyBgD,GAAiB9B,CAAY;AACtG,QAAI,CAACmC,EAAY,OAAA,IAAI,MAAM,mCAAmC;AAE9D,gBAAK5C,GAAmB,UAAU,EAAE,iBAAAuC,GAAiB,iBAAiBK,EAAK,OAAO,GAC3EA,EAAK;AAAA,EAAA;AAAA;AAAA,EAIb,MAAMD,GAAiBb,GAAyBS,GAAuD;AAEhG,UAAAgB,IAAOzB,EAAK,gBAAgBA,EAAK,cAAc,KAAK,OAAQA,EAAK,QAAQ,QAAQ,IACjF0B,IAAkC;AAAA,MACvC,aAAa;AAAA,MACb,OAAO;AAAA,MACP,OAAO,EAAE,iBAAiB1B,EAAK,eAAe,gBAAgB;AAAA,MAC9D,SAAS;AAAA,MACT,SAAS;AAAA,IACV,GAEM2B,IAAuC;AAAA,MAC5C,QAAQ3B,EAAK;AAAA,MACb,WAAW,EAAE,QAAQS,GAAiB,YAAY,KAAK;AAAA,MACvD,UAAU,CAAC,EAAE,SAAS,MAAM,SAAS,MAAM,YAAY,MAAM,YAAY,MAAM,MAAAgB,EAAA,CAAM;AAAA,MACrF,QAAQzB,EAAK,gBAAgB,CAAC0B,CAAW,IAAI;AAAA,IAC9C,GACM,EAAE,MAAAZ,EAAK,IAAI,MAAM,KAAKnD,GAAuB,eAAegE,CAAM;AACjE,WAAAb;AAAA,EAAA;AAAA;AAAA,EAIRlB,GAAehB,GAAoCmC,GAAuB;AACnE,UAAAa,IAAU,KAAKzD,GAAU,SAAS,GAClC0D,IAAe,KAAKxD,GAAe,SAAS,GAE5CsB,IAAkB,KAAKnB,GAA0B,EAAE,SAASI,EAAM,SAAS,OAAOA,EAAM,MAAM,GAAGmC,CAAM;AAE7G,gBAAK1C,GAAe,SAAS,CAAC,GAAGwD,GAAc,GAAGlC,CAAe,CAAC,GAC7D,KAAAxB,GAAU,SAAS,EAAE,OAAOyD,EAAQ,QAAQjC,EAAgB,QAAQ,WAAWiC,EAAQ,UAAA,CAAW,GAEhGjC;AAAA,EAAA;AAAA,EAGRR,GAAca,GAAyB8B,GAAmC;AACzE,SAAKzD,GAAe,UAAU2B,EAAK,QAAQ,EAAE,QAAA8B,GAAQ;AAC/C,UAAA9C,IAAW,KAAKb,GAAU,SAAS;AACzC,SAAKA,GAAU,OAAO,EAAE,WAAWa,EAAS,YAAY,GAAG;AAAA,EAAA;AAAA,EAG5DC,GAAgBe,GAAyBhB,GAAkB;AAC1D,SAAKX,GAAe,UAAU2B,EAAK,QAAQ,EAAE,UAAAhB,GAAU;AAAA,EAAA;AAAA,EAG/CR;AAAA,EA4CO,UAAU;AACzB,SAAKX,GAAiB,QAAQ,GAC9B,MAAM,QAAQ;AAAA,EAAA;AAEhB;AChZO,MAAMkE,UAA+B,MAAM;AAAA,EACjD,OAAA;AAAA,SAAuB,OAAO;AAAA,EAAA;AAAA,EAOvB,YAAYnD,GAAiCoD,GAAkB;AAC/D,UAAAD,EAAuB,MAAM,EAAE,SAAS,IAAO,UAAU,IAAO,YAAY,IAAO,GAAGC,EAAA,CAAM,GAClG,KAAK,QAAQpD;AAAA,EAAA;AAEf;ACZO,MAAMqD,UAAkC,MAAM;AAAA,EACpD,OAAA;AAAA,SAAuB,OAAO;AAAA,EAAA;AAAA,EAOvB,YAAYrD,GAAiCoD,GAAkB;AAC/D,UAAAC,EAA0B,MAAM,EAAE,SAAS,IAAO,UAAU,IAAO,YAAY,IAAO,GAAGD,EAAA,CAAM,GACrG,KAAK,QAAQpD;AAAA,EAAA;AAEf;;;;;;;gUCdAsD,GAAAC,GAAAC,GAAAC,GAAAC;AAkCO,IAAMC,IAAN,cAAsCC;AAAA,EAC5CC;AACD,EAAE;AAAA,EAkDD,cAAc;AACP,UAAA,GArDDC,GAAA,MAAAR,CAAA,GAayB,KAAA,sBAAA,IAOX,KAAA,WAAA,IAMA,KAAA,WAAA,IAMZ,KAAA,QAAA,YAMR,KAAU,iBAA2C,CAAC,GAE5C,KAAA,WAAW,IAAI7E,EAAmB,IAAI,GAe1C,KAAA;AAAA,MACJ,KAAK,SAAS;AAAA,MACd,CAAC2B,MACA,KAAK,cAAc,IAAI,cAAc,YAAY,EAAE,QAAQA,EAAS,WAAW,OAAOA,EAAS,MAAO,CAAA,CAAC;AAAA,MACxG;AAAA,IACD,GAEK,KAAA;AAAA,MACJ,KAAK,SAAS;AAAA,MACd,CAAC2D,MAAkB;AACb,aAAA,iBAAiB,CAAC,GAAGA,CAAa;AACjC,cAAAC,IAAU,KAAK,eAAe,KAAK,CAAC5C,MAASA,EAAK,WAAW5C,EAA0B,OAAO;AACpG,QAAI,KAAK,eAAe,UAAU,CAACwF,MAClC,KAAK,QAAQ,CAAC,GAAG,KAAK,cAAc,GACpC,KAAK,cAAc,IAAIb,EAAuB,KAAK,cAAc,CAAC;AAAA,MAEpE;AAAA,MACA;AAAA,IACD;AAAA,EAAA;AAAA,EAGQ,uBAA6B;AACrC,UAAM,qBAAqB,GAC3B,KAAK,SAAS,QAAQ;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMhB,SAAe;AACrB,IAAIc,QAAKX,GAAaC,CAAA,KACtB,KAAK,WAAW,OAAO;AAAA,EAAA;AAAA,EAGf,SAAS;AACV,WAAAW;AAAA;AAAA;AAAA;AAAA,YAIG,KAAK,KAAK;AAAA,aACTC,EAAU,KAAK,MAAM,CAAC;AAAA,gBACnB,KAAK,QAAQ;AAAA,gBACbF,QAAKX,GAAWC,CAAA,CAAA;AAAA,4BACJ,KAAK,mBAAmB;AAAA,cACtC,KAAK,QAAQ;AAAA,aACda,QAAKd,GAAaE,CAAA,CAAA;AAAA;AAAA,yBAEN,KAAK,SAAS,KAAK,qBAAqB,CAAC,WAAWY,QAAKd,GAAaE,CAAA,CAAA;AAAA;AAAA;AAAA,KAG1F,KAAK,eAAgB,CAAA;AAAA;AAAA,EAAA;AAAA,EAIf,iBAAiB;AAC1B,WAAK,KAAK,gBAAgB,SAEnBU;AAAA;AAAA,MAEHG;AAAA,MACD,KAAK;AAAA,MACL,CAACjD,MAASA,EAAK;AAAA,MACf,CAACA,MAAS,KAAK,kBAAkBA,CAAI;AAAA,IACrC,CAAA;AAAA;AAAA;AAAA;AAAA,cAISgD,QAAKd,GAAaI,CAAA,CAAA;AAAA,aACnB,KAAK,SAAS,KAAK,qBAAqB,CAAC;AAAA,8CACR,KAAK,SAAS,KAAK,qBAAqB,CAAC;AAAA;AAAA;AAAA,MAd5CY;AAAA,EAc4C;AAAA,EAM5E,kBAAkBlD,GAAyB;AAC9C,UAAAnB,IAAOmB,EAAK,eAAe;AAC1B,WAAA8C;AAAA;AAAA;AAAA,OAGFK;AAAA,MACDnD,EAAK,WAAW5C,EAA0B;AAAA,MAC1C,MAAM0F;AAAA,IACN,CAAA;AAAA,OACCK;AAAA,MACDnD,EAAK,WAAW5C,EAA0B,SACzC4C,EAAK,WAAW5C,EAA0B,aAC1C4C,EAAK,WAAW5C,EAA0B;AAAA,MAC3C,MAAM0F;AAAA,IACN,CAAA;AAAA;AAAA;AAAA,mCAG6BjE,GAAM,QAAQ,EAAE,IAAIA,GAAM,QAAQ,EAAE;AAAA;AAAA,QAE/DuE,EAAYvE,GAAM,QAAQ,GAAG,EAAE,UAAU,EAAA,CAAG,CAAC;AAAA,QAC7C,KAAK,SAAS,OAAOmB,EAAK,UAAU,EAAE,uBAAuB,EAAE,CAAC,CAAC;AAAA;AAAA,OAElEmD;AAAA,MACDnD,EAAK,WAAW5C,EAA0B;AAAA,MAC1C,MAAM0F,mDAAsD9C,EAAK,QAAQ;AAAA,IACzE,CAAA;AAAA,OACCmD;AAAA,MACDnD,EAAK,WAAW5C,EAA0B;AAAA,MAC1C,MAAM0F;AAAA,IACN,CAAA;AAAA,OACCK,EAAKnD,EAAK,WAAW5C,EAA0B,WAAW,MAAM0F,qCAAwC,CAAC;AAAA,OACzGK;AAAA,MACDnD,EAAK,WAAW5C,EAA0B;AAAA,MAC1C,MAAM0F;AAAA,IACN,CAAA;AAAA;AAAA;AAAA,OAGCK;AAAA,MACDnD,EAAK,WAAW5C,EAA0B;AAAA,MAC1C,MAAM0F;AAAA;AAAA;AAAA,iBAGK,MAAME,EAAA,MAAKd,GAALG,CAAA,EAAA,KAAA,MAAmBrC,CAAK,CAAA;AAAA,gBAC/B,KAAK,SAAS,KAAK,gBAAgB,CAAC;AAAA,kDACF,KAAK,SAAS,KAAK,gBAAgB,CAAC;AAAA;AAAA;AAAA,IAGhF,CAAA;AAAA;AAAA;AAAA;AAAA,EAAA;AAAA,EAML,MAAgB,SAASqD,GAAyB;AAI7C,QAHJA,EAAE,yBAAyB,GAEvBR,QAAKX,GAAaC,CAAA,KAClB,CAACkB,EAAE,OAAO,MAAM,UAAU,CAACA,EAAE,OAAO,QAAQ,OAAQ;AAExD,UAAMC,IAAc,KAAK,SAAS,qBAAqBD,EAAE,OAAO,KAAK;AACrE,SAAK,cAAc,IAAIpB,EAA0B,MAAMqB,CAAW,CAAC;AAAA,EAAA;AAkFrE;AAhROpB,IAAA,oBAAA,QAAA;AAgDFC,IAAW,WAAY;AAC1B,SAAO,KAAK,YAAa,CAAC,KAAK,YAAY,KAAK,eAAe,SAAS;AACzE;AA+IAC,IAAa,SAACiB,GAAU;AACnB,EAAC,KAAK,cACVA,EAAE,yBAAyB,GAC3B,KAAK,UAAU,OAAO;AACvB;AAEAhB,IAAa,SAACrC,GAAyB;AACjC,EAAAA,EAAA,eAAe,iBAAiB,MAAM;AAC5C;AAEAsC,IAAa,WAAG;AACf,OAAK,SAAS,UAAU;AACzB;AA7MYC,EA+Ma,SAAS;AAAA,EACjCgB;AAAA,EACAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8DD;AAxQAC,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GANdnB,EAOZ,WAAA,UAAA,CAAA;AAMAkB,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,SAAS,WAAW,wBAAyB,CAAA;AAAA,GAZnDnB,EAaZ,WAAA,uBAAA,CAAA;AAOAkB,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,SAAS,SAAS,GAAM,CAAA;AAAA,GAnB9BnB,EAoBZ,WAAA,YAAA,CAAA;AAMAkB,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,QAAS,CAAA;AAAA,GAzBfnB,EA0BZ,WAAA,YAAA,CAAA;AAMAkB,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GA/BdnB,EAgCZ,WAAA,SAAA,CAAA;AAGUkB,EAAA;AAAA,EADTE,EAAM,aAAa,EAAI;AAAA,GAlCZpB,EAmCF,WAAA,aAAA,CAAA;AAGAkB,EAAA;AAAA,EADTG,EAAM;AAAA,GArCKrB,EAsCF,WAAA,kBAAA,CAAA;AAtCEA,IAANkB,EAAA;AAAA,EADNI,EAAc,oBAAoB;AAAA,GACtBtB,CAAA;AAkRN,MAAMuB,KAA+BN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;"}